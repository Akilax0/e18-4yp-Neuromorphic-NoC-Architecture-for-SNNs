$date
	Fri Apr 12 13:27:28 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module accelerator_initialize $end
$var reg 1 ! CLK $end
$var reg 4 " CLK_count [3:0] $end
$var reg 1 # clear $end
$var reg 4 $ decay_rate [3:0] $end
$scope begin genblk1[0] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 % decay_rate [3:0] $end
$var wire 32 & membrane_potential_initialization [31:0] $end
$var wire 12 ' neuron_address_initialization [11:0] $end
$var wire 32 ( result_divide_by_2_plus_4 [31:0] $end
$var wire 1 ) Exception $end
$var reg 8 * adjusted_exponent [7:0] $end
$var reg 8 + exponent [7:0] $end
$var reg 8 , exponent_divided_by_2 [7:0] $end
$var reg 8 - exponent_divided_by_4 [7:0] $end
$var reg 23 . mantissa [22:0] $end
$var reg 32 / membrane_potential [31:0] $end
$var reg 12 0 neuron_address [11:0] $end
$var reg 32 1 number_divided_by_2 [31:0] $end
$var reg 32 2 number_divided_by_4 [31:0] $end
$var reg 32 3 output_potential_decay [31:0] $end
$var reg 2 4 sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 5 AddBar_Sub $end
$var wire 1 ) Exception $end
$var wire 32 6 a_operand [31:0] $end
$var wire 32 7 b_operand [31:0] $end
$var wire 1 8 operation_sub_addBar $end
$var wire 1 9 output_sign $end
$var wire 25 : subtraction_diff [24:0] $end
$var wire 31 ; sub_diff [30:0] $end
$var wire 24 < significand_sub_complement [23:0] $end
$var wire 25 = significand_sub [24:0] $end
$var wire 24 > significand_b_add_sub [23:0] $end
$var wire 24 ? significand_b [23:0] $end
$var wire 25 @ significand_add [24:0] $end
$var wire 24 A significand_a [23:0] $end
$var wire 32 B result [31:0] $end
$var wire 1 C perform $end
$var wire 32 D operand_b [31:0] $end
$var wire 32 E operand_a [31:0] $end
$var wire 8 F exponent_sub [7:0] $end
$var wire 8 G exponent_diff [7:0] $end
$var wire 8 H exponent_b_add_sub [7:0] $end
$var wire 31 I add_sum [30:0] $end
$var wire 1 J Comp_enable $end
$scope module pe $end
$var wire 8 K Exponent_a [7:0] $end
$var wire 25 L significand [24:0] $end
$var wire 8 M Exponent_sub [7:0] $end
$var reg 25 N Significand [24:0] $end
$var reg 5 O shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 P decay_rate [3:0] $end
$var wire 32 Q membrane_potential_initialization [31:0] $end
$var wire 12 R neuron_address_initialization [11:0] $end
$var wire 32 S result_divide_by_2_plus_4 [31:0] $end
$var wire 1 T Exception $end
$var reg 8 U adjusted_exponent [7:0] $end
$var reg 8 V exponent [7:0] $end
$var reg 8 W exponent_divided_by_2 [7:0] $end
$var reg 8 X exponent_divided_by_4 [7:0] $end
$var reg 23 Y mantissa [22:0] $end
$var reg 32 Z membrane_potential [31:0] $end
$var reg 12 [ neuron_address [11:0] $end
$var reg 32 \ number_divided_by_2 [31:0] $end
$var reg 32 ] number_divided_by_4 [31:0] $end
$var reg 32 ^ output_potential_decay [31:0] $end
$var reg 2 _ sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 ` AddBar_Sub $end
$var wire 1 T Exception $end
$var wire 32 a a_operand [31:0] $end
$var wire 32 b b_operand [31:0] $end
$var wire 1 c operation_sub_addBar $end
$var wire 1 d output_sign $end
$var wire 25 e subtraction_diff [24:0] $end
$var wire 31 f sub_diff [30:0] $end
$var wire 24 g significand_sub_complement [23:0] $end
$var wire 25 h significand_sub [24:0] $end
$var wire 24 i significand_b_add_sub [23:0] $end
$var wire 24 j significand_b [23:0] $end
$var wire 25 k significand_add [24:0] $end
$var wire 24 l significand_a [23:0] $end
$var wire 32 m result [31:0] $end
$var wire 1 n perform $end
$var wire 32 o operand_b [31:0] $end
$var wire 32 p operand_a [31:0] $end
$var wire 8 q exponent_sub [7:0] $end
$var wire 8 r exponent_diff [7:0] $end
$var wire 8 s exponent_b_add_sub [7:0] $end
$var wire 31 t add_sum [30:0] $end
$var wire 1 u Comp_enable $end
$scope module pe $end
$var wire 8 v Exponent_a [7:0] $end
$var wire 25 w significand [24:0] $end
$var wire 8 x Exponent_sub [7:0] $end
$var reg 25 y Significand [24:0] $end
$var reg 5 z shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 { decay_rate [3:0] $end
$var wire 32 | membrane_potential_initialization [31:0] $end
$var wire 12 } neuron_address_initialization [11:0] $end
$var wire 32 ~ result_divide_by_2_plus_4 [31:0] $end
$var wire 1 !" Exception $end
$var reg 8 "" adjusted_exponent [7:0] $end
$var reg 8 #" exponent [7:0] $end
$var reg 8 $" exponent_divided_by_2 [7:0] $end
$var reg 8 %" exponent_divided_by_4 [7:0] $end
$var reg 23 &" mantissa [22:0] $end
$var reg 32 '" membrane_potential [31:0] $end
$var reg 12 (" neuron_address [11:0] $end
$var reg 32 )" number_divided_by_2 [31:0] $end
$var reg 32 *" number_divided_by_4 [31:0] $end
$var reg 32 +" output_potential_decay [31:0] $end
$var reg 2 ," sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 -" AddBar_Sub $end
$var wire 1 !" Exception $end
$var wire 32 ." a_operand [31:0] $end
$var wire 32 /" b_operand [31:0] $end
$var wire 1 0" operation_sub_addBar $end
$var wire 1 1" output_sign $end
$var wire 25 2" subtraction_diff [24:0] $end
$var wire 31 3" sub_diff [30:0] $end
$var wire 24 4" significand_sub_complement [23:0] $end
$var wire 25 5" significand_sub [24:0] $end
$var wire 24 6" significand_b_add_sub [23:0] $end
$var wire 24 7" significand_b [23:0] $end
$var wire 25 8" significand_add [24:0] $end
$var wire 24 9" significand_a [23:0] $end
$var wire 32 :" result [31:0] $end
$var wire 1 ;" perform $end
$var wire 32 <" operand_b [31:0] $end
$var wire 32 =" operand_a [31:0] $end
$var wire 8 >" exponent_sub [7:0] $end
$var wire 8 ?" exponent_diff [7:0] $end
$var wire 8 @" exponent_b_add_sub [7:0] $end
$var wire 31 A" add_sum [30:0] $end
$var wire 1 B" Comp_enable $end
$scope module pe $end
$var wire 8 C" Exponent_a [7:0] $end
$var wire 25 D" significand [24:0] $end
$var wire 8 E" Exponent_sub [7:0] $end
$var reg 25 F" Significand [24:0] $end
$var reg 5 G" shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 H" decay_rate [3:0] $end
$var wire 32 I" membrane_potential_initialization [31:0] $end
$var wire 12 J" neuron_address_initialization [11:0] $end
$var wire 32 K" result_divide_by_2_plus_4 [31:0] $end
$var wire 1 L" Exception $end
$var reg 8 M" adjusted_exponent [7:0] $end
$var reg 8 N" exponent [7:0] $end
$var reg 8 O" exponent_divided_by_2 [7:0] $end
$var reg 8 P" exponent_divided_by_4 [7:0] $end
$var reg 23 Q" mantissa [22:0] $end
$var reg 32 R" membrane_potential [31:0] $end
$var reg 12 S" neuron_address [11:0] $end
$var reg 32 T" number_divided_by_2 [31:0] $end
$var reg 32 U" number_divided_by_4 [31:0] $end
$var reg 32 V" output_potential_decay [31:0] $end
$var reg 2 W" sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 X" AddBar_Sub $end
$var wire 1 L" Exception $end
$var wire 32 Y" a_operand [31:0] $end
$var wire 32 Z" b_operand [31:0] $end
$var wire 1 [" operation_sub_addBar $end
$var wire 1 \" output_sign $end
$var wire 25 ]" subtraction_diff [24:0] $end
$var wire 31 ^" sub_diff [30:0] $end
$var wire 24 _" significand_sub_complement [23:0] $end
$var wire 25 `" significand_sub [24:0] $end
$var wire 24 a" significand_b_add_sub [23:0] $end
$var wire 24 b" significand_b [23:0] $end
$var wire 25 c" significand_add [24:0] $end
$var wire 24 d" significand_a [23:0] $end
$var wire 32 e" result [31:0] $end
$var wire 1 f" perform $end
$var wire 32 g" operand_b [31:0] $end
$var wire 32 h" operand_a [31:0] $end
$var wire 8 i" exponent_sub [7:0] $end
$var wire 8 j" exponent_diff [7:0] $end
$var wire 8 k" exponent_b_add_sub [7:0] $end
$var wire 31 l" add_sum [30:0] $end
$var wire 1 m" Comp_enable $end
$scope module pe $end
$var wire 8 n" Exponent_a [7:0] $end
$var wire 25 o" significand [24:0] $end
$var wire 8 p" Exponent_sub [7:0] $end
$var reg 25 q" Significand [24:0] $end
$var reg 5 r" shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 s" decay_rate [3:0] $end
$var wire 32 t" membrane_potential_initialization [31:0] $end
$var wire 12 u" neuron_address_initialization [11:0] $end
$var wire 32 v" result_divide_by_2_plus_4 [31:0] $end
$var wire 1 w" Exception $end
$var reg 8 x" adjusted_exponent [7:0] $end
$var reg 8 y" exponent [7:0] $end
$var reg 8 z" exponent_divided_by_2 [7:0] $end
$var reg 8 {" exponent_divided_by_4 [7:0] $end
$var reg 23 |" mantissa [22:0] $end
$var reg 32 }" membrane_potential [31:0] $end
$var reg 12 ~" neuron_address [11:0] $end
$var reg 32 !# number_divided_by_2 [31:0] $end
$var reg 32 "# number_divided_by_4 [31:0] $end
$var reg 32 ## output_potential_decay [31:0] $end
$var reg 2 $# sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 %# AddBar_Sub $end
$var wire 1 w" Exception $end
$var wire 32 &# a_operand [31:0] $end
$var wire 32 '# b_operand [31:0] $end
$var wire 1 (# operation_sub_addBar $end
$var wire 1 )# output_sign $end
$var wire 25 *# subtraction_diff [24:0] $end
$var wire 31 +# sub_diff [30:0] $end
$var wire 24 ,# significand_sub_complement [23:0] $end
$var wire 25 -# significand_sub [24:0] $end
$var wire 24 .# significand_b_add_sub [23:0] $end
$var wire 24 /# significand_b [23:0] $end
$var wire 25 0# significand_add [24:0] $end
$var wire 24 1# significand_a [23:0] $end
$var wire 32 2# result [31:0] $end
$var wire 1 3# perform $end
$var wire 32 4# operand_b [31:0] $end
$var wire 32 5# operand_a [31:0] $end
$var wire 8 6# exponent_sub [7:0] $end
$var wire 8 7# exponent_diff [7:0] $end
$var wire 8 8# exponent_b_add_sub [7:0] $end
$var wire 31 9# add_sum [30:0] $end
$var wire 1 :# Comp_enable $end
$scope module pe $end
$var wire 8 ;# Exponent_a [7:0] $end
$var wire 25 <# significand [24:0] $end
$var wire 8 =# Exponent_sub [7:0] $end
$var reg 25 ># Significand [24:0] $end
$var reg 5 ?# shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 @# decay_rate [3:0] $end
$var wire 32 A# membrane_potential_initialization [31:0] $end
$var wire 12 B# neuron_address_initialization [11:0] $end
$var wire 32 C# result_divide_by_2_plus_4 [31:0] $end
$var wire 1 D# Exception $end
$var reg 8 E# adjusted_exponent [7:0] $end
$var reg 8 F# exponent [7:0] $end
$var reg 8 G# exponent_divided_by_2 [7:0] $end
$var reg 8 H# exponent_divided_by_4 [7:0] $end
$var reg 23 I# mantissa [22:0] $end
$var reg 32 J# membrane_potential [31:0] $end
$var reg 12 K# neuron_address [11:0] $end
$var reg 32 L# number_divided_by_2 [31:0] $end
$var reg 32 M# number_divided_by_4 [31:0] $end
$var reg 32 N# output_potential_decay [31:0] $end
$var reg 2 O# sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 P# AddBar_Sub $end
$var wire 1 D# Exception $end
$var wire 32 Q# a_operand [31:0] $end
$var wire 32 R# b_operand [31:0] $end
$var wire 1 S# operation_sub_addBar $end
$var wire 1 T# output_sign $end
$var wire 25 U# subtraction_diff [24:0] $end
$var wire 31 V# sub_diff [30:0] $end
$var wire 24 W# significand_sub_complement [23:0] $end
$var wire 25 X# significand_sub [24:0] $end
$var wire 24 Y# significand_b_add_sub [23:0] $end
$var wire 24 Z# significand_b [23:0] $end
$var wire 25 [# significand_add [24:0] $end
$var wire 24 \# significand_a [23:0] $end
$var wire 32 ]# result [31:0] $end
$var wire 1 ^# perform $end
$var wire 32 _# operand_b [31:0] $end
$var wire 32 `# operand_a [31:0] $end
$var wire 8 a# exponent_sub [7:0] $end
$var wire 8 b# exponent_diff [7:0] $end
$var wire 8 c# exponent_b_add_sub [7:0] $end
$var wire 31 d# add_sum [30:0] $end
$var wire 1 e# Comp_enable $end
$scope module pe $end
$var wire 8 f# Exponent_a [7:0] $end
$var wire 25 g# significand [24:0] $end
$var wire 8 h# Exponent_sub [7:0] $end
$var reg 25 i# Significand [24:0] $end
$var reg 5 j# shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 k# decay_rate [3:0] $end
$var wire 32 l# membrane_potential_initialization [31:0] $end
$var wire 12 m# neuron_address_initialization [11:0] $end
$var wire 32 n# result_divide_by_2_plus_4 [31:0] $end
$var wire 1 o# Exception $end
$var reg 8 p# adjusted_exponent [7:0] $end
$var reg 8 q# exponent [7:0] $end
$var reg 8 r# exponent_divided_by_2 [7:0] $end
$var reg 8 s# exponent_divided_by_4 [7:0] $end
$var reg 23 t# mantissa [22:0] $end
$var reg 32 u# membrane_potential [31:0] $end
$var reg 12 v# neuron_address [11:0] $end
$var reg 32 w# number_divided_by_2 [31:0] $end
$var reg 32 x# number_divided_by_4 [31:0] $end
$var reg 32 y# output_potential_decay [31:0] $end
$var reg 2 z# sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 {# AddBar_Sub $end
$var wire 1 o# Exception $end
$var wire 32 |# a_operand [31:0] $end
$var wire 32 }# b_operand [31:0] $end
$var wire 1 ~# operation_sub_addBar $end
$var wire 1 !$ output_sign $end
$var wire 25 "$ subtraction_diff [24:0] $end
$var wire 31 #$ sub_diff [30:0] $end
$var wire 24 $$ significand_sub_complement [23:0] $end
$var wire 25 %$ significand_sub [24:0] $end
$var wire 24 &$ significand_b_add_sub [23:0] $end
$var wire 24 '$ significand_b [23:0] $end
$var wire 25 ($ significand_add [24:0] $end
$var wire 24 )$ significand_a [23:0] $end
$var wire 32 *$ result [31:0] $end
$var wire 1 +$ perform $end
$var wire 32 ,$ operand_b [31:0] $end
$var wire 32 -$ operand_a [31:0] $end
$var wire 8 .$ exponent_sub [7:0] $end
$var wire 8 /$ exponent_diff [7:0] $end
$var wire 8 0$ exponent_b_add_sub [7:0] $end
$var wire 31 1$ add_sum [30:0] $end
$var wire 1 2$ Comp_enable $end
$scope module pe $end
$var wire 8 3$ Exponent_a [7:0] $end
$var wire 25 4$ significand [24:0] $end
$var wire 8 5$ Exponent_sub [7:0] $end
$var reg 25 6$ Significand [24:0] $end
$var reg 5 7$ shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 8$ decay_rate [3:0] $end
$var wire 32 9$ membrane_potential_initialization [31:0] $end
$var wire 12 :$ neuron_address_initialization [11:0] $end
$var wire 32 ;$ result_divide_by_2_plus_4 [31:0] $end
$var wire 1 <$ Exception $end
$var reg 8 =$ adjusted_exponent [7:0] $end
$var reg 8 >$ exponent [7:0] $end
$var reg 8 ?$ exponent_divided_by_2 [7:0] $end
$var reg 8 @$ exponent_divided_by_4 [7:0] $end
$var reg 23 A$ mantissa [22:0] $end
$var reg 32 B$ membrane_potential [31:0] $end
$var reg 12 C$ neuron_address [11:0] $end
$var reg 32 D$ number_divided_by_2 [31:0] $end
$var reg 32 E$ number_divided_by_4 [31:0] $end
$var reg 32 F$ output_potential_decay [31:0] $end
$var reg 2 G$ sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 H$ AddBar_Sub $end
$var wire 1 <$ Exception $end
$var wire 32 I$ a_operand [31:0] $end
$var wire 32 J$ b_operand [31:0] $end
$var wire 1 K$ operation_sub_addBar $end
$var wire 1 L$ output_sign $end
$var wire 25 M$ subtraction_diff [24:0] $end
$var wire 31 N$ sub_diff [30:0] $end
$var wire 24 O$ significand_sub_complement [23:0] $end
$var wire 25 P$ significand_sub [24:0] $end
$var wire 24 Q$ significand_b_add_sub [23:0] $end
$var wire 24 R$ significand_b [23:0] $end
$var wire 25 S$ significand_add [24:0] $end
$var wire 24 T$ significand_a [23:0] $end
$var wire 32 U$ result [31:0] $end
$var wire 1 V$ perform $end
$var wire 32 W$ operand_b [31:0] $end
$var wire 32 X$ operand_a [31:0] $end
$var wire 8 Y$ exponent_sub [7:0] $end
$var wire 8 Z$ exponent_diff [7:0] $end
$var wire 8 [$ exponent_b_add_sub [7:0] $end
$var wire 31 \$ add_sum [30:0] $end
$var wire 1 ]$ Comp_enable $end
$scope module pe $end
$var wire 8 ^$ Exponent_a [7:0] $end
$var wire 25 _$ significand [24:0] $end
$var wire 8 `$ Exponent_sub [7:0] $end
$var reg 25 a$ Significand [24:0] $end
$var reg 5 b$ shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 c$ decay_rate [3:0] $end
$var wire 32 d$ membrane_potential_initialization [31:0] $end
$var wire 12 e$ neuron_address_initialization [11:0] $end
$var wire 32 f$ result_divide_by_2_plus_4 [31:0] $end
$var wire 1 g$ Exception $end
$var reg 8 h$ adjusted_exponent [7:0] $end
$var reg 8 i$ exponent [7:0] $end
$var reg 8 j$ exponent_divided_by_2 [7:0] $end
$var reg 8 k$ exponent_divided_by_4 [7:0] $end
$var reg 23 l$ mantissa [22:0] $end
$var reg 32 m$ membrane_potential [31:0] $end
$var reg 12 n$ neuron_address [11:0] $end
$var reg 32 o$ number_divided_by_2 [31:0] $end
$var reg 32 p$ number_divided_by_4 [31:0] $end
$var reg 32 q$ output_potential_decay [31:0] $end
$var reg 2 r$ sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 s$ AddBar_Sub $end
$var wire 1 g$ Exception $end
$var wire 32 t$ a_operand [31:0] $end
$var wire 32 u$ b_operand [31:0] $end
$var wire 1 v$ operation_sub_addBar $end
$var wire 1 w$ output_sign $end
$var wire 25 x$ subtraction_diff [24:0] $end
$var wire 31 y$ sub_diff [30:0] $end
$var wire 24 z$ significand_sub_complement [23:0] $end
$var wire 25 {$ significand_sub [24:0] $end
$var wire 24 |$ significand_b_add_sub [23:0] $end
$var wire 24 }$ significand_b [23:0] $end
$var wire 25 ~$ significand_add [24:0] $end
$var wire 24 !% significand_a [23:0] $end
$var wire 32 "% result [31:0] $end
$var wire 1 #% perform $end
$var wire 32 $% operand_b [31:0] $end
$var wire 32 %% operand_a [31:0] $end
$var wire 8 &% exponent_sub [7:0] $end
$var wire 8 '% exponent_diff [7:0] $end
$var wire 8 (% exponent_b_add_sub [7:0] $end
$var wire 31 )% add_sum [30:0] $end
$var wire 1 *% Comp_enable $end
$scope module pe $end
$var wire 8 +% Exponent_a [7:0] $end
$var wire 25 ,% significand [24:0] $end
$var wire 8 -% Exponent_sub [7:0] $end
$var reg 25 .% Significand [24:0] $end
$var reg 5 /% shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 0% decay_rate [3:0] $end
$var wire 32 1% membrane_potential_initialization [31:0] $end
$var wire 12 2% neuron_address_initialization [11:0] $end
$var wire 32 3% result_divide_by_2_plus_4 [31:0] $end
$var wire 1 4% Exception $end
$var reg 8 5% adjusted_exponent [7:0] $end
$var reg 8 6% exponent [7:0] $end
$var reg 8 7% exponent_divided_by_2 [7:0] $end
$var reg 8 8% exponent_divided_by_4 [7:0] $end
$var reg 23 9% mantissa [22:0] $end
$var reg 32 :% membrane_potential [31:0] $end
$var reg 12 ;% neuron_address [11:0] $end
$var reg 32 <% number_divided_by_2 [31:0] $end
$var reg 32 =% number_divided_by_4 [31:0] $end
$var reg 32 >% output_potential_decay [31:0] $end
$var reg 2 ?% sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 @% AddBar_Sub $end
$var wire 1 4% Exception $end
$var wire 32 A% a_operand [31:0] $end
$var wire 32 B% b_operand [31:0] $end
$var wire 1 C% operation_sub_addBar $end
$var wire 1 D% output_sign $end
$var wire 25 E% subtraction_diff [24:0] $end
$var wire 31 F% sub_diff [30:0] $end
$var wire 24 G% significand_sub_complement [23:0] $end
$var wire 25 H% significand_sub [24:0] $end
$var wire 24 I% significand_b_add_sub [23:0] $end
$var wire 24 J% significand_b [23:0] $end
$var wire 25 K% significand_add [24:0] $end
$var wire 24 L% significand_a [23:0] $end
$var wire 32 M% result [31:0] $end
$var wire 1 N% perform $end
$var wire 32 O% operand_b [31:0] $end
$var wire 32 P% operand_a [31:0] $end
$var wire 8 Q% exponent_sub [7:0] $end
$var wire 8 R% exponent_diff [7:0] $end
$var wire 8 S% exponent_b_add_sub [7:0] $end
$var wire 31 T% add_sum [30:0] $end
$var wire 1 U% Comp_enable $end
$scope module pe $end
$var wire 8 V% Exponent_a [7:0] $end
$var wire 25 W% significand [24:0] $end
$var wire 8 X% Exponent_sub [7:0] $end
$var reg 25 Y% Significand [24:0] $end
$var reg 5 Z% shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[0] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 [% neuron_address [11:0] $end
$var wire 12 \% source_address [11:0] $end
$var wire 60 ]% source_addresses_array [59:0] $end
$var wire 160 ^% weights_array [159:0] $end
$var wire 1 _% excpetion $end
$var wire 32 `% added_weight [31:0] $end
$var reg 32 a% accumulated_weight [31:0] $end
$var reg 1 b% break $end
$var reg 32 c% considered_weight [31:0] $end
$var reg 4 d% i [3:0] $end
$var reg 4 e% index [3:0] $end
$var reg 32 f% mult_output [31:0] $end
$scope module add1 $end
$var wire 1 g% AddBar_Sub $end
$var wire 1 _% Exception $end
$var wire 32 h% a_operand [31:0] $end
$var wire 32 i% b_operand [31:0] $end
$var wire 1 j% operation_sub_addBar $end
$var wire 1 k% output_sign $end
$var wire 25 l% subtraction_diff [24:0] $end
$var wire 31 m% sub_diff [30:0] $end
$var wire 24 n% significand_sub_complement [23:0] $end
$var wire 25 o% significand_sub [24:0] $end
$var wire 24 p% significand_b_add_sub [23:0] $end
$var wire 24 q% significand_b [23:0] $end
$var wire 25 r% significand_add [24:0] $end
$var wire 24 s% significand_a [23:0] $end
$var wire 32 t% result [31:0] $end
$var wire 1 u% perform $end
$var wire 32 v% operand_b [31:0] $end
$var wire 32 w% operand_a [31:0] $end
$var wire 8 x% exponent_sub [7:0] $end
$var wire 8 y% exponent_diff [7:0] $end
$var wire 8 z% exponent_b_add_sub [7:0] $end
$var wire 31 {% add_sum [30:0] $end
$var wire 1 |% Comp_enable $end
$scope module pe $end
$var wire 8 }% Exponent_a [7:0] $end
$var wire 25 ~% significand [24:0] $end
$var wire 8 !& Exponent_sub [7:0] $end
$var reg 25 "& Significand [24:0] $end
$var reg 5 #& shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[1] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 $& neuron_address [11:0] $end
$var wire 12 %& source_address [11:0] $end
$var wire 60 && source_addresses_array [59:0] $end
$var wire 160 '& weights_array [159:0] $end
$var wire 1 (& excpetion $end
$var wire 32 )& added_weight [31:0] $end
$var reg 32 *& accumulated_weight [31:0] $end
$var reg 1 +& break $end
$var reg 32 ,& considered_weight [31:0] $end
$var reg 4 -& i [3:0] $end
$var reg 4 .& index [3:0] $end
$var reg 32 /& mult_output [31:0] $end
$scope module add1 $end
$var wire 1 0& AddBar_Sub $end
$var wire 1 (& Exception $end
$var wire 32 1& a_operand [31:0] $end
$var wire 32 2& b_operand [31:0] $end
$var wire 1 3& operation_sub_addBar $end
$var wire 1 4& output_sign $end
$var wire 25 5& subtraction_diff [24:0] $end
$var wire 31 6& sub_diff [30:0] $end
$var wire 24 7& significand_sub_complement [23:0] $end
$var wire 25 8& significand_sub [24:0] $end
$var wire 24 9& significand_b_add_sub [23:0] $end
$var wire 24 :& significand_b [23:0] $end
$var wire 25 ;& significand_add [24:0] $end
$var wire 24 <& significand_a [23:0] $end
$var wire 32 =& result [31:0] $end
$var wire 1 >& perform $end
$var wire 32 ?& operand_b [31:0] $end
$var wire 32 @& operand_a [31:0] $end
$var wire 8 A& exponent_sub [7:0] $end
$var wire 8 B& exponent_diff [7:0] $end
$var wire 8 C& exponent_b_add_sub [7:0] $end
$var wire 31 D& add_sum [30:0] $end
$var wire 1 E& Comp_enable $end
$scope module pe $end
$var wire 8 F& Exponent_a [7:0] $end
$var wire 25 G& significand [24:0] $end
$var wire 8 H& Exponent_sub [7:0] $end
$var reg 25 I& Significand [24:0] $end
$var reg 5 J& shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[2] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 K& neuron_address [11:0] $end
$var wire 12 L& source_address [11:0] $end
$var wire 60 M& source_addresses_array [59:0] $end
$var wire 160 N& weights_array [159:0] $end
$var wire 1 O& excpetion $end
$var wire 32 P& added_weight [31:0] $end
$var reg 32 Q& accumulated_weight [31:0] $end
$var reg 1 R& break $end
$var reg 32 S& considered_weight [31:0] $end
$var reg 4 T& i [3:0] $end
$var reg 4 U& index [3:0] $end
$var reg 32 V& mult_output [31:0] $end
$scope module add1 $end
$var wire 1 W& AddBar_Sub $end
$var wire 1 O& Exception $end
$var wire 32 X& a_operand [31:0] $end
$var wire 32 Y& b_operand [31:0] $end
$var wire 1 Z& operation_sub_addBar $end
$var wire 1 [& output_sign $end
$var wire 25 \& subtraction_diff [24:0] $end
$var wire 31 ]& sub_diff [30:0] $end
$var wire 24 ^& significand_sub_complement [23:0] $end
$var wire 25 _& significand_sub [24:0] $end
$var wire 24 `& significand_b_add_sub [23:0] $end
$var wire 24 a& significand_b [23:0] $end
$var wire 25 b& significand_add [24:0] $end
$var wire 24 c& significand_a [23:0] $end
$var wire 32 d& result [31:0] $end
$var wire 1 e& perform $end
$var wire 32 f& operand_b [31:0] $end
$var wire 32 g& operand_a [31:0] $end
$var wire 8 h& exponent_sub [7:0] $end
$var wire 8 i& exponent_diff [7:0] $end
$var wire 8 j& exponent_b_add_sub [7:0] $end
$var wire 31 k& add_sum [30:0] $end
$var wire 1 l& Comp_enable $end
$scope module pe $end
$var wire 8 m& Exponent_a [7:0] $end
$var wire 25 n& significand [24:0] $end
$var wire 8 o& Exponent_sub [7:0] $end
$var reg 25 p& Significand [24:0] $end
$var reg 5 q& shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[3] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 r& neuron_address [11:0] $end
$var wire 12 s& source_address [11:0] $end
$var wire 60 t& source_addresses_array [59:0] $end
$var wire 160 u& weights_array [159:0] $end
$var wire 1 v& excpetion $end
$var wire 32 w& added_weight [31:0] $end
$var reg 32 x& accumulated_weight [31:0] $end
$var reg 1 y& break $end
$var reg 32 z& considered_weight [31:0] $end
$var reg 4 {& i [3:0] $end
$var reg 4 |& index [3:0] $end
$var reg 32 }& mult_output [31:0] $end
$scope module add1 $end
$var wire 1 ~& AddBar_Sub $end
$var wire 1 v& Exception $end
$var wire 32 !' a_operand [31:0] $end
$var wire 32 "' b_operand [31:0] $end
$var wire 1 #' operation_sub_addBar $end
$var wire 1 $' output_sign $end
$var wire 25 %' subtraction_diff [24:0] $end
$var wire 31 &' sub_diff [30:0] $end
$var wire 24 '' significand_sub_complement [23:0] $end
$var wire 25 (' significand_sub [24:0] $end
$var wire 24 )' significand_b_add_sub [23:0] $end
$var wire 24 *' significand_b [23:0] $end
$var wire 25 +' significand_add [24:0] $end
$var wire 24 ,' significand_a [23:0] $end
$var wire 32 -' result [31:0] $end
$var wire 1 .' perform $end
$var wire 32 /' operand_b [31:0] $end
$var wire 32 0' operand_a [31:0] $end
$var wire 8 1' exponent_sub [7:0] $end
$var wire 8 2' exponent_diff [7:0] $end
$var wire 8 3' exponent_b_add_sub [7:0] $end
$var wire 31 4' add_sum [30:0] $end
$var wire 1 5' Comp_enable $end
$scope module pe $end
$var wire 8 6' Exponent_a [7:0] $end
$var wire 25 7' significand [24:0] $end
$var wire 8 8' Exponent_sub [7:0] $end
$var reg 25 9' Significand [24:0] $end
$var reg 5 :' shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[4] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 ;' neuron_address [11:0] $end
$var wire 12 <' source_address [11:0] $end
$var wire 60 =' source_addresses_array [59:0] $end
$var wire 160 >' weights_array [159:0] $end
$var wire 1 ?' excpetion $end
$var wire 32 @' added_weight [31:0] $end
$var reg 32 A' accumulated_weight [31:0] $end
$var reg 1 B' break $end
$var reg 32 C' considered_weight [31:0] $end
$var reg 4 D' i [3:0] $end
$var reg 4 E' index [3:0] $end
$var reg 32 F' mult_output [31:0] $end
$scope module add1 $end
$var wire 1 G' AddBar_Sub $end
$var wire 1 ?' Exception $end
$var wire 32 H' a_operand [31:0] $end
$var wire 32 I' b_operand [31:0] $end
$var wire 1 J' operation_sub_addBar $end
$var wire 1 K' output_sign $end
$var wire 25 L' subtraction_diff [24:0] $end
$var wire 31 M' sub_diff [30:0] $end
$var wire 24 N' significand_sub_complement [23:0] $end
$var wire 25 O' significand_sub [24:0] $end
$var wire 24 P' significand_b_add_sub [23:0] $end
$var wire 24 Q' significand_b [23:0] $end
$var wire 25 R' significand_add [24:0] $end
$var wire 24 S' significand_a [23:0] $end
$var wire 32 T' result [31:0] $end
$var wire 1 U' perform $end
$var wire 32 V' operand_b [31:0] $end
$var wire 32 W' operand_a [31:0] $end
$var wire 8 X' exponent_sub [7:0] $end
$var wire 8 Y' exponent_diff [7:0] $end
$var wire 8 Z' exponent_b_add_sub [7:0] $end
$var wire 31 [' add_sum [30:0] $end
$var wire 1 \' Comp_enable $end
$scope module pe $end
$var wire 8 ]' Exponent_a [7:0] $end
$var wire 25 ^' significand [24:0] $end
$var wire 8 _' Exponent_sub [7:0] $end
$var reg 25 `' Significand [24:0] $end
$var reg 5 a' shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[5] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 b' neuron_address [11:0] $end
$var wire 12 c' source_address [11:0] $end
$var wire 60 d' source_addresses_array [59:0] $end
$var wire 160 e' weights_array [159:0] $end
$var wire 1 f' excpetion $end
$var wire 32 g' added_weight [31:0] $end
$var reg 32 h' accumulated_weight [31:0] $end
$var reg 1 i' break $end
$var reg 32 j' considered_weight [31:0] $end
$var reg 4 k' i [3:0] $end
$var reg 4 l' index [3:0] $end
$var reg 32 m' mult_output [31:0] $end
$scope module add1 $end
$var wire 1 n' AddBar_Sub $end
$var wire 1 f' Exception $end
$var wire 32 o' a_operand [31:0] $end
$var wire 32 p' b_operand [31:0] $end
$var wire 1 q' operation_sub_addBar $end
$var wire 1 r' output_sign $end
$var wire 25 s' subtraction_diff [24:0] $end
$var wire 31 t' sub_diff [30:0] $end
$var wire 24 u' significand_sub_complement [23:0] $end
$var wire 25 v' significand_sub [24:0] $end
$var wire 24 w' significand_b_add_sub [23:0] $end
$var wire 24 x' significand_b [23:0] $end
$var wire 25 y' significand_add [24:0] $end
$var wire 24 z' significand_a [23:0] $end
$var wire 32 {' result [31:0] $end
$var wire 1 |' perform $end
$var wire 32 }' operand_b [31:0] $end
$var wire 32 ~' operand_a [31:0] $end
$var wire 8 !( exponent_sub [7:0] $end
$var wire 8 "( exponent_diff [7:0] $end
$var wire 8 #( exponent_b_add_sub [7:0] $end
$var wire 31 $( add_sum [30:0] $end
$var wire 1 %( Comp_enable $end
$scope module pe $end
$var wire 8 &( Exponent_a [7:0] $end
$var wire 25 '( significand [24:0] $end
$var wire 8 (( Exponent_sub [7:0] $end
$var reg 25 )( Significand [24:0] $end
$var reg 5 *( shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[6] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 +( neuron_address [11:0] $end
$var wire 12 ,( source_address [11:0] $end
$var wire 60 -( source_addresses_array [59:0] $end
$var wire 160 .( weights_array [159:0] $end
$var wire 1 /( excpetion $end
$var wire 32 0( added_weight [31:0] $end
$var reg 32 1( accumulated_weight [31:0] $end
$var reg 1 2( break $end
$var reg 32 3( considered_weight [31:0] $end
$var reg 4 4( i [3:0] $end
$var reg 4 5( index [3:0] $end
$var reg 32 6( mult_output [31:0] $end
$scope module add1 $end
$var wire 1 7( AddBar_Sub $end
$var wire 1 /( Exception $end
$var wire 32 8( a_operand [31:0] $end
$var wire 32 9( b_operand [31:0] $end
$var wire 1 :( operation_sub_addBar $end
$var wire 1 ;( output_sign $end
$var wire 25 <( subtraction_diff [24:0] $end
$var wire 31 =( sub_diff [30:0] $end
$var wire 24 >( significand_sub_complement [23:0] $end
$var wire 25 ?( significand_sub [24:0] $end
$var wire 24 @( significand_b_add_sub [23:0] $end
$var wire 24 A( significand_b [23:0] $end
$var wire 25 B( significand_add [24:0] $end
$var wire 24 C( significand_a [23:0] $end
$var wire 32 D( result [31:0] $end
$var wire 1 E( perform $end
$var wire 32 F( operand_b [31:0] $end
$var wire 32 G( operand_a [31:0] $end
$var wire 8 H( exponent_sub [7:0] $end
$var wire 8 I( exponent_diff [7:0] $end
$var wire 8 J( exponent_b_add_sub [7:0] $end
$var wire 31 K( add_sum [30:0] $end
$var wire 1 L( Comp_enable $end
$scope module pe $end
$var wire 8 M( Exponent_a [7:0] $end
$var wire 25 N( significand [24:0] $end
$var wire 8 O( Exponent_sub [7:0] $end
$var reg 25 P( Significand [24:0] $end
$var reg 5 Q( shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[7] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 R( neuron_address [11:0] $end
$var wire 12 S( source_address [11:0] $end
$var wire 60 T( source_addresses_array [59:0] $end
$var wire 160 U( weights_array [159:0] $end
$var wire 1 V( excpetion $end
$var wire 32 W( added_weight [31:0] $end
$var reg 32 X( accumulated_weight [31:0] $end
$var reg 1 Y( break $end
$var reg 32 Z( considered_weight [31:0] $end
$var reg 4 [( i [3:0] $end
$var reg 4 \( index [3:0] $end
$var reg 32 ]( mult_output [31:0] $end
$scope module add1 $end
$var wire 1 ^( AddBar_Sub $end
$var wire 1 V( Exception $end
$var wire 32 _( a_operand [31:0] $end
$var wire 32 `( b_operand [31:0] $end
$var wire 1 a( operation_sub_addBar $end
$var wire 1 b( output_sign $end
$var wire 25 c( subtraction_diff [24:0] $end
$var wire 31 d( sub_diff [30:0] $end
$var wire 24 e( significand_sub_complement [23:0] $end
$var wire 25 f( significand_sub [24:0] $end
$var wire 24 g( significand_b_add_sub [23:0] $end
$var wire 24 h( significand_b [23:0] $end
$var wire 25 i( significand_add [24:0] $end
$var wire 24 j( significand_a [23:0] $end
$var wire 32 k( result [31:0] $end
$var wire 1 l( perform $end
$var wire 32 m( operand_b [31:0] $end
$var wire 32 n( operand_a [31:0] $end
$var wire 8 o( exponent_sub [7:0] $end
$var wire 8 p( exponent_diff [7:0] $end
$var wire 8 q( exponent_b_add_sub [7:0] $end
$var wire 31 r( add_sum [30:0] $end
$var wire 1 s( Comp_enable $end
$scope module pe $end
$var wire 8 t( Exponent_a [7:0] $end
$var wire 25 u( significand [24:0] $end
$var wire 8 v( Exponent_sub [7:0] $end
$var reg 25 w( Significand [24:0] $end
$var reg 5 x( shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[8] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 y( neuron_address [11:0] $end
$var wire 12 z( source_address [11:0] $end
$var wire 60 {( source_addresses_array [59:0] $end
$var wire 160 |( weights_array [159:0] $end
$var wire 1 }( excpetion $end
$var wire 32 ~( added_weight [31:0] $end
$var reg 32 !) accumulated_weight [31:0] $end
$var reg 1 ") break $end
$var reg 32 #) considered_weight [31:0] $end
$var reg 4 $) i [3:0] $end
$var reg 4 %) index [3:0] $end
$var reg 32 &) mult_output [31:0] $end
$scope module add1 $end
$var wire 1 ') AddBar_Sub $end
$var wire 1 }( Exception $end
$var wire 32 () a_operand [31:0] $end
$var wire 32 )) b_operand [31:0] $end
$var wire 1 *) operation_sub_addBar $end
$var wire 1 +) output_sign $end
$var wire 25 ,) subtraction_diff [24:0] $end
$var wire 31 -) sub_diff [30:0] $end
$var wire 24 .) significand_sub_complement [23:0] $end
$var wire 25 /) significand_sub [24:0] $end
$var wire 24 0) significand_b_add_sub [23:0] $end
$var wire 24 1) significand_b [23:0] $end
$var wire 25 2) significand_add [24:0] $end
$var wire 24 3) significand_a [23:0] $end
$var wire 32 4) result [31:0] $end
$var wire 1 5) perform $end
$var wire 32 6) operand_b [31:0] $end
$var wire 32 7) operand_a [31:0] $end
$var wire 8 8) exponent_sub [7:0] $end
$var wire 8 9) exponent_diff [7:0] $end
$var wire 8 :) exponent_b_add_sub [7:0] $end
$var wire 31 ;) add_sum [30:0] $end
$var wire 1 <) Comp_enable $end
$scope module pe $end
$var wire 8 =) Exponent_a [7:0] $end
$var wire 25 >) significand [24:0] $end
$var wire 8 ?) Exponent_sub [7:0] $end
$var reg 25 @) Significand [24:0] $end
$var reg 5 A) shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[9] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 B) neuron_address [11:0] $end
$var wire 12 C) source_address [11:0] $end
$var wire 60 D) source_addresses_array [59:0] $end
$var wire 160 E) weights_array [159:0] $end
$var wire 1 F) excpetion $end
$var wire 32 G) added_weight [31:0] $end
$var reg 32 H) accumulated_weight [31:0] $end
$var reg 1 I) break $end
$var reg 32 J) considered_weight [31:0] $end
$var reg 4 K) i [3:0] $end
$var reg 4 L) index [3:0] $end
$var reg 32 M) mult_output [31:0] $end
$scope module add1 $end
$var wire 1 N) AddBar_Sub $end
$var wire 1 F) Exception $end
$var wire 32 O) a_operand [31:0] $end
$var wire 32 P) b_operand [31:0] $end
$var wire 1 Q) operation_sub_addBar $end
$var wire 1 R) output_sign $end
$var wire 25 S) subtraction_diff [24:0] $end
$var wire 31 T) sub_diff [30:0] $end
$var wire 24 U) significand_sub_complement [23:0] $end
$var wire 25 V) significand_sub [24:0] $end
$var wire 24 W) significand_b_add_sub [23:0] $end
$var wire 24 X) significand_b [23:0] $end
$var wire 25 Y) significand_add [24:0] $end
$var wire 24 Z) significand_a [23:0] $end
$var wire 32 [) result [31:0] $end
$var wire 1 \) perform $end
$var wire 32 ]) operand_b [31:0] $end
$var wire 32 ^) operand_a [31:0] $end
$var wire 8 _) exponent_sub [7:0] $end
$var wire 8 `) exponent_diff [7:0] $end
$var wire 8 a) exponent_b_add_sub [7:0] $end
$var wire 31 b) add_sum [30:0] $end
$var wire 1 c) Comp_enable $end
$scope module pe $end
$var wire 8 d) Exponent_a [7:0] $end
$var wire 25 e) significand [24:0] $end
$var wire 8 f) Exponent_sub [7:0] $end
$var reg 25 g) Significand [24:0] $end
$var reg 5 h) shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx h)
bx g)
bx f)
bx e)
bx d)
xc)
bx b)
bx a)
bx `)
bx _)
bx ^)
bx ])
x\)
bx [)
bx Z)
bx Y)
bx X)
bx W)
bx V)
bx U)
bx T)
bx S)
xR)
xQ)
bx P)
bx O)
0N)
bx M)
bx L)
b101 K)
bx J)
xI)
bx H)
bx G)
xF)
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 E)
b11000000000100000000000101000000000110000000000111 D)
bx C)
b1001 B)
bx A)
bx @)
bx ?)
bx >)
bx =)
x<)
bx ;)
bx :)
bx 9)
bx 8)
bx 7)
bx 6)
x5)
bx 4)
bx 3)
bx 2)
bx 1)
bx 0)
bx /)
bx .)
bx -)
bx ,)
x+)
x*)
bx ))
bx ()
0')
bx &)
bx %)
b101 $)
bx #)
x")
bx !)
bx ~(
x}(
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 |(
b11000000000100000000000101000000000110000000000111 {(
bx z(
b1000 y(
bx x(
bx w(
bx v(
bx u(
bx t(
xs(
bx r(
bx q(
bx p(
bx o(
bx n(
bx m(
xl(
bx k(
bx j(
bx i(
bx h(
bx g(
bx f(
bx e(
bx d(
bx c(
xb(
xa(
bx `(
bx _(
0^(
bx ](
bx \(
b101 [(
bx Z(
xY(
bx X(
bx W(
xV(
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 U(
b11000000000100000000000101000000000110000000000111 T(
bx S(
b111 R(
bx Q(
bx P(
bx O(
bx N(
bx M(
xL(
bx K(
bx J(
bx I(
bx H(
bx G(
bx F(
xE(
bx D(
bx C(
bx B(
bx A(
bx @(
bx ?(
bx >(
bx =(
bx <(
x;(
x:(
bx 9(
bx 8(
07(
bx 6(
bx 5(
b101 4(
bx 3(
x2(
bx 1(
bx 0(
x/(
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 .(
b11000000000100000000000101000000000110000000000111 -(
bx ,(
b110 +(
bx *(
bx )(
bx ((
bx '(
bx &(
x%(
bx $(
bx #(
bx "(
bx !(
bx ~'
bx }'
x|'
bx {'
bx z'
bx y'
bx x'
bx w'
bx v'
bx u'
bx t'
bx s'
xr'
xq'
bx p'
bx o'
0n'
bx m'
bx l'
b101 k'
bx j'
xi'
bx h'
bx g'
xf'
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 e'
b11000000000100000000000101000000000110000000000111 d'
bx c'
b101 b'
bx a'
bx `'
bx _'
bx ^'
bx ]'
x\'
bx ['
bx Z'
bx Y'
bx X'
bx W'
bx V'
xU'
bx T'
bx S'
bx R'
bx Q'
bx P'
bx O'
bx N'
bx M'
bx L'
xK'
xJ'
bx I'
bx H'
0G'
bx F'
bx E'
b101 D'
bx C'
xB'
bx A'
bx @'
x?'
b100001000111111010001111010111001000001000010011001100110011010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 >'
b1000000000010000000000101000000000000000000000000 ='
bx <'
b100 ;'
bx :'
bx 9'
bx 8'
bx 7'
bx 6'
x5'
bx 4'
bx 3'
bx 2'
bx 1'
bx 0'
bx /'
x.'
bx -'
bx ,'
bx +'
bx *'
bx )'
bx ('
bx ''
bx &'
bx %'
x$'
x#'
bx "'
bx !'
0~&
bx }&
bx |&
b101 {&
bx z&
xy&
bx x&
bx w&
xv&
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 u&
b11000000000100000000000101000000000110000000000111 t&
bx s&
b11 r&
bx q&
bx p&
bx o&
bx n&
bx m&
xl&
bx k&
bx j&
bx i&
bx h&
bx g&
bx f&
xe&
bx d&
bx c&
bx b&
bx a&
bx `&
bx _&
bx ^&
bx ]&
bx \&
x[&
xZ&
bx Y&
bx X&
0W&
bx V&
bx U&
b101 T&
bx S&
xR&
bx Q&
bx P&
xO&
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 N&
b11000000000100000000000101000000000110000000000111 M&
bx L&
b10 K&
bx J&
bx I&
bx H&
bx G&
bx F&
xE&
bx D&
bx C&
bx B&
bx A&
bx @&
bx ?&
x>&
bx =&
bx <&
bx ;&
bx :&
bx 9&
bx 8&
bx 7&
bx 6&
bx 5&
x4&
x3&
bx 2&
bx 1&
00&
bx /&
bx .&
b101 -&
bx ,&
x+&
bx *&
bx )&
x(&
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 '&
b11000000000100000000000101000000000110000000000111 &&
bx %&
b1 $&
bx #&
bx "&
bx !&
bx ~%
bx }%
x|%
bx {%
bx z%
bx y%
bx x%
bx w%
bx v%
xu%
bx t%
bx s%
bx r%
bx q%
bx p%
bx o%
bx n%
bx m%
bx l%
xk%
xj%
bx i%
bx h%
0g%
bx f%
bx e%
b101 d%
bx c%
xb%
bx a%
bx `%
x_%
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 ^%
b11000000000100000000000101000000000110000000000111 ]%
bx \%
b0 [%
bx Z%
bx Y%
bx X%
bx W%
bx V%
xU%
bx T%
bx S%
bx R%
bx Q%
bx P%
bx O%
xN%
bx M%
bx L%
bx K%
bx J%
bx I%
bx H%
bx G%
bx F%
bx E%
xD%
xC%
bx B%
bx A%
0@%
bx ?%
bx >%
bx =%
bx <%
b1001 ;%
b1000001000110100001010001111011 :%
bx 9%
bx 8%
bx 7%
bx 6%
bx 5%
x4%
bx 3%
b1001 2%
b1000001000110100001010001111011 1%
b1000 0%
bx /%
bx .%
bx -%
bx ,%
bx +%
x*%
bx )%
bx (%
bx '%
bx &%
bx %%
bx $%
x#%
bx "%
bx !%
bx ~$
bx }$
bx |$
bx {$
bx z$
bx y$
bx x$
xw$
xv$
bx u$
bx t$
0s$
bx r$
bx q$
bx p$
bx o$
b1000 n$
b1000010100011100010111000010100 m$
bx l$
bx k$
bx j$
bx i$
bx h$
xg$
bx f$
b1000 e$
b1000010100011100010111000010100 d$
b1000 c$
bx b$
bx a$
bx `$
bx _$
bx ^$
x]$
bx \$
bx [$
bx Z$
bx Y$
bx X$
bx W$
xV$
bx U$
bx T$
bx S$
bx R$
bx Q$
bx P$
bx O$
bx N$
bx M$
xL$
xK$
bx J$
bx I$
0H$
bx G$
bx F$
bx E$
bx D$
b111 C$
b1000010000100100001010001111011 B$
bx A$
bx @$
bx ?$
bx >$
bx =$
x<$
bx ;$
b111 :$
b1000010000100100001010001111011 9$
b1000 8$
bx 7$
bx 6$
bx 5$
bx 4$
bx 3$
x2$
bx 1$
bx 0$
bx /$
bx .$
bx -$
bx ,$
x+$
bx *$
bx )$
bx ($
bx '$
bx &$
bx %$
bx $$
bx #$
bx "$
x!$
x~#
bx }#
bx |#
0{#
bx z#
bx y#
bx x#
bx w#
b110 v#
b1000001011001011110101110000101 u#
bx t#
bx s#
bx r#
bx q#
bx p#
xo#
bx n#
b110 m#
b1000001011001011110101110000101 l#
b1000 k#
bx j#
bx i#
bx h#
bx g#
bx f#
xe#
bx d#
bx c#
bx b#
bx a#
bx `#
bx _#
x^#
bx ]#
bx \#
bx [#
bx Z#
bx Y#
bx X#
bx W#
bx V#
bx U#
xT#
xS#
bx R#
bx Q#
0P#
bx O#
bx N#
bx M#
bx L#
b101 K#
b1000010100111011110101110000101 J#
bx I#
bx H#
bx G#
bx F#
bx E#
xD#
bx C#
b101 B#
b1000010100111011110101110000101 A#
b1000 @#
bx ?#
bx >#
bx =#
bx <#
bx ;#
x:#
bx 9#
bx 8#
bx 7#
bx 6#
bx 5#
bx 4#
x3#
bx 2#
bx 1#
bx 0#
bx /#
bx .#
bx -#
bx ,#
bx +#
bx *#
x)#
x(#
bx '#
bx &#
0%#
bx $#
bx ##
bx "#
bx !#
b100 ~"
b1000010101011101011100001010010 }"
bx |"
bx {"
bx z"
bx y"
bx x"
xw"
bx v"
b100 u"
b1000010101011101011100001010010 t"
b1000 s"
bx r"
bx q"
bx p"
bx o"
bx n"
xm"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
xf"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
x\"
x["
bx Z"
bx Y"
0X"
bx W"
bx V"
bx U"
bx T"
b11 S"
b1000010001010001011100001010010 R"
bx Q"
bx P"
bx O"
bx N"
bx M"
xL"
bx K"
b11 J"
b1000010001010001011100001010010 I"
b1000 H"
bx G"
bx F"
bx E"
bx D"
bx C"
xB"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
x;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
x1"
x0"
bx /"
bx ."
0-"
bx ,"
bx +"
bx *"
bx )"
b10 ("
b1000000101101110101110000101001 '"
bx &"
bx %"
bx $"
bx #"
bx ""
x!"
bx ~
b10 }
b1000000101101110101110000101001 |
b1000 {
bx z
bx y
bx x
bx w
bx v
xu
bx t
bx s
bx r
bx q
bx p
bx o
xn
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
xd
xc
bx b
bx a
0`
bx _
bx ^
bx ]
bx \
b1 [
b1000010100000000110101110000101 Z
bx Y
bx X
bx W
bx V
bx U
xT
bx S
b1 R
b1000010100000000110101110000101 Q
b1000 P
bx O
bx N
bx M
bx L
bx K
xJ
bx I
bx H
bx G
bx F
bx E
bx D
xC
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
x9
x8
bx 7
bx 6
05
bx 4
bx 3
bx 2
bx 1
b0 0
b1000001110111101011100001010010 /
bx .
bx -
bx ,
bx +
bx *
x)
bx (
b0 '
b1000001110111101011100001010010 &
b1000 %
b1000 $
0#
b0 "
0!
$end
#40
b1 "
1!
#80
0!
#120
b10 "
1!
#160
0!
#200
b11 "
1!
#240
0!
#280
b0 m%
b0 x%
b0 !&
b0 #&
b0 l%
b0 "&
b0 6&
b0 A&
b0 H&
b0 J&
b0 5&
b0 I&
b0 ]&
b0 h&
b0 o&
b0 q&
b0 \&
b0 p&
b0 &'
b0 1'
b0 8'
b0 :'
b0 %'
b0 9'
b0 M'
b0 X'
b0 _'
b0 a'
b0 L'
b0 `'
b0 t'
b0 !(
b0 ((
b0 *(
b0 s'
b0 )(
b0 =(
b0 H(
b0 O(
b0 Q(
b0 <(
b0 P(
b0 d(
b0 o(
b0 v(
b0 x(
b0 c(
b0 w(
b0 -)
b0 8)
b0 ?)
b0 A)
b0 ,)
b0 @)
b0 T)
b0 _)
b0 f)
b0 h)
b0 S)
b0 g)
b0 o%
b0 ~%
b0 8&
b0 G&
b0 _&
b0 n&
b0 ('
b0 7'
b0 O'
b0 ^'
b0 v'
b0 '(
b0 ?(
b0 N(
b0 f(
b0 u(
b0 /)
b0 >)
b0 V)
b0 e)
b0 n%
b0 f%
b0 7&
b0 /&
b0 ^&
b0 V&
b0 ''
b0 }&
b0 N'
b0 F'
b0 u'
b0 m'
b0 >(
b0 6(
b0 e(
b0 ](
b0 .)
b0 &)
b0 U)
b0 M)
b0 r%
b0 `%
b0 t%
1j%
b0 ;&
b0 )&
b0 =&
13&
b0 b&
b0 P&
b0 d&
1Z&
b0 +'
b0 w&
b0 -'
1#'
b0 R'
b0 @'
b0 T'
1J'
b0 y'
b0 g'
b0 {'
1q'
b0 B(
b0 0(
b0 D(
1:(
b0 i(
b0 W(
b0 k(
1a(
b0 2)
b0 ~(
b0 4)
1*)
b0 Y)
b0 G)
b0 [)
1Q)
b0 p%
b0 q%
0_%
b0 s%
b0 {%
b0 9&
b0 :&
0(&
b0 <&
b0 D&
b0 `&
b0 a&
0O&
b0 c&
b0 k&
b0 )'
b0 *'
0v&
b0 ,'
b0 4'
b0 P'
b0 Q'
0?'
b0 S'
b0 ['
b0 w'
b0 x'
0f'
b0 z'
b0 $(
b0 @(
b0 A(
0/(
b0 C(
b0 K(
b0 g(
b0 h(
0V(
b0 j(
b0 r(
b0 0)
b0 1)
0}(
b0 3)
b0 ;)
b0 W)
b0 X)
0F)
b0 Z)
b0 b)
0|%
1u%
b0 z%
b0 y%
0k%
b0 }%
0E&
1>&
b0 C&
b0 B&
04&
b0 F&
0l&
1e&
b0 j&
b0 i&
0[&
b0 m&
05'
1.'
b0 3'
b0 2'
0$'
b0 6'
0\'
1U'
b0 Z'
b0 Y'
0K'
b0 ]'
0%(
1|'
b0 #(
b0 "(
0r'
b0 &(
0L(
1E(
b0 J(
b0 I(
0;(
b0 M(
0s(
1l(
b0 q(
b0 p(
0b(
b0 t(
0<)
15)
b0 :)
b0 9)
0+)
b0 =)
0c)
1\)
b0 a)
b0 `)
0R)
b0 d)
b0 v%
b0 w%
b0 ?&
b0 @&
b0 f&
b0 g&
b0 /'
b0 0'
b0 V'
b0 W'
b0 }'
b0 ~'
b0 F(
b0 G(
b0 m(
b0 n(
b0 6)
b0 7)
b0 ])
b0 ^)
b1000000010111101011100001010010 /
b1000000010111101011100001010010 3
b10000000 *
b10111101011100001010010 .
b10000011 +
b0 4
b1000001000000000110101110000101 Z
b1000001000000000110101110000101 ^
b10000010 U
b110101110000101 Y
b10000101 V
b0 _
b111111001101110101110000101001 '"
b111111001101110101110000101001 +"
b1111110 ""
b1101110101110000101001 &"
b10000001 #"
b0 ,"
b1000000101010001011100001010010 R"
b1000000101010001011100001010010 V"
b10000001 M"
b1010001011100001010010 Q"
b10000100 N"
b0 W"
b1000001001011101011100001010010 }"
b1000001001011101011100001010010 ##
b10000010 x"
b1011101011100001010010 |"
b10000101 y"
b0 $#
b1000001000111011110101110000101 J#
b1000001000111011110101110000101 N#
b10000010 E#
b111011110101110000101 I#
b10000101 F#
b0 O#
b111111111001011110101110000101 u#
b111111111001011110101110000101 y#
b1111111 p#
b11001011110101110000101 t#
b10000010 q#
b0 z#
b1000000100100100001010001111011 B$
b1000000100100100001010001111011 F$
b10000001 =$
b100100001010001111011 A$
b10000100 >$
b0 G$
b1000001000011100010111000010100 m$
b1000001000011100010111000010100 q$
b10000010 h$
b11100010111000010100 l$
b10000101 i$
b0 r$
b111111100110100001010001111011 :%
b111111100110100001010001111011 >%
b1111111 5%
b110100001010001111011 9%
b10000010 6%
b0 ?%
b0 c%
b0 i%
b0 a%
b0 h%
b101 d%
b0 ,&
b0 2&
b0 *&
b0 1&
b101 -&
b0 S&
b0 Y&
b0 Q&
b0 X&
b101 T&
b0 z&
b0 "'
b0 x&
b0 !'
b101 {&
b0 C'
b0 I'
b0 A'
b0 H'
b101 D'
b0 j'
b0 p'
b0 h'
b0 o'
b101 k'
b0 3(
b0 9(
b0 1(
b0 8(
b101 4(
b0 Z(
b0 `(
b0 X(
b0 _(
b101 [(
b0 #)
b0 ))
b0 !)
b0 ()
b101 $)
b0 J)
b0 P)
b0 H)
b0 O)
b101 K)
1#
b0 "
1!
#320
0!
#360
0#
b1 "
1!
#400
b0 E'
b101 D'
0B'
b0 5(
b101 4(
02(
0!
b1 <'
b11 ,(
#440
b10 "
b1 E'
b101 D'
b1 5(
b101 4(
1!
b10 <'
b100 ,(
#480
b10 5(
b101 4(
0!
b101 ,(
#520
b11 "
b101 D'
1!
b111 <'
#560
0!
#600
b111110110111101011100001010010 /
b111110110111101011100001010010 3
b1111101 *
b10000000 +
b111111100000000110101110000101 Z
b111111100000000110101110000101 ^
b1111111 U
b10000010 V
b111101101101110101110000101001 '"
b111101101101110101110000101001 +"
b1111011 ""
b1111110 #"
b111111001010001011100001010010 R"
b111111001010001011100001010010 V"
b1111110 M"
b10000001 N"
b111111101011101011100001010010 }"
b111111101011101011100001010010 ##
b1111111 x"
b10000010 y"
b111111100111011110101110000101 J#
b111111100111011110101110000101 N#
b1111111 E#
b10000010 F#
b111110011001011110101110000101 u#
b111110011001011110101110000101 y#
b1111100 p#
b1111111 q#
b111111000100100001010001111011 B$
b111111000100100001010001111011 F$
b1111110 =$
b10000001 >$
b111111100011100010111000010100 m$
b111111100011100010111000010100 q$
b1111111 h$
b10000010 i$
b111110000110100001010001111011 :%
b111110000110100001010001111011 >%
b1111100 5%
b1111111 6%
b101 d%
b101 -&
b101 T&
b101 {&
b0 D'
b101 k'
b0 4(
b101 [(
b101 $)
b101 K)
1#
b0 "
1!
#610
b1000010001111110100011110101110 F'
b1000010100100001011001100110011 6(
b1010000001011100001010010 L'
b1010000001011100001010010 `'
b1000010001111110100011110101110 @'
b1000010001111110100011110101110 T'
b1011011110100110011001101 <(
b1011011110100110011001101 P(
b1000010100100001011001100110011 0(
b1000010100100001011001100110011 D(
b101111110100011110101110 R'
b101111110100011110101110 O'
b101111110100011110101110 ^'
b100100001011001100110011 B(
b100100001011001100110011 ?(
b100100001011001100110011 N(
b101111110100011110101110 S'
b1000010001111110100011110101110 ['
b100100001011001100110011 C(
b1000010100100001011001100110011 K(
b0 P'
b1000010010000001011100001010010 M'
b10000100 X'
b10000100 _'
b10000100 ]'
b0 Q'
b0 @(
b1000010111011110100110011001101 =(
b10000101 H(
b10000101 O(
b10000101 M(
b0 A(
b1000010001111110100011110101110 W'
1\'
b10000100 Y'
1U'
b10000100 Z'
b1000010100100001011001100110011 G(
1L(
b10000101 I(
1E(
b10000101 J(
b0 V'
b0 F(
b1000010001111110100011110101110 C'
b1000010001111110100011110101110 I'
b1000010100100001011001100110011 3(
b1000010100100001011001100110011 9(
b1 D'
b1 4(
#620
b1000010011000011010111000010100 F'
b1000010101101101000101000111101 6(
b1010000001011100001010010 L'
b1010000001011100001010010 `'
b1000010011000011010111000010100 @'
b1000010011000011010111000010100 T'
b1011011110100110011001101 <(
b1011011110100110011001101 P(
b1000010101101101000101000111101 0(
b1000010101101101000101000111101 D(
b111000011010111000010100 R'
b101111110100011110101110 O'
b101111110100011110101110 ^'
b101101101000101000111101 B(
b100100001011001100110011 ?(
b100100001011001100110011 N(
b1000100110011001100110 P'
b100010011001100110011010 Q'
b101111110100011110101110 S'
b1000010011000011010111000010100 ['
b1001011101011100001010 @(
b100101110101110000101001 A(
b100100001011001100110011 C(
b1000010101101101000101000111101 K(
0\'
b10000100 Z'
b10 Y'
1U'
b1000010010000001011100001010010 M'
b10000100 X'
b10000100 _'
b10000100 ]'
0L(
b10000101 J(
b10 I(
1E(
b1000010111011110100110011001101 =(
b10000101 H(
b10000101 O(
b10000101 M(
b1000001000010011001100110011010 V'
b1000010001111110100011110101110 W'
b1000001100101110101110000101001 F(
b1000010100100001011001100110011 G(
b1000010001111110100011110101110 A'
b1000010001111110100011110101110 H'
b1000001000010011001100110011010 C'
b1000001000010011001100110011010 I'
b1000010100100001011001100110011 1(
b1000010100100001011001100110011 8(
b1000001100101110101110000101001 3(
b1000001100101110101110000101001 9(
b101 D'
b10 4(
#630
b1000011000011010000011110101101 6(
b1000011000011010000011110101101 0(
b1000011000011010000011110101101 D(
b1000011000011010000011110101101 K(
b1000010110010010111010111000011 =(
b1010010010111010111000011 <(
b1010010010111010111000011 P(
b110001110000101000111101 A(
b1000110100000111101011011 B(
b101101101000101000111101 ?(
b101101101000101000111101 N(
b101101101000101000111101 C(
b11000111000010100011110 @(
b1 I(
1E(
b10000101 J(
b1000010010001110000101000111101 F(
b1000010101101101000101000111101 G(
b1000010101101101000101000111101 1(
b1000010101101101000101000111101 8(
b1000010010001110000101000111101 3(
b1000010010001110000101000111101 9(
b101 4(
#640
0!
#680
0#
b1 "
1!
#720
0!
#760
b10 "
1!
#800
0!
#840
b11 "
1!
#880
0!
#920
b0 6(
b0 F'
b0 <(
b0 P(
b0 0(
b0 D(
b0 L'
b0 `'
b0 @'
b0 T'
b0 ?(
b0 N(
b0 O'
b0 ^'
b0 A(
b0 C(
b0 B(
b0 K(
b0 Q'
b0 S'
b0 R'
b0 ['
b0 @(
b0 J(
b0 I(
1E(
b0 =(
b0 H(
b0 O(
b0 M(
b0 P'
b0 Z'
b0 Y'
1U'
b0 M'
b0 X'
b0 _'
b0 ]'
b0 F(
b0 G(
b0 V'
b0 W'
b0 3(
b0 9(
b0 1(
b0 8(
b101 4(
b0 C'
b0 I'
b0 A'
b0 H'
b101 D'
b111101010111101011100001010010 /
b111101010111101011100001010010 3
b1111010 *
b1111101 +
b111110000000000110101110000101 Z
b111110000000000110101110000101 ^
b1111100 U
b1111111 V
b111100001101110101110000101001 '"
b111100001101110101110000101001 +"
b1111000 ""
b1111011 #"
b111101101010001011100001010010 R"
b111101101010001011100001010010 V"
b1111011 M"
b1111110 N"
b111110001011101011100001010010 }"
b111110001011101011100001010010 ##
b1111100 x"
b1111111 y"
b111110000111011110101110000101 J#
b111110000111011110101110000101 N#
b1111100 E#
b1111111 F#
b111100111001011110101110000101 u#
b111100111001011110101110000101 y#
b1111001 p#
b1111100 q#
b111101100100100001010001111011 B$
b111101100100100001010001111011 F$
b1111011 =$
b1111110 >$
b111110000011100010111000010100 m$
b111110000011100010111000010100 q$
b1111100 h$
b1111111 i$
b111100100110100001010001111011 :%
b111100100110100001010001111011 >%
b1111001 5%
b1111100 6%
b101 d%
b101 -&
b101 T&
b101 {&
b101 k'
b101 [(
b101 $)
b101 K)
1#
b0 "
1!
#960
0!
#1000
0#
b1 "
1!
#1040
0!
#1080
b10 "
1!
#1120
0!
#1160
b11 "
1!
#1200
0!
#1240
b101 4(
b101 D'
b111011110111101011100001010010 /
b111011110111101011100001010010 3
b1110111 *
b1111010 +
b111100100000000110101110000101 Z
b111100100000000110101110000101 ^
b1111001 U
b1111100 V
b111010101101110101110000101001 '"
b111010101101110101110000101001 +"
b1110101 ""
b1111000 #"
b111100001010001011100001010010 R"
b111100001010001011100001010010 V"
b1111000 M"
b1111011 N"
b111100101011101011100001010010 }"
b111100101011101011100001010010 ##
b1111001 x"
b1111100 y"
b111100100111011110101110000101 J#
b111100100111011110101110000101 N#
b1111001 E#
b1111100 F#
b111011011001011110101110000101 u#
b111011011001011110101110000101 y#
b1110110 p#
b1111001 q#
b111100000100100001010001111011 B$
b111100000100100001010001111011 F$
b1111000 =$
b1111011 >$
b111100100011100010111000010100 m$
b111100100011100010111000010100 q$
b1111001 h$
b1111100 i$
b111011000110100001010001111011 :%
b111011000110100001010001111011 >%
b1110110 5%
b1111001 6%
b101 d%
b101 -&
b101 T&
b101 {&
b101 k'
b101 [(
b101 $)
b101 K)
1#
b0 "
1!
#1280
0!
#1320
0#
b1 "
1!
#1360
0!
#1400
b10 "
1!
#1440
0!
#1480
b11 "
1!
#1520
0!
