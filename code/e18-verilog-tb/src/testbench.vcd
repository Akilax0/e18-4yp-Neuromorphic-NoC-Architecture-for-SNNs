$date
	Fri Apr 12 23:12:18 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module testbench $end
$var reg 1 ! CLK $end
$var reg 4 " CLK_count [3:0] $end
$var reg 1 # clear $end
$var reg 4 $ decay_rate [3:0] $end
$scope begin genblk1[0] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 % decay_rate [3:0] $end
$var wire 32 & membrane_potential_initialization [31:0] $end
$var wire 12 ' neuron_address_initialization [11:0] $end
$var wire 32 ( result_divide_by_2_plus_4 [31:0] $end
$var wire 32 ) new_potential [31:0] $end
$var wire 1 * Exception $end
$var reg 8 + adjusted_exponent [7:0] $end
$var reg 8 , exponent [7:0] $end
$var reg 8 - exponent_divided_by_2 [7:0] $end
$var reg 8 . exponent_divided_by_4 [7:0] $end
$var reg 23 / mantissa [22:0] $end
$var reg 32 0 membrane_potential [31:0] $end
$var reg 12 1 neuron_address [11:0] $end
$var reg 32 2 number_divided_by_2 [31:0] $end
$var reg 32 3 number_divided_by_4 [31:0] $end
$var reg 32 4 output_potential_decay [31:0] $end
$var reg 2 5 sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 6 AddBar_Sub $end
$var wire 1 * Exception $end
$var wire 32 7 a_operand [31:0] $end
$var wire 32 8 b_operand [31:0] $end
$var wire 1 9 operation_sub_addBar $end
$var wire 1 : output_sign $end
$var wire 25 ; subtraction_diff [24:0] $end
$var wire 31 < sub_diff [30:0] $end
$var wire 24 = significand_sub_complement [23:0] $end
$var wire 25 > significand_sub [24:0] $end
$var wire 24 ? significand_b_add_sub [23:0] $end
$var wire 24 @ significand_b [23:0] $end
$var wire 25 A significand_add [24:0] $end
$var wire 24 B significand_a [23:0] $end
$var wire 32 C result [31:0] $end
$var wire 1 D perform $end
$var wire 32 E operand_b [31:0] $end
$var wire 32 F operand_a [31:0] $end
$var wire 8 G exponent_sub [7:0] $end
$var wire 8 H exponent_diff [7:0] $end
$var wire 8 I exponent_b_add_sub [7:0] $end
$var wire 31 J add_sum [30:0] $end
$var wire 1 K Comp_enable $end
$scope module pe $end
$var wire 8 L Exponent_a [7:0] $end
$var wire 25 M significand [24:0] $end
$var wire 8 N Exponent_sub [7:0] $end
$var reg 25 O Significand [24:0] $end
$var reg 5 P shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 Q decay_rate [3:0] $end
$var wire 32 R membrane_potential_initialization [31:0] $end
$var wire 12 S neuron_address_initialization [11:0] $end
$var wire 32 T result_divide_by_2_plus_4 [31:0] $end
$var wire 32 U new_potential [31:0] $end
$var wire 1 V Exception $end
$var reg 8 W adjusted_exponent [7:0] $end
$var reg 8 X exponent [7:0] $end
$var reg 8 Y exponent_divided_by_2 [7:0] $end
$var reg 8 Z exponent_divided_by_4 [7:0] $end
$var reg 23 [ mantissa [22:0] $end
$var reg 32 \ membrane_potential [31:0] $end
$var reg 12 ] neuron_address [11:0] $end
$var reg 32 ^ number_divided_by_2 [31:0] $end
$var reg 32 _ number_divided_by_4 [31:0] $end
$var reg 32 ` output_potential_decay [31:0] $end
$var reg 2 a sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 b AddBar_Sub $end
$var wire 1 V Exception $end
$var wire 32 c a_operand [31:0] $end
$var wire 32 d b_operand [31:0] $end
$var wire 1 e operation_sub_addBar $end
$var wire 1 f output_sign $end
$var wire 25 g subtraction_diff [24:0] $end
$var wire 31 h sub_diff [30:0] $end
$var wire 24 i significand_sub_complement [23:0] $end
$var wire 25 j significand_sub [24:0] $end
$var wire 24 k significand_b_add_sub [23:0] $end
$var wire 24 l significand_b [23:0] $end
$var wire 25 m significand_add [24:0] $end
$var wire 24 n significand_a [23:0] $end
$var wire 32 o result [31:0] $end
$var wire 1 p perform $end
$var wire 32 q operand_b [31:0] $end
$var wire 32 r operand_a [31:0] $end
$var wire 8 s exponent_sub [7:0] $end
$var wire 8 t exponent_diff [7:0] $end
$var wire 8 u exponent_b_add_sub [7:0] $end
$var wire 31 v add_sum [30:0] $end
$var wire 1 w Comp_enable $end
$scope module pe $end
$var wire 8 x Exponent_a [7:0] $end
$var wire 25 y significand [24:0] $end
$var wire 8 z Exponent_sub [7:0] $end
$var reg 25 { Significand [24:0] $end
$var reg 5 | shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 } decay_rate [3:0] $end
$var wire 32 ~ membrane_potential_initialization [31:0] $end
$var wire 12 !" neuron_address_initialization [11:0] $end
$var wire 32 "" result_divide_by_2_plus_4 [31:0] $end
$var wire 32 #" new_potential [31:0] $end
$var wire 1 $" Exception $end
$var reg 8 %" adjusted_exponent [7:0] $end
$var reg 8 &" exponent [7:0] $end
$var reg 8 '" exponent_divided_by_2 [7:0] $end
$var reg 8 (" exponent_divided_by_4 [7:0] $end
$var reg 23 )" mantissa [22:0] $end
$var reg 32 *" membrane_potential [31:0] $end
$var reg 12 +" neuron_address [11:0] $end
$var reg 32 ," number_divided_by_2 [31:0] $end
$var reg 32 -" number_divided_by_4 [31:0] $end
$var reg 32 ." output_potential_decay [31:0] $end
$var reg 2 /" sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 0" AddBar_Sub $end
$var wire 1 $" Exception $end
$var wire 32 1" a_operand [31:0] $end
$var wire 32 2" b_operand [31:0] $end
$var wire 1 3" operation_sub_addBar $end
$var wire 1 4" output_sign $end
$var wire 25 5" subtraction_diff [24:0] $end
$var wire 31 6" sub_diff [30:0] $end
$var wire 24 7" significand_sub_complement [23:0] $end
$var wire 25 8" significand_sub [24:0] $end
$var wire 24 9" significand_b_add_sub [23:0] $end
$var wire 24 :" significand_b [23:0] $end
$var wire 25 ;" significand_add [24:0] $end
$var wire 24 <" significand_a [23:0] $end
$var wire 32 =" result [31:0] $end
$var wire 1 >" perform $end
$var wire 32 ?" operand_b [31:0] $end
$var wire 32 @" operand_a [31:0] $end
$var wire 8 A" exponent_sub [7:0] $end
$var wire 8 B" exponent_diff [7:0] $end
$var wire 8 C" exponent_b_add_sub [7:0] $end
$var wire 31 D" add_sum [30:0] $end
$var wire 1 E" Comp_enable $end
$scope module pe $end
$var wire 8 F" Exponent_a [7:0] $end
$var wire 25 G" significand [24:0] $end
$var wire 8 H" Exponent_sub [7:0] $end
$var reg 25 I" Significand [24:0] $end
$var reg 5 J" shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 K" decay_rate [3:0] $end
$var wire 32 L" membrane_potential_initialization [31:0] $end
$var wire 12 M" neuron_address_initialization [11:0] $end
$var wire 32 N" result_divide_by_2_plus_4 [31:0] $end
$var wire 32 O" new_potential [31:0] $end
$var wire 1 P" Exception $end
$var reg 8 Q" adjusted_exponent [7:0] $end
$var reg 8 R" exponent [7:0] $end
$var reg 8 S" exponent_divided_by_2 [7:0] $end
$var reg 8 T" exponent_divided_by_4 [7:0] $end
$var reg 23 U" mantissa [22:0] $end
$var reg 32 V" membrane_potential [31:0] $end
$var reg 12 W" neuron_address [11:0] $end
$var reg 32 X" number_divided_by_2 [31:0] $end
$var reg 32 Y" number_divided_by_4 [31:0] $end
$var reg 32 Z" output_potential_decay [31:0] $end
$var reg 2 [" sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 \" AddBar_Sub $end
$var wire 1 P" Exception $end
$var wire 32 ]" a_operand [31:0] $end
$var wire 32 ^" b_operand [31:0] $end
$var wire 1 _" operation_sub_addBar $end
$var wire 1 `" output_sign $end
$var wire 25 a" subtraction_diff [24:0] $end
$var wire 31 b" sub_diff [30:0] $end
$var wire 24 c" significand_sub_complement [23:0] $end
$var wire 25 d" significand_sub [24:0] $end
$var wire 24 e" significand_b_add_sub [23:0] $end
$var wire 24 f" significand_b [23:0] $end
$var wire 25 g" significand_add [24:0] $end
$var wire 24 h" significand_a [23:0] $end
$var wire 32 i" result [31:0] $end
$var wire 1 j" perform $end
$var wire 32 k" operand_b [31:0] $end
$var wire 32 l" operand_a [31:0] $end
$var wire 8 m" exponent_sub [7:0] $end
$var wire 8 n" exponent_diff [7:0] $end
$var wire 8 o" exponent_b_add_sub [7:0] $end
$var wire 31 p" add_sum [30:0] $end
$var wire 1 q" Comp_enable $end
$scope module pe $end
$var wire 8 r" Exponent_a [7:0] $end
$var wire 25 s" significand [24:0] $end
$var wire 8 t" Exponent_sub [7:0] $end
$var reg 25 u" Significand [24:0] $end
$var reg 5 v" shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 w" decay_rate [3:0] $end
$var wire 32 x" membrane_potential_initialization [31:0] $end
$var wire 12 y" neuron_address_initialization [11:0] $end
$var wire 32 z" result_divide_by_2_plus_4 [31:0] $end
$var wire 32 {" new_potential [31:0] $end
$var wire 1 |" Exception $end
$var reg 8 }" adjusted_exponent [7:0] $end
$var reg 8 ~" exponent [7:0] $end
$var reg 8 !# exponent_divided_by_2 [7:0] $end
$var reg 8 "# exponent_divided_by_4 [7:0] $end
$var reg 23 ## mantissa [22:0] $end
$var reg 32 $# membrane_potential [31:0] $end
$var reg 12 %# neuron_address [11:0] $end
$var reg 32 &# number_divided_by_2 [31:0] $end
$var reg 32 '# number_divided_by_4 [31:0] $end
$var reg 32 (# output_potential_decay [31:0] $end
$var reg 2 )# sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 *# AddBar_Sub $end
$var wire 1 |" Exception $end
$var wire 32 +# a_operand [31:0] $end
$var wire 32 ,# b_operand [31:0] $end
$var wire 1 -# operation_sub_addBar $end
$var wire 1 .# output_sign $end
$var wire 25 /# subtraction_diff [24:0] $end
$var wire 31 0# sub_diff [30:0] $end
$var wire 24 1# significand_sub_complement [23:0] $end
$var wire 25 2# significand_sub [24:0] $end
$var wire 24 3# significand_b_add_sub [23:0] $end
$var wire 24 4# significand_b [23:0] $end
$var wire 25 5# significand_add [24:0] $end
$var wire 24 6# significand_a [23:0] $end
$var wire 32 7# result [31:0] $end
$var wire 1 8# perform $end
$var wire 32 9# operand_b [31:0] $end
$var wire 32 :# operand_a [31:0] $end
$var wire 8 ;# exponent_sub [7:0] $end
$var wire 8 <# exponent_diff [7:0] $end
$var wire 8 =# exponent_b_add_sub [7:0] $end
$var wire 31 ># add_sum [30:0] $end
$var wire 1 ?# Comp_enable $end
$scope module pe $end
$var wire 8 @# Exponent_a [7:0] $end
$var wire 25 A# significand [24:0] $end
$var wire 8 B# Exponent_sub [7:0] $end
$var reg 25 C# Significand [24:0] $end
$var reg 5 D# shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 E# decay_rate [3:0] $end
$var wire 32 F# membrane_potential_initialization [31:0] $end
$var wire 12 G# neuron_address_initialization [11:0] $end
$var wire 32 H# result_divide_by_2_plus_4 [31:0] $end
$var wire 32 I# new_potential [31:0] $end
$var wire 1 J# Exception $end
$var reg 8 K# adjusted_exponent [7:0] $end
$var reg 8 L# exponent [7:0] $end
$var reg 8 M# exponent_divided_by_2 [7:0] $end
$var reg 8 N# exponent_divided_by_4 [7:0] $end
$var reg 23 O# mantissa [22:0] $end
$var reg 32 P# membrane_potential [31:0] $end
$var reg 12 Q# neuron_address [11:0] $end
$var reg 32 R# number_divided_by_2 [31:0] $end
$var reg 32 S# number_divided_by_4 [31:0] $end
$var reg 32 T# output_potential_decay [31:0] $end
$var reg 2 U# sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 V# AddBar_Sub $end
$var wire 1 J# Exception $end
$var wire 32 W# a_operand [31:0] $end
$var wire 32 X# b_operand [31:0] $end
$var wire 1 Y# operation_sub_addBar $end
$var wire 1 Z# output_sign $end
$var wire 25 [# subtraction_diff [24:0] $end
$var wire 31 \# sub_diff [30:0] $end
$var wire 24 ]# significand_sub_complement [23:0] $end
$var wire 25 ^# significand_sub [24:0] $end
$var wire 24 _# significand_b_add_sub [23:0] $end
$var wire 24 `# significand_b [23:0] $end
$var wire 25 a# significand_add [24:0] $end
$var wire 24 b# significand_a [23:0] $end
$var wire 32 c# result [31:0] $end
$var wire 1 d# perform $end
$var wire 32 e# operand_b [31:0] $end
$var wire 32 f# operand_a [31:0] $end
$var wire 8 g# exponent_sub [7:0] $end
$var wire 8 h# exponent_diff [7:0] $end
$var wire 8 i# exponent_b_add_sub [7:0] $end
$var wire 31 j# add_sum [30:0] $end
$var wire 1 k# Comp_enable $end
$scope module pe $end
$var wire 8 l# Exponent_a [7:0] $end
$var wire 25 m# significand [24:0] $end
$var wire 8 n# Exponent_sub [7:0] $end
$var reg 25 o# Significand [24:0] $end
$var reg 5 p# shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 q# decay_rate [3:0] $end
$var wire 32 r# membrane_potential_initialization [31:0] $end
$var wire 12 s# neuron_address_initialization [11:0] $end
$var wire 32 t# result_divide_by_2_plus_4 [31:0] $end
$var wire 32 u# new_potential [31:0] $end
$var wire 1 v# Exception $end
$var reg 8 w# adjusted_exponent [7:0] $end
$var reg 8 x# exponent [7:0] $end
$var reg 8 y# exponent_divided_by_2 [7:0] $end
$var reg 8 z# exponent_divided_by_4 [7:0] $end
$var reg 23 {# mantissa [22:0] $end
$var reg 32 |# membrane_potential [31:0] $end
$var reg 12 }# neuron_address [11:0] $end
$var reg 32 ~# number_divided_by_2 [31:0] $end
$var reg 32 !$ number_divided_by_4 [31:0] $end
$var reg 32 "$ output_potential_decay [31:0] $end
$var reg 2 #$ sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 $$ AddBar_Sub $end
$var wire 1 v# Exception $end
$var wire 32 %$ a_operand [31:0] $end
$var wire 32 &$ b_operand [31:0] $end
$var wire 1 '$ operation_sub_addBar $end
$var wire 1 ($ output_sign $end
$var wire 25 )$ subtraction_diff [24:0] $end
$var wire 31 *$ sub_diff [30:0] $end
$var wire 24 +$ significand_sub_complement [23:0] $end
$var wire 25 ,$ significand_sub [24:0] $end
$var wire 24 -$ significand_b_add_sub [23:0] $end
$var wire 24 .$ significand_b [23:0] $end
$var wire 25 /$ significand_add [24:0] $end
$var wire 24 0$ significand_a [23:0] $end
$var wire 32 1$ result [31:0] $end
$var wire 1 2$ perform $end
$var wire 32 3$ operand_b [31:0] $end
$var wire 32 4$ operand_a [31:0] $end
$var wire 8 5$ exponent_sub [7:0] $end
$var wire 8 6$ exponent_diff [7:0] $end
$var wire 8 7$ exponent_b_add_sub [7:0] $end
$var wire 31 8$ add_sum [30:0] $end
$var wire 1 9$ Comp_enable $end
$scope module pe $end
$var wire 8 :$ Exponent_a [7:0] $end
$var wire 25 ;$ significand [24:0] $end
$var wire 8 <$ Exponent_sub [7:0] $end
$var reg 25 =$ Significand [24:0] $end
$var reg 5 >$ shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 ?$ decay_rate [3:0] $end
$var wire 32 @$ membrane_potential_initialization [31:0] $end
$var wire 12 A$ neuron_address_initialization [11:0] $end
$var wire 32 B$ result_divide_by_2_plus_4 [31:0] $end
$var wire 32 C$ new_potential [31:0] $end
$var wire 1 D$ Exception $end
$var reg 8 E$ adjusted_exponent [7:0] $end
$var reg 8 F$ exponent [7:0] $end
$var reg 8 G$ exponent_divided_by_2 [7:0] $end
$var reg 8 H$ exponent_divided_by_4 [7:0] $end
$var reg 23 I$ mantissa [22:0] $end
$var reg 32 J$ membrane_potential [31:0] $end
$var reg 12 K$ neuron_address [11:0] $end
$var reg 32 L$ number_divided_by_2 [31:0] $end
$var reg 32 M$ number_divided_by_4 [31:0] $end
$var reg 32 N$ output_potential_decay [31:0] $end
$var reg 2 O$ sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 P$ AddBar_Sub $end
$var wire 1 D$ Exception $end
$var wire 32 Q$ a_operand [31:0] $end
$var wire 32 R$ b_operand [31:0] $end
$var wire 1 S$ operation_sub_addBar $end
$var wire 1 T$ output_sign $end
$var wire 25 U$ subtraction_diff [24:0] $end
$var wire 31 V$ sub_diff [30:0] $end
$var wire 24 W$ significand_sub_complement [23:0] $end
$var wire 25 X$ significand_sub [24:0] $end
$var wire 24 Y$ significand_b_add_sub [23:0] $end
$var wire 24 Z$ significand_b [23:0] $end
$var wire 25 [$ significand_add [24:0] $end
$var wire 24 \$ significand_a [23:0] $end
$var wire 32 ]$ result [31:0] $end
$var wire 1 ^$ perform $end
$var wire 32 _$ operand_b [31:0] $end
$var wire 32 `$ operand_a [31:0] $end
$var wire 8 a$ exponent_sub [7:0] $end
$var wire 8 b$ exponent_diff [7:0] $end
$var wire 8 c$ exponent_b_add_sub [7:0] $end
$var wire 31 d$ add_sum [30:0] $end
$var wire 1 e$ Comp_enable $end
$scope module pe $end
$var wire 8 f$ Exponent_a [7:0] $end
$var wire 25 g$ significand [24:0] $end
$var wire 8 h$ Exponent_sub [7:0] $end
$var reg 25 i$ Significand [24:0] $end
$var reg 5 j$ shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 k$ decay_rate [3:0] $end
$var wire 32 l$ membrane_potential_initialization [31:0] $end
$var wire 12 m$ neuron_address_initialization [11:0] $end
$var wire 32 n$ result_divide_by_2_plus_4 [31:0] $end
$var wire 32 o$ new_potential [31:0] $end
$var wire 1 p$ Exception $end
$var reg 8 q$ adjusted_exponent [7:0] $end
$var reg 8 r$ exponent [7:0] $end
$var reg 8 s$ exponent_divided_by_2 [7:0] $end
$var reg 8 t$ exponent_divided_by_4 [7:0] $end
$var reg 23 u$ mantissa [22:0] $end
$var reg 32 v$ membrane_potential [31:0] $end
$var reg 12 w$ neuron_address [11:0] $end
$var reg 32 x$ number_divided_by_2 [31:0] $end
$var reg 32 y$ number_divided_by_4 [31:0] $end
$var reg 32 z$ output_potential_decay [31:0] $end
$var reg 2 {$ sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 |$ AddBar_Sub $end
$var wire 1 p$ Exception $end
$var wire 32 }$ a_operand [31:0] $end
$var wire 32 ~$ b_operand [31:0] $end
$var wire 1 !% operation_sub_addBar $end
$var wire 1 "% output_sign $end
$var wire 25 #% subtraction_diff [24:0] $end
$var wire 31 $% sub_diff [30:0] $end
$var wire 24 %% significand_sub_complement [23:0] $end
$var wire 25 &% significand_sub [24:0] $end
$var wire 24 '% significand_b_add_sub [23:0] $end
$var wire 24 (% significand_b [23:0] $end
$var wire 25 )% significand_add [24:0] $end
$var wire 24 *% significand_a [23:0] $end
$var wire 32 +% result [31:0] $end
$var wire 1 ,% perform $end
$var wire 32 -% operand_b [31:0] $end
$var wire 32 .% operand_a [31:0] $end
$var wire 8 /% exponent_sub [7:0] $end
$var wire 8 0% exponent_diff [7:0] $end
$var wire 8 1% exponent_b_add_sub [7:0] $end
$var wire 31 2% add_sum [30:0] $end
$var wire 1 3% Comp_enable $end
$scope module pe $end
$var wire 8 4% Exponent_a [7:0] $end
$var wire 25 5% significand [24:0] $end
$var wire 8 6% Exponent_sub [7:0] $end
$var reg 25 7% Significand [24:0] $end
$var reg 5 8% shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$scope module pd $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 4 9% decay_rate [3:0] $end
$var wire 32 :% membrane_potential_initialization [31:0] $end
$var wire 12 ;% neuron_address_initialization [11:0] $end
$var wire 32 <% result_divide_by_2_plus_4 [31:0] $end
$var wire 32 =% new_potential [31:0] $end
$var wire 1 >% Exception $end
$var reg 8 ?% adjusted_exponent [7:0] $end
$var reg 8 @% exponent [7:0] $end
$var reg 8 A% exponent_divided_by_2 [7:0] $end
$var reg 8 B% exponent_divided_by_4 [7:0] $end
$var reg 23 C% mantissa [22:0] $end
$var reg 32 D% membrane_potential [31:0] $end
$var reg 12 E% neuron_address [11:0] $end
$var reg 32 F% number_divided_by_2 [31:0] $end
$var reg 32 G% number_divided_by_4 [31:0] $end
$var reg 32 H% output_potential_decay [31:0] $end
$var reg 2 I% sign [1:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 J% AddBar_Sub $end
$var wire 1 >% Exception $end
$var wire 32 K% a_operand [31:0] $end
$var wire 32 L% b_operand [31:0] $end
$var wire 1 M% operation_sub_addBar $end
$var wire 1 N% output_sign $end
$var wire 25 O% subtraction_diff [24:0] $end
$var wire 31 P% sub_diff [30:0] $end
$var wire 24 Q% significand_sub_complement [23:0] $end
$var wire 25 R% significand_sub [24:0] $end
$var wire 24 S% significand_b_add_sub [23:0] $end
$var wire 24 T% significand_b [23:0] $end
$var wire 25 U% significand_add [24:0] $end
$var wire 24 V% significand_a [23:0] $end
$var wire 32 W% result [31:0] $end
$var wire 1 X% perform $end
$var wire 32 Y% operand_b [31:0] $end
$var wire 32 Z% operand_a [31:0] $end
$var wire 8 [% exponent_sub [7:0] $end
$var wire 8 \% exponent_diff [7:0] $end
$var wire 8 ]% exponent_b_add_sub [7:0] $end
$var wire 31 ^% add_sum [30:0] $end
$var wire 1 _% Comp_enable $end
$scope module pe $end
$var wire 8 `% Exponent_a [7:0] $end
$var wire 25 a% significand [24:0] $end
$var wire 8 b% Exponent_sub [7:0] $end
$var reg 25 c% Significand [24:0] $end
$var reg 5 d% shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[0] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 e% neuron_address [11:0] $end
$var wire 12 f% source_address [11:0] $end
$var wire 60 g% source_addresses_array [59:0] $end
$var wire 160 h% weights_array [159:0] $end
$var wire 1 i% excpetion $end
$var wire 32 j% added_weight [31:0] $end
$var reg 32 k% accumulated_weight [31:0] $end
$var reg 1 l% break $end
$var reg 32 m% considered_weight [31:0] $end
$var reg 4 n% i [3:0] $end
$var reg 4 o% index [3:0] $end
$var reg 32 p% mult_output [31:0] $end
$scope module add1 $end
$var wire 1 q% AddBar_Sub $end
$var wire 1 i% Exception $end
$var wire 32 r% a_operand [31:0] $end
$var wire 32 s% b_operand [31:0] $end
$var wire 1 t% operation_sub_addBar $end
$var wire 1 u% output_sign $end
$var wire 25 v% subtraction_diff [24:0] $end
$var wire 31 w% sub_diff [30:0] $end
$var wire 24 x% significand_sub_complement [23:0] $end
$var wire 25 y% significand_sub [24:0] $end
$var wire 24 z% significand_b_add_sub [23:0] $end
$var wire 24 {% significand_b [23:0] $end
$var wire 25 |% significand_add [24:0] $end
$var wire 24 }% significand_a [23:0] $end
$var wire 32 ~% result [31:0] $end
$var wire 1 !& perform $end
$var wire 32 "& operand_b [31:0] $end
$var wire 32 #& operand_a [31:0] $end
$var wire 8 $& exponent_sub [7:0] $end
$var wire 8 %& exponent_diff [7:0] $end
$var wire 8 && exponent_b_add_sub [7:0] $end
$var wire 31 '& add_sum [30:0] $end
$var wire 1 (& Comp_enable $end
$scope module pe $end
$var wire 8 )& Exponent_a [7:0] $end
$var wire 25 *& significand [24:0] $end
$var wire 8 +& Exponent_sub [7:0] $end
$var reg 25 ,& Significand [24:0] $end
$var reg 5 -& shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[1] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 .& neuron_address [11:0] $end
$var wire 12 /& source_address [11:0] $end
$var wire 60 0& source_addresses_array [59:0] $end
$var wire 160 1& weights_array [159:0] $end
$var wire 1 2& excpetion $end
$var wire 32 3& added_weight [31:0] $end
$var reg 32 4& accumulated_weight [31:0] $end
$var reg 1 5& break $end
$var reg 32 6& considered_weight [31:0] $end
$var reg 4 7& i [3:0] $end
$var reg 4 8& index [3:0] $end
$var reg 32 9& mult_output [31:0] $end
$scope module add1 $end
$var wire 1 :& AddBar_Sub $end
$var wire 1 2& Exception $end
$var wire 32 ;& a_operand [31:0] $end
$var wire 32 <& b_operand [31:0] $end
$var wire 1 =& operation_sub_addBar $end
$var wire 1 >& output_sign $end
$var wire 25 ?& subtraction_diff [24:0] $end
$var wire 31 @& sub_diff [30:0] $end
$var wire 24 A& significand_sub_complement [23:0] $end
$var wire 25 B& significand_sub [24:0] $end
$var wire 24 C& significand_b_add_sub [23:0] $end
$var wire 24 D& significand_b [23:0] $end
$var wire 25 E& significand_add [24:0] $end
$var wire 24 F& significand_a [23:0] $end
$var wire 32 G& result [31:0] $end
$var wire 1 H& perform $end
$var wire 32 I& operand_b [31:0] $end
$var wire 32 J& operand_a [31:0] $end
$var wire 8 K& exponent_sub [7:0] $end
$var wire 8 L& exponent_diff [7:0] $end
$var wire 8 M& exponent_b_add_sub [7:0] $end
$var wire 31 N& add_sum [30:0] $end
$var wire 1 O& Comp_enable $end
$scope module pe $end
$var wire 8 P& Exponent_a [7:0] $end
$var wire 25 Q& significand [24:0] $end
$var wire 8 R& Exponent_sub [7:0] $end
$var reg 25 S& Significand [24:0] $end
$var reg 5 T& shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[2] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 U& neuron_address [11:0] $end
$var wire 12 V& source_address [11:0] $end
$var wire 60 W& source_addresses_array [59:0] $end
$var wire 160 X& weights_array [159:0] $end
$var wire 1 Y& excpetion $end
$var wire 32 Z& added_weight [31:0] $end
$var reg 32 [& accumulated_weight [31:0] $end
$var reg 1 \& break $end
$var reg 32 ]& considered_weight [31:0] $end
$var reg 4 ^& i [3:0] $end
$var reg 4 _& index [3:0] $end
$var reg 32 `& mult_output [31:0] $end
$scope module add1 $end
$var wire 1 a& AddBar_Sub $end
$var wire 1 Y& Exception $end
$var wire 32 b& a_operand [31:0] $end
$var wire 32 c& b_operand [31:0] $end
$var wire 1 d& operation_sub_addBar $end
$var wire 1 e& output_sign $end
$var wire 25 f& subtraction_diff [24:0] $end
$var wire 31 g& sub_diff [30:0] $end
$var wire 24 h& significand_sub_complement [23:0] $end
$var wire 25 i& significand_sub [24:0] $end
$var wire 24 j& significand_b_add_sub [23:0] $end
$var wire 24 k& significand_b [23:0] $end
$var wire 25 l& significand_add [24:0] $end
$var wire 24 m& significand_a [23:0] $end
$var wire 32 n& result [31:0] $end
$var wire 1 o& perform $end
$var wire 32 p& operand_b [31:0] $end
$var wire 32 q& operand_a [31:0] $end
$var wire 8 r& exponent_sub [7:0] $end
$var wire 8 s& exponent_diff [7:0] $end
$var wire 8 t& exponent_b_add_sub [7:0] $end
$var wire 31 u& add_sum [30:0] $end
$var wire 1 v& Comp_enable $end
$scope module pe $end
$var wire 8 w& Exponent_a [7:0] $end
$var wire 25 x& significand [24:0] $end
$var wire 8 y& Exponent_sub [7:0] $end
$var reg 25 z& Significand [24:0] $end
$var reg 5 {& shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[3] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 |& neuron_address [11:0] $end
$var wire 12 }& source_address [11:0] $end
$var wire 60 ~& source_addresses_array [59:0] $end
$var wire 160 !' weights_array [159:0] $end
$var wire 1 "' excpetion $end
$var wire 32 #' added_weight [31:0] $end
$var reg 32 $' accumulated_weight [31:0] $end
$var reg 1 %' break $end
$var reg 32 &' considered_weight [31:0] $end
$var reg 4 '' i [3:0] $end
$var reg 4 (' index [3:0] $end
$var reg 32 )' mult_output [31:0] $end
$scope module add1 $end
$var wire 1 *' AddBar_Sub $end
$var wire 1 "' Exception $end
$var wire 32 +' a_operand [31:0] $end
$var wire 32 ,' b_operand [31:0] $end
$var wire 1 -' operation_sub_addBar $end
$var wire 1 .' output_sign $end
$var wire 25 /' subtraction_diff [24:0] $end
$var wire 31 0' sub_diff [30:0] $end
$var wire 24 1' significand_sub_complement [23:0] $end
$var wire 25 2' significand_sub [24:0] $end
$var wire 24 3' significand_b_add_sub [23:0] $end
$var wire 24 4' significand_b [23:0] $end
$var wire 25 5' significand_add [24:0] $end
$var wire 24 6' significand_a [23:0] $end
$var wire 32 7' result [31:0] $end
$var wire 1 8' perform $end
$var wire 32 9' operand_b [31:0] $end
$var wire 32 :' operand_a [31:0] $end
$var wire 8 ;' exponent_sub [7:0] $end
$var wire 8 <' exponent_diff [7:0] $end
$var wire 8 =' exponent_b_add_sub [7:0] $end
$var wire 31 >' add_sum [30:0] $end
$var wire 1 ?' Comp_enable $end
$scope module pe $end
$var wire 8 @' Exponent_a [7:0] $end
$var wire 25 A' significand [24:0] $end
$var wire 8 B' Exponent_sub [7:0] $end
$var reg 25 C' Significand [24:0] $end
$var reg 5 D' shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[4] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 E' neuron_address [11:0] $end
$var wire 12 F' source_address [11:0] $end
$var wire 60 G' source_addresses_array [59:0] $end
$var wire 160 H' weights_array [159:0] $end
$var wire 1 I' excpetion $end
$var wire 32 J' added_weight [31:0] $end
$var reg 32 K' accumulated_weight [31:0] $end
$var reg 1 L' break $end
$var reg 32 M' considered_weight [31:0] $end
$var reg 4 N' i [3:0] $end
$var reg 4 O' index [3:0] $end
$var reg 32 P' mult_output [31:0] $end
$scope module add1 $end
$var wire 1 Q' AddBar_Sub $end
$var wire 1 I' Exception $end
$var wire 32 R' a_operand [31:0] $end
$var wire 32 S' b_operand [31:0] $end
$var wire 1 T' operation_sub_addBar $end
$var wire 1 U' output_sign $end
$var wire 25 V' subtraction_diff [24:0] $end
$var wire 31 W' sub_diff [30:0] $end
$var wire 24 X' significand_sub_complement [23:0] $end
$var wire 25 Y' significand_sub [24:0] $end
$var wire 24 Z' significand_b_add_sub [23:0] $end
$var wire 24 [' significand_b [23:0] $end
$var wire 25 \' significand_add [24:0] $end
$var wire 24 ]' significand_a [23:0] $end
$var wire 32 ^' result [31:0] $end
$var wire 1 _' perform $end
$var wire 32 `' operand_b [31:0] $end
$var wire 32 a' operand_a [31:0] $end
$var wire 8 b' exponent_sub [7:0] $end
$var wire 8 c' exponent_diff [7:0] $end
$var wire 8 d' exponent_b_add_sub [7:0] $end
$var wire 31 e' add_sum [30:0] $end
$var wire 1 f' Comp_enable $end
$scope module pe $end
$var wire 8 g' Exponent_a [7:0] $end
$var wire 25 h' significand [24:0] $end
$var wire 8 i' Exponent_sub [7:0] $end
$var reg 25 j' Significand [24:0] $end
$var reg 5 k' shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[5] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 l' neuron_address [11:0] $end
$var wire 12 m' source_address [11:0] $end
$var wire 60 n' source_addresses_array [59:0] $end
$var wire 160 o' weights_array [159:0] $end
$var wire 1 p' excpetion $end
$var wire 32 q' added_weight [31:0] $end
$var reg 32 r' accumulated_weight [31:0] $end
$var reg 1 s' break $end
$var reg 32 t' considered_weight [31:0] $end
$var reg 4 u' i [3:0] $end
$var reg 4 v' index [3:0] $end
$var reg 32 w' mult_output [31:0] $end
$scope module add1 $end
$var wire 1 x' AddBar_Sub $end
$var wire 1 p' Exception $end
$var wire 32 y' a_operand [31:0] $end
$var wire 32 z' b_operand [31:0] $end
$var wire 1 {' operation_sub_addBar $end
$var wire 1 |' output_sign $end
$var wire 25 }' subtraction_diff [24:0] $end
$var wire 31 ~' sub_diff [30:0] $end
$var wire 24 !( significand_sub_complement [23:0] $end
$var wire 25 "( significand_sub [24:0] $end
$var wire 24 #( significand_b_add_sub [23:0] $end
$var wire 24 $( significand_b [23:0] $end
$var wire 25 %( significand_add [24:0] $end
$var wire 24 &( significand_a [23:0] $end
$var wire 32 '( result [31:0] $end
$var wire 1 (( perform $end
$var wire 32 )( operand_b [31:0] $end
$var wire 32 *( operand_a [31:0] $end
$var wire 8 +( exponent_sub [7:0] $end
$var wire 8 ,( exponent_diff [7:0] $end
$var wire 8 -( exponent_b_add_sub [7:0] $end
$var wire 31 .( add_sum [30:0] $end
$var wire 1 /( Comp_enable $end
$scope module pe $end
$var wire 8 0( Exponent_a [7:0] $end
$var wire 25 1( significand [24:0] $end
$var wire 8 2( Exponent_sub [7:0] $end
$var reg 25 3( Significand [24:0] $end
$var reg 5 4( shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[6] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 5( neuron_address [11:0] $end
$var wire 12 6( source_address [11:0] $end
$var wire 60 7( source_addresses_array [59:0] $end
$var wire 160 8( weights_array [159:0] $end
$var wire 1 9( excpetion $end
$var wire 32 :( added_weight [31:0] $end
$var reg 32 ;( accumulated_weight [31:0] $end
$var reg 1 <( break $end
$var reg 32 =( considered_weight [31:0] $end
$var reg 4 >( i [3:0] $end
$var reg 4 ?( index [3:0] $end
$var reg 32 @( mult_output [31:0] $end
$scope module add1 $end
$var wire 1 A( AddBar_Sub $end
$var wire 1 9( Exception $end
$var wire 32 B( a_operand [31:0] $end
$var wire 32 C( b_operand [31:0] $end
$var wire 1 D( operation_sub_addBar $end
$var wire 1 E( output_sign $end
$var wire 25 F( subtraction_diff [24:0] $end
$var wire 31 G( sub_diff [30:0] $end
$var wire 24 H( significand_sub_complement [23:0] $end
$var wire 25 I( significand_sub [24:0] $end
$var wire 24 J( significand_b_add_sub [23:0] $end
$var wire 24 K( significand_b [23:0] $end
$var wire 25 L( significand_add [24:0] $end
$var wire 24 M( significand_a [23:0] $end
$var wire 32 N( result [31:0] $end
$var wire 1 O( perform $end
$var wire 32 P( operand_b [31:0] $end
$var wire 32 Q( operand_a [31:0] $end
$var wire 8 R( exponent_sub [7:0] $end
$var wire 8 S( exponent_diff [7:0] $end
$var wire 8 T( exponent_b_add_sub [7:0] $end
$var wire 31 U( add_sum [30:0] $end
$var wire 1 V( Comp_enable $end
$scope module pe $end
$var wire 8 W( Exponent_a [7:0] $end
$var wire 25 X( significand [24:0] $end
$var wire 8 Y( Exponent_sub [7:0] $end
$var reg 25 Z( Significand [24:0] $end
$var reg 5 [( shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[7] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 \( neuron_address [11:0] $end
$var wire 12 ]( source_address [11:0] $end
$var wire 60 ^( source_addresses_array [59:0] $end
$var wire 160 _( weights_array [159:0] $end
$var wire 1 `( excpetion $end
$var wire 32 a( added_weight [31:0] $end
$var reg 32 b( accumulated_weight [31:0] $end
$var reg 1 c( break $end
$var reg 32 d( considered_weight [31:0] $end
$var reg 4 e( i [3:0] $end
$var reg 4 f( index [3:0] $end
$var reg 32 g( mult_output [31:0] $end
$scope module add1 $end
$var wire 1 h( AddBar_Sub $end
$var wire 1 `( Exception $end
$var wire 32 i( a_operand [31:0] $end
$var wire 32 j( b_operand [31:0] $end
$var wire 1 k( operation_sub_addBar $end
$var wire 1 l( output_sign $end
$var wire 25 m( subtraction_diff [24:0] $end
$var wire 31 n( sub_diff [30:0] $end
$var wire 24 o( significand_sub_complement [23:0] $end
$var wire 25 p( significand_sub [24:0] $end
$var wire 24 q( significand_b_add_sub [23:0] $end
$var wire 24 r( significand_b [23:0] $end
$var wire 25 s( significand_add [24:0] $end
$var wire 24 t( significand_a [23:0] $end
$var wire 32 u( result [31:0] $end
$var wire 1 v( perform $end
$var wire 32 w( operand_b [31:0] $end
$var wire 32 x( operand_a [31:0] $end
$var wire 8 y( exponent_sub [7:0] $end
$var wire 8 z( exponent_diff [7:0] $end
$var wire 8 {( exponent_b_add_sub [7:0] $end
$var wire 31 |( add_sum [30:0] $end
$var wire 1 }( Comp_enable $end
$scope module pe $end
$var wire 8 ~( Exponent_a [7:0] $end
$var wire 25 !) significand [24:0] $end
$var wire 8 ") Exponent_sub [7:0] $end
$var reg 25 #) Significand [24:0] $end
$var reg 5 $) shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[8] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 %) neuron_address [11:0] $end
$var wire 12 &) source_address [11:0] $end
$var wire 60 ') source_addresses_array [59:0] $end
$var wire 160 () weights_array [159:0] $end
$var wire 1 )) excpetion $end
$var wire 32 *) added_weight [31:0] $end
$var reg 32 +) accumulated_weight [31:0] $end
$var reg 1 ,) break $end
$var reg 32 -) considered_weight [31:0] $end
$var reg 4 .) i [3:0] $end
$var reg 4 /) index [3:0] $end
$var reg 32 0) mult_output [31:0] $end
$scope module add1 $end
$var wire 1 1) AddBar_Sub $end
$var wire 1 )) Exception $end
$var wire 32 2) a_operand [31:0] $end
$var wire 32 3) b_operand [31:0] $end
$var wire 1 4) operation_sub_addBar $end
$var wire 1 5) output_sign $end
$var wire 25 6) subtraction_diff [24:0] $end
$var wire 31 7) sub_diff [30:0] $end
$var wire 24 8) significand_sub_complement [23:0] $end
$var wire 25 9) significand_sub [24:0] $end
$var wire 24 :) significand_b_add_sub [23:0] $end
$var wire 24 ;) significand_b [23:0] $end
$var wire 25 <) significand_add [24:0] $end
$var wire 24 =) significand_a [23:0] $end
$var wire 32 >) result [31:0] $end
$var wire 1 ?) perform $end
$var wire 32 @) operand_b [31:0] $end
$var wire 32 A) operand_a [31:0] $end
$var wire 8 B) exponent_sub [7:0] $end
$var wire 8 C) exponent_diff [7:0] $end
$var wire 8 D) exponent_b_add_sub [7:0] $end
$var wire 31 E) add_sum [30:0] $end
$var wire 1 F) Comp_enable $end
$scope module pe $end
$var wire 8 G) Exponent_a [7:0] $end
$var wire 25 H) significand [24:0] $end
$var wire 8 I) Exponent_sub [7:0] $end
$var reg 25 J) Significand [24:0] $end
$var reg 5 K) shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[9] $end
$scope module m $end
$var wire 1 ! CLK $end
$var wire 1 # clear $end
$var wire 12 L) neuron_address [11:0] $end
$var wire 12 M) source_address [11:0] $end
$var wire 60 N) source_addresses_array [59:0] $end
$var wire 160 O) weights_array [159:0] $end
$var wire 1 P) excpetion $end
$var wire 32 Q) added_weight [31:0] $end
$var reg 32 R) accumulated_weight [31:0] $end
$var reg 1 S) break $end
$var reg 32 T) considered_weight [31:0] $end
$var reg 4 U) i [3:0] $end
$var reg 4 V) index [3:0] $end
$var reg 32 W) mult_output [31:0] $end
$scope module add1 $end
$var wire 1 X) AddBar_Sub $end
$var wire 1 P) Exception $end
$var wire 32 Y) a_operand [31:0] $end
$var wire 32 Z) b_operand [31:0] $end
$var wire 1 [) operation_sub_addBar $end
$var wire 1 \) output_sign $end
$var wire 25 ]) subtraction_diff [24:0] $end
$var wire 31 ^) sub_diff [30:0] $end
$var wire 24 _) significand_sub_complement [23:0] $end
$var wire 25 `) significand_sub [24:0] $end
$var wire 24 a) significand_b_add_sub [23:0] $end
$var wire 24 b) significand_b [23:0] $end
$var wire 25 c) significand_add [24:0] $end
$var wire 24 d) significand_a [23:0] $end
$var wire 32 e) result [31:0] $end
$var wire 1 f) perform $end
$var wire 32 g) operand_b [31:0] $end
$var wire 32 h) operand_a [31:0] $end
$var wire 8 i) exponent_sub [7:0] $end
$var wire 8 j) exponent_diff [7:0] $end
$var wire 8 k) exponent_b_add_sub [7:0] $end
$var wire 31 l) add_sum [30:0] $end
$var wire 1 m) Comp_enable $end
$scope module pe $end
$var wire 8 n) Exponent_a [7:0] $end
$var wire 25 o) significand [24:0] $end
$var wire 8 p) Exponent_sub [7:0] $end
$var reg 25 q) Significand [24:0] $end
$var reg 5 r) shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk3[0] $end
$scope module pa $end
$var wire 1 s) Exception $end
$var wire 1 # clear $end
$var wire 32 t) decayed_potential [31:0] $end
$var wire 32 u) input_weight [31:0] $end
$var wire 32 v) v_threshold [31:0] $end
$var wire 32 w) reset_value [31:0] $end
$var wire 1 x) greater $end
$var wire 32 y) add_value [31:0] $end
$var reg 32 z) added_potential [31:0] $end
$var reg 32 {) final_potential [31:0] $end
$var reg 1 |) spike $end
$scope module Addition_Subtraction_1 $end
$var wire 1 }) AddBar_Sub $end
$var wire 1 s) Exception $end
$var wire 32 ~) a_operand [31:0] $end
$var wire 32 !* b_operand [31:0] $end
$var wire 1 "* operation_sub_addBar $end
$var wire 1 #* output_sign $end
$var wire 25 $* subtraction_diff [24:0] $end
$var wire 31 %* sub_diff [30:0] $end
$var wire 24 &* significand_sub_complement [23:0] $end
$var wire 25 '* significand_sub [24:0] $end
$var wire 24 (* significand_b_add_sub [23:0] $end
$var wire 24 )* significand_b [23:0] $end
$var wire 25 ** significand_add [24:0] $end
$var wire 24 +* significand_a [23:0] $end
$var wire 32 ,* result [31:0] $end
$var wire 1 -* perform $end
$var wire 32 .* operand_b [31:0] $end
$var wire 32 /* operand_a [31:0] $end
$var wire 8 0* exponent_sub [7:0] $end
$var wire 8 1* exponent_diff [7:0] $end
$var wire 8 2* exponent_b_add_sub [7:0] $end
$var wire 31 3* add_sum [30:0] $end
$var wire 1 4* Comp_enable $end
$scope module pe $end
$var wire 8 5* Exponent_a [7:0] $end
$var wire 25 6* significand [24:0] $end
$var wire 8 7* Exponent_sub [7:0] $end
$var reg 25 8* Significand [24:0] $end
$var reg 5 9* shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_2 $end
$var wire 1 :* AddBar_Sub $end
$var wire 1 s) Exception $end
$var wire 32 ;* a_operand [31:0] $end
$var wire 32 <* b_operand [31:0] $end
$var wire 1 =* operation_sub_addBar $end
$var wire 1 >* output_sign $end
$var wire 25 ?* subtraction_diff [24:0] $end
$var wire 31 @* sub_diff [30:0] $end
$var wire 24 A* significand_sub_complement [23:0] $end
$var wire 25 B* significand_sub [24:0] $end
$var wire 24 C* significand_b_add_sub [23:0] $end
$var wire 24 D* significand_b [23:0] $end
$var wire 25 E* significand_add [24:0] $end
$var wire 24 F* significand_a [23:0] $end
$var wire 32 G* result [31:0] $end
$var wire 1 H* perform $end
$var wire 32 I* operand_b [31:0] $end
$var wire 32 J* operand_a [31:0] $end
$var wire 8 K* exponent_sub [7:0] $end
$var wire 8 L* exponent_diff [7:0] $end
$var wire 8 M* exponent_b_add_sub [7:0] $end
$var wire 31 N* add_sum [30:0] $end
$var wire 1 O* Comp_enable $end
$scope module pe $end
$var wire 8 P* Exponent_a [7:0] $end
$var wire 25 Q* significand [24:0] $end
$var wire 8 R* Exponent_sub [7:0] $end
$var reg 25 S* Significand [24:0] $end
$var reg 5 T* shift [4:0] $end
$upscope $end
$upscope $end
$scope module comparator_2 $end
$var wire 32 U* a_operand [31:0] $end
$var wire 32 V* b_operand [31:0] $end
$var wire 32 W* result [31:0] $end
$var wire 1 X* Exception $end
$var reg 1 x) greater $end
$var reg 1 Y* sign $end
$scope module Addition_Subtraction_1 $end
$var wire 1 Z* AddBar_Sub $end
$var wire 1 X* Exception $end
$var wire 32 [* a_operand [31:0] $end
$var wire 32 \* b_operand [31:0] $end
$var wire 1 ]* operation_sub_addBar $end
$var wire 1 ^* output_sign $end
$var wire 25 _* subtraction_diff [24:0] $end
$var wire 31 `* sub_diff [30:0] $end
$var wire 24 a* significand_sub_complement [23:0] $end
$var wire 25 b* significand_sub [24:0] $end
$var wire 24 c* significand_b_add_sub [23:0] $end
$var wire 24 d* significand_b [23:0] $end
$var wire 25 e* significand_add [24:0] $end
$var wire 24 f* significand_a [23:0] $end
$var wire 32 g* result [31:0] $end
$var wire 1 h* perform $end
$var wire 32 i* operand_b [31:0] $end
$var wire 32 j* operand_a [31:0] $end
$var wire 8 k* exponent_sub [7:0] $end
$var wire 8 l* exponent_diff [7:0] $end
$var wire 8 m* exponent_b_add_sub [7:0] $end
$var wire 31 n* add_sum [30:0] $end
$var wire 1 o* Comp_enable $end
$scope module pe $end
$var wire 8 p* Exponent_a [7:0] $end
$var wire 25 q* significand [24:0] $end
$var wire 8 r* Exponent_sub [7:0] $end
$var reg 25 s* Significand [24:0] $end
$var reg 5 t* shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk3[1] $end
$scope module pa $end
$var wire 1 u* Exception $end
$var wire 1 # clear $end
$var wire 32 v* decayed_potential [31:0] $end
$var wire 32 w* input_weight [31:0] $end
$var wire 32 x* v_threshold [31:0] $end
$var wire 32 y* reset_value [31:0] $end
$var wire 1 z* greater $end
$var wire 32 {* add_value [31:0] $end
$var reg 32 |* added_potential [31:0] $end
$var reg 32 }* final_potential [31:0] $end
$var reg 1 ~* spike $end
$scope module Addition_Subtraction_1 $end
$var wire 1 !+ AddBar_Sub $end
$var wire 1 u* Exception $end
$var wire 32 "+ a_operand [31:0] $end
$var wire 32 #+ b_operand [31:0] $end
$var wire 1 $+ operation_sub_addBar $end
$var wire 1 %+ output_sign $end
$var wire 25 &+ subtraction_diff [24:0] $end
$var wire 31 '+ sub_diff [30:0] $end
$var wire 24 (+ significand_sub_complement [23:0] $end
$var wire 25 )+ significand_sub [24:0] $end
$var wire 24 *+ significand_b_add_sub [23:0] $end
$var wire 24 ++ significand_b [23:0] $end
$var wire 25 ,+ significand_add [24:0] $end
$var wire 24 -+ significand_a [23:0] $end
$var wire 32 .+ result [31:0] $end
$var wire 1 /+ perform $end
$var wire 32 0+ operand_b [31:0] $end
$var wire 32 1+ operand_a [31:0] $end
$var wire 8 2+ exponent_sub [7:0] $end
$var wire 8 3+ exponent_diff [7:0] $end
$var wire 8 4+ exponent_b_add_sub [7:0] $end
$var wire 31 5+ add_sum [30:0] $end
$var wire 1 6+ Comp_enable $end
$scope module pe $end
$var wire 8 7+ Exponent_a [7:0] $end
$var wire 25 8+ significand [24:0] $end
$var wire 8 9+ Exponent_sub [7:0] $end
$var reg 25 :+ Significand [24:0] $end
$var reg 5 ;+ shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_2 $end
$var wire 1 <+ AddBar_Sub $end
$var wire 1 u* Exception $end
$var wire 32 =+ a_operand [31:0] $end
$var wire 32 >+ b_operand [31:0] $end
$var wire 1 ?+ operation_sub_addBar $end
$var wire 1 @+ output_sign $end
$var wire 25 A+ subtraction_diff [24:0] $end
$var wire 31 B+ sub_diff [30:0] $end
$var wire 24 C+ significand_sub_complement [23:0] $end
$var wire 25 D+ significand_sub [24:0] $end
$var wire 24 E+ significand_b_add_sub [23:0] $end
$var wire 24 F+ significand_b [23:0] $end
$var wire 25 G+ significand_add [24:0] $end
$var wire 24 H+ significand_a [23:0] $end
$var wire 32 I+ result [31:0] $end
$var wire 1 J+ perform $end
$var wire 32 K+ operand_b [31:0] $end
$var wire 32 L+ operand_a [31:0] $end
$var wire 8 M+ exponent_sub [7:0] $end
$var wire 8 N+ exponent_diff [7:0] $end
$var wire 8 O+ exponent_b_add_sub [7:0] $end
$var wire 31 P+ add_sum [30:0] $end
$var wire 1 Q+ Comp_enable $end
$scope module pe $end
$var wire 8 R+ Exponent_a [7:0] $end
$var wire 25 S+ significand [24:0] $end
$var wire 8 T+ Exponent_sub [7:0] $end
$var reg 25 U+ Significand [24:0] $end
$var reg 5 V+ shift [4:0] $end
$upscope $end
$upscope $end
$scope module comparator_2 $end
$var wire 32 W+ a_operand [31:0] $end
$var wire 32 X+ b_operand [31:0] $end
$var wire 32 Y+ result [31:0] $end
$var wire 1 Z+ Exception $end
$var reg 1 z* greater $end
$var reg 1 [+ sign $end
$scope module Addition_Subtraction_1 $end
$var wire 1 \+ AddBar_Sub $end
$var wire 1 Z+ Exception $end
$var wire 32 ]+ a_operand [31:0] $end
$var wire 32 ^+ b_operand [31:0] $end
$var wire 1 _+ operation_sub_addBar $end
$var wire 1 `+ output_sign $end
$var wire 25 a+ subtraction_diff [24:0] $end
$var wire 31 b+ sub_diff [30:0] $end
$var wire 24 c+ significand_sub_complement [23:0] $end
$var wire 25 d+ significand_sub [24:0] $end
$var wire 24 e+ significand_b_add_sub [23:0] $end
$var wire 24 f+ significand_b [23:0] $end
$var wire 25 g+ significand_add [24:0] $end
$var wire 24 h+ significand_a [23:0] $end
$var wire 32 i+ result [31:0] $end
$var wire 1 j+ perform $end
$var wire 32 k+ operand_b [31:0] $end
$var wire 32 l+ operand_a [31:0] $end
$var wire 8 m+ exponent_sub [7:0] $end
$var wire 8 n+ exponent_diff [7:0] $end
$var wire 8 o+ exponent_b_add_sub [7:0] $end
$var wire 31 p+ add_sum [30:0] $end
$var wire 1 q+ Comp_enable $end
$scope module pe $end
$var wire 8 r+ Exponent_a [7:0] $end
$var wire 25 s+ significand [24:0] $end
$var wire 8 t+ Exponent_sub [7:0] $end
$var reg 25 u+ Significand [24:0] $end
$var reg 5 v+ shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk3[2] $end
$scope module pa $end
$var wire 1 w+ Exception $end
$var wire 1 # clear $end
$var wire 32 x+ decayed_potential [31:0] $end
$var wire 32 y+ input_weight [31:0] $end
$var wire 32 z+ v_threshold [31:0] $end
$var wire 32 {+ reset_value [31:0] $end
$var wire 1 |+ greater $end
$var wire 32 }+ add_value [31:0] $end
$var reg 32 ~+ added_potential [31:0] $end
$var reg 32 !, final_potential [31:0] $end
$var reg 1 ", spike $end
$scope module Addition_Subtraction_1 $end
$var wire 1 #, AddBar_Sub $end
$var wire 1 w+ Exception $end
$var wire 32 $, a_operand [31:0] $end
$var wire 32 %, b_operand [31:0] $end
$var wire 1 &, operation_sub_addBar $end
$var wire 1 ', output_sign $end
$var wire 25 (, subtraction_diff [24:0] $end
$var wire 31 ), sub_diff [30:0] $end
$var wire 24 *, significand_sub_complement [23:0] $end
$var wire 25 +, significand_sub [24:0] $end
$var wire 24 ,, significand_b_add_sub [23:0] $end
$var wire 24 -, significand_b [23:0] $end
$var wire 25 ., significand_add [24:0] $end
$var wire 24 /, significand_a [23:0] $end
$var wire 32 0, result [31:0] $end
$var wire 1 1, perform $end
$var wire 32 2, operand_b [31:0] $end
$var wire 32 3, operand_a [31:0] $end
$var wire 8 4, exponent_sub [7:0] $end
$var wire 8 5, exponent_diff [7:0] $end
$var wire 8 6, exponent_b_add_sub [7:0] $end
$var wire 31 7, add_sum [30:0] $end
$var wire 1 8, Comp_enable $end
$scope module pe $end
$var wire 8 9, Exponent_a [7:0] $end
$var wire 25 :, significand [24:0] $end
$var wire 8 ;, Exponent_sub [7:0] $end
$var reg 25 <, Significand [24:0] $end
$var reg 5 =, shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_2 $end
$var wire 1 >, AddBar_Sub $end
$var wire 1 w+ Exception $end
$var wire 32 ?, a_operand [31:0] $end
$var wire 32 @, b_operand [31:0] $end
$var wire 1 A, operation_sub_addBar $end
$var wire 1 B, output_sign $end
$var wire 25 C, subtraction_diff [24:0] $end
$var wire 31 D, sub_diff [30:0] $end
$var wire 24 E, significand_sub_complement [23:0] $end
$var wire 25 F, significand_sub [24:0] $end
$var wire 24 G, significand_b_add_sub [23:0] $end
$var wire 24 H, significand_b [23:0] $end
$var wire 25 I, significand_add [24:0] $end
$var wire 24 J, significand_a [23:0] $end
$var wire 32 K, result [31:0] $end
$var wire 1 L, perform $end
$var wire 32 M, operand_b [31:0] $end
$var wire 32 N, operand_a [31:0] $end
$var wire 8 O, exponent_sub [7:0] $end
$var wire 8 P, exponent_diff [7:0] $end
$var wire 8 Q, exponent_b_add_sub [7:0] $end
$var wire 31 R, add_sum [30:0] $end
$var wire 1 S, Comp_enable $end
$scope module pe $end
$var wire 8 T, Exponent_a [7:0] $end
$var wire 25 U, significand [24:0] $end
$var wire 8 V, Exponent_sub [7:0] $end
$var reg 25 W, Significand [24:0] $end
$var reg 5 X, shift [4:0] $end
$upscope $end
$upscope $end
$scope module comparator_2 $end
$var wire 32 Y, a_operand [31:0] $end
$var wire 32 Z, b_operand [31:0] $end
$var wire 32 [, result [31:0] $end
$var wire 1 \, Exception $end
$var reg 1 |+ greater $end
$var reg 1 ], sign $end
$scope module Addition_Subtraction_1 $end
$var wire 1 ^, AddBar_Sub $end
$var wire 1 \, Exception $end
$var wire 32 _, a_operand [31:0] $end
$var wire 32 `, b_operand [31:0] $end
$var wire 1 a, operation_sub_addBar $end
$var wire 1 b, output_sign $end
$var wire 25 c, subtraction_diff [24:0] $end
$var wire 31 d, sub_diff [30:0] $end
$var wire 24 e, significand_sub_complement [23:0] $end
$var wire 25 f, significand_sub [24:0] $end
$var wire 24 g, significand_b_add_sub [23:0] $end
$var wire 24 h, significand_b [23:0] $end
$var wire 25 i, significand_add [24:0] $end
$var wire 24 j, significand_a [23:0] $end
$var wire 32 k, result [31:0] $end
$var wire 1 l, perform $end
$var wire 32 m, operand_b [31:0] $end
$var wire 32 n, operand_a [31:0] $end
$var wire 8 o, exponent_sub [7:0] $end
$var wire 8 p, exponent_diff [7:0] $end
$var wire 8 q, exponent_b_add_sub [7:0] $end
$var wire 31 r, add_sum [30:0] $end
$var wire 1 s, Comp_enable $end
$scope module pe $end
$var wire 8 t, Exponent_a [7:0] $end
$var wire 25 u, significand [24:0] $end
$var wire 8 v, Exponent_sub [7:0] $end
$var reg 25 w, Significand [24:0] $end
$var reg 5 x, shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk3[3] $end
$scope module pa $end
$var wire 1 y, Exception $end
$var wire 1 # clear $end
$var wire 32 z, decayed_potential [31:0] $end
$var wire 32 {, input_weight [31:0] $end
$var wire 32 |, v_threshold [31:0] $end
$var wire 32 }, reset_value [31:0] $end
$var wire 1 ~, greater $end
$var wire 32 !- add_value [31:0] $end
$var reg 32 "- added_potential [31:0] $end
$var reg 32 #- final_potential [31:0] $end
$var reg 1 $- spike $end
$scope module Addition_Subtraction_1 $end
$var wire 1 %- AddBar_Sub $end
$var wire 1 y, Exception $end
$var wire 32 &- a_operand [31:0] $end
$var wire 32 '- b_operand [31:0] $end
$var wire 1 (- operation_sub_addBar $end
$var wire 1 )- output_sign $end
$var wire 25 *- subtraction_diff [24:0] $end
$var wire 31 +- sub_diff [30:0] $end
$var wire 24 ,- significand_sub_complement [23:0] $end
$var wire 25 -- significand_sub [24:0] $end
$var wire 24 .- significand_b_add_sub [23:0] $end
$var wire 24 /- significand_b [23:0] $end
$var wire 25 0- significand_add [24:0] $end
$var wire 24 1- significand_a [23:0] $end
$var wire 32 2- result [31:0] $end
$var wire 1 3- perform $end
$var wire 32 4- operand_b [31:0] $end
$var wire 32 5- operand_a [31:0] $end
$var wire 8 6- exponent_sub [7:0] $end
$var wire 8 7- exponent_diff [7:0] $end
$var wire 8 8- exponent_b_add_sub [7:0] $end
$var wire 31 9- add_sum [30:0] $end
$var wire 1 :- Comp_enable $end
$scope module pe $end
$var wire 8 ;- Exponent_a [7:0] $end
$var wire 25 <- significand [24:0] $end
$var wire 8 =- Exponent_sub [7:0] $end
$var reg 25 >- Significand [24:0] $end
$var reg 5 ?- shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_2 $end
$var wire 1 @- AddBar_Sub $end
$var wire 1 y, Exception $end
$var wire 32 A- a_operand [31:0] $end
$var wire 32 B- b_operand [31:0] $end
$var wire 1 C- operation_sub_addBar $end
$var wire 1 D- output_sign $end
$var wire 25 E- subtraction_diff [24:0] $end
$var wire 31 F- sub_diff [30:0] $end
$var wire 24 G- significand_sub_complement [23:0] $end
$var wire 25 H- significand_sub [24:0] $end
$var wire 24 I- significand_b_add_sub [23:0] $end
$var wire 24 J- significand_b [23:0] $end
$var wire 25 K- significand_add [24:0] $end
$var wire 24 L- significand_a [23:0] $end
$var wire 32 M- result [31:0] $end
$var wire 1 N- perform $end
$var wire 32 O- operand_b [31:0] $end
$var wire 32 P- operand_a [31:0] $end
$var wire 8 Q- exponent_sub [7:0] $end
$var wire 8 R- exponent_diff [7:0] $end
$var wire 8 S- exponent_b_add_sub [7:0] $end
$var wire 31 T- add_sum [30:0] $end
$var wire 1 U- Comp_enable $end
$scope module pe $end
$var wire 8 V- Exponent_a [7:0] $end
$var wire 25 W- significand [24:0] $end
$var wire 8 X- Exponent_sub [7:0] $end
$var reg 25 Y- Significand [24:0] $end
$var reg 5 Z- shift [4:0] $end
$upscope $end
$upscope $end
$scope module comparator_2 $end
$var wire 32 [- a_operand [31:0] $end
$var wire 32 \- b_operand [31:0] $end
$var wire 32 ]- result [31:0] $end
$var wire 1 ^- Exception $end
$var reg 1 ~, greater $end
$var reg 1 _- sign $end
$scope module Addition_Subtraction_1 $end
$var wire 1 `- AddBar_Sub $end
$var wire 1 ^- Exception $end
$var wire 32 a- a_operand [31:0] $end
$var wire 32 b- b_operand [31:0] $end
$var wire 1 c- operation_sub_addBar $end
$var wire 1 d- output_sign $end
$var wire 25 e- subtraction_diff [24:0] $end
$var wire 31 f- sub_diff [30:0] $end
$var wire 24 g- significand_sub_complement [23:0] $end
$var wire 25 h- significand_sub [24:0] $end
$var wire 24 i- significand_b_add_sub [23:0] $end
$var wire 24 j- significand_b [23:0] $end
$var wire 25 k- significand_add [24:0] $end
$var wire 24 l- significand_a [23:0] $end
$var wire 32 m- result [31:0] $end
$var wire 1 n- perform $end
$var wire 32 o- operand_b [31:0] $end
$var wire 32 p- operand_a [31:0] $end
$var wire 8 q- exponent_sub [7:0] $end
$var wire 8 r- exponent_diff [7:0] $end
$var wire 8 s- exponent_b_add_sub [7:0] $end
$var wire 31 t- add_sum [30:0] $end
$var wire 1 u- Comp_enable $end
$scope module pe $end
$var wire 8 v- Exponent_a [7:0] $end
$var wire 25 w- significand [24:0] $end
$var wire 8 x- Exponent_sub [7:0] $end
$var reg 25 y- Significand [24:0] $end
$var reg 5 z- shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk3[4] $end
$scope module pa $end
$var wire 1 {- Exception $end
$var wire 1 # clear $end
$var wire 32 |- decayed_potential [31:0] $end
$var wire 32 }- input_weight [31:0] $end
$var wire 32 ~- v_threshold [31:0] $end
$var wire 32 !. reset_value [31:0] $end
$var wire 1 ". greater $end
$var wire 32 #. add_value [31:0] $end
$var reg 32 $. added_potential [31:0] $end
$var reg 32 %. final_potential [31:0] $end
$var reg 1 &. spike $end
$scope module Addition_Subtraction_1 $end
$var wire 1 '. AddBar_Sub $end
$var wire 1 {- Exception $end
$var wire 32 (. a_operand [31:0] $end
$var wire 32 ). b_operand [31:0] $end
$var wire 1 *. operation_sub_addBar $end
$var wire 1 +. output_sign $end
$var wire 25 ,. subtraction_diff [24:0] $end
$var wire 31 -. sub_diff [30:0] $end
$var wire 24 .. significand_sub_complement [23:0] $end
$var wire 25 /. significand_sub [24:0] $end
$var wire 24 0. significand_b_add_sub [23:0] $end
$var wire 24 1. significand_b [23:0] $end
$var wire 25 2. significand_add [24:0] $end
$var wire 24 3. significand_a [23:0] $end
$var wire 32 4. result [31:0] $end
$var wire 1 5. perform $end
$var wire 32 6. operand_b [31:0] $end
$var wire 32 7. operand_a [31:0] $end
$var wire 8 8. exponent_sub [7:0] $end
$var wire 8 9. exponent_diff [7:0] $end
$var wire 8 :. exponent_b_add_sub [7:0] $end
$var wire 31 ;. add_sum [30:0] $end
$var wire 1 <. Comp_enable $end
$scope module pe $end
$var wire 8 =. Exponent_a [7:0] $end
$var wire 25 >. significand [24:0] $end
$var wire 8 ?. Exponent_sub [7:0] $end
$var reg 25 @. Significand [24:0] $end
$var reg 5 A. shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_2 $end
$var wire 1 B. AddBar_Sub $end
$var wire 1 {- Exception $end
$var wire 32 C. a_operand [31:0] $end
$var wire 32 D. b_operand [31:0] $end
$var wire 1 E. operation_sub_addBar $end
$var wire 1 F. output_sign $end
$var wire 25 G. subtraction_diff [24:0] $end
$var wire 31 H. sub_diff [30:0] $end
$var wire 24 I. significand_sub_complement [23:0] $end
$var wire 25 J. significand_sub [24:0] $end
$var wire 24 K. significand_b_add_sub [23:0] $end
$var wire 24 L. significand_b [23:0] $end
$var wire 25 M. significand_add [24:0] $end
$var wire 24 N. significand_a [23:0] $end
$var wire 32 O. result [31:0] $end
$var wire 1 P. perform $end
$var wire 32 Q. operand_b [31:0] $end
$var wire 32 R. operand_a [31:0] $end
$var wire 8 S. exponent_sub [7:0] $end
$var wire 8 T. exponent_diff [7:0] $end
$var wire 8 U. exponent_b_add_sub [7:0] $end
$var wire 31 V. add_sum [30:0] $end
$var wire 1 W. Comp_enable $end
$scope module pe $end
$var wire 8 X. Exponent_a [7:0] $end
$var wire 25 Y. significand [24:0] $end
$var wire 8 Z. Exponent_sub [7:0] $end
$var reg 25 [. Significand [24:0] $end
$var reg 5 \. shift [4:0] $end
$upscope $end
$upscope $end
$scope module comparator_2 $end
$var wire 32 ]. a_operand [31:0] $end
$var wire 32 ^. b_operand [31:0] $end
$var wire 32 _. result [31:0] $end
$var wire 1 `. Exception $end
$var reg 1 ". greater $end
$var reg 1 a. sign $end
$scope module Addition_Subtraction_1 $end
$var wire 1 b. AddBar_Sub $end
$var wire 1 `. Exception $end
$var wire 32 c. a_operand [31:0] $end
$var wire 32 d. b_operand [31:0] $end
$var wire 1 e. operation_sub_addBar $end
$var wire 1 f. output_sign $end
$var wire 25 g. subtraction_diff [24:0] $end
$var wire 31 h. sub_diff [30:0] $end
$var wire 24 i. significand_sub_complement [23:0] $end
$var wire 25 j. significand_sub [24:0] $end
$var wire 24 k. significand_b_add_sub [23:0] $end
$var wire 24 l. significand_b [23:0] $end
$var wire 25 m. significand_add [24:0] $end
$var wire 24 n. significand_a [23:0] $end
$var wire 32 o. result [31:0] $end
$var wire 1 p. perform $end
$var wire 32 q. operand_b [31:0] $end
$var wire 32 r. operand_a [31:0] $end
$var wire 8 s. exponent_sub [7:0] $end
$var wire 8 t. exponent_diff [7:0] $end
$var wire 8 u. exponent_b_add_sub [7:0] $end
$var wire 31 v. add_sum [30:0] $end
$var wire 1 w. Comp_enable $end
$scope module pe $end
$var wire 8 x. Exponent_a [7:0] $end
$var wire 25 y. significand [24:0] $end
$var wire 8 z. Exponent_sub [7:0] $end
$var reg 25 {. Significand [24:0] $end
$var reg 5 |. shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk3[5] $end
$scope module pa $end
$var wire 1 }. Exception $end
$var wire 1 # clear $end
$var wire 32 ~. decayed_potential [31:0] $end
$var wire 32 !/ input_weight [31:0] $end
$var wire 32 "/ v_threshold [31:0] $end
$var wire 32 #/ reset_value [31:0] $end
$var wire 1 $/ greater $end
$var wire 32 %/ add_value [31:0] $end
$var reg 32 &/ added_potential [31:0] $end
$var reg 32 '/ final_potential [31:0] $end
$var reg 1 (/ spike $end
$scope module Addition_Subtraction_1 $end
$var wire 1 )/ AddBar_Sub $end
$var wire 1 }. Exception $end
$var wire 32 */ a_operand [31:0] $end
$var wire 32 +/ b_operand [31:0] $end
$var wire 1 ,/ operation_sub_addBar $end
$var wire 1 -/ output_sign $end
$var wire 25 ./ subtraction_diff [24:0] $end
$var wire 31 // sub_diff [30:0] $end
$var wire 24 0/ significand_sub_complement [23:0] $end
$var wire 25 1/ significand_sub [24:0] $end
$var wire 24 2/ significand_b_add_sub [23:0] $end
$var wire 24 3/ significand_b [23:0] $end
$var wire 25 4/ significand_add [24:0] $end
$var wire 24 5/ significand_a [23:0] $end
$var wire 32 6/ result [31:0] $end
$var wire 1 7/ perform $end
$var wire 32 8/ operand_b [31:0] $end
$var wire 32 9/ operand_a [31:0] $end
$var wire 8 :/ exponent_sub [7:0] $end
$var wire 8 ;/ exponent_diff [7:0] $end
$var wire 8 </ exponent_b_add_sub [7:0] $end
$var wire 31 =/ add_sum [30:0] $end
$var wire 1 >/ Comp_enable $end
$scope module pe $end
$var wire 8 ?/ Exponent_a [7:0] $end
$var wire 25 @/ significand [24:0] $end
$var wire 8 A/ Exponent_sub [7:0] $end
$var reg 25 B/ Significand [24:0] $end
$var reg 5 C/ shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_2 $end
$var wire 1 D/ AddBar_Sub $end
$var wire 1 }. Exception $end
$var wire 32 E/ a_operand [31:0] $end
$var wire 32 F/ b_operand [31:0] $end
$var wire 1 G/ operation_sub_addBar $end
$var wire 1 H/ output_sign $end
$var wire 25 I/ subtraction_diff [24:0] $end
$var wire 31 J/ sub_diff [30:0] $end
$var wire 24 K/ significand_sub_complement [23:0] $end
$var wire 25 L/ significand_sub [24:0] $end
$var wire 24 M/ significand_b_add_sub [23:0] $end
$var wire 24 N/ significand_b [23:0] $end
$var wire 25 O/ significand_add [24:0] $end
$var wire 24 P/ significand_a [23:0] $end
$var wire 32 Q/ result [31:0] $end
$var wire 1 R/ perform $end
$var wire 32 S/ operand_b [31:0] $end
$var wire 32 T/ operand_a [31:0] $end
$var wire 8 U/ exponent_sub [7:0] $end
$var wire 8 V/ exponent_diff [7:0] $end
$var wire 8 W/ exponent_b_add_sub [7:0] $end
$var wire 31 X/ add_sum [30:0] $end
$var wire 1 Y/ Comp_enable $end
$scope module pe $end
$var wire 8 Z/ Exponent_a [7:0] $end
$var wire 25 [/ significand [24:0] $end
$var wire 8 \/ Exponent_sub [7:0] $end
$var reg 25 ]/ Significand [24:0] $end
$var reg 5 ^/ shift [4:0] $end
$upscope $end
$upscope $end
$scope module comparator_2 $end
$var wire 32 _/ a_operand [31:0] $end
$var wire 32 `/ b_operand [31:0] $end
$var wire 32 a/ result [31:0] $end
$var wire 1 b/ Exception $end
$var reg 1 $/ greater $end
$var reg 1 c/ sign $end
$scope module Addition_Subtraction_1 $end
$var wire 1 d/ AddBar_Sub $end
$var wire 1 b/ Exception $end
$var wire 32 e/ a_operand [31:0] $end
$var wire 32 f/ b_operand [31:0] $end
$var wire 1 g/ operation_sub_addBar $end
$var wire 1 h/ output_sign $end
$var wire 25 i/ subtraction_diff [24:0] $end
$var wire 31 j/ sub_diff [30:0] $end
$var wire 24 k/ significand_sub_complement [23:0] $end
$var wire 25 l/ significand_sub [24:0] $end
$var wire 24 m/ significand_b_add_sub [23:0] $end
$var wire 24 n/ significand_b [23:0] $end
$var wire 25 o/ significand_add [24:0] $end
$var wire 24 p/ significand_a [23:0] $end
$var wire 32 q/ result [31:0] $end
$var wire 1 r/ perform $end
$var wire 32 s/ operand_b [31:0] $end
$var wire 32 t/ operand_a [31:0] $end
$var wire 8 u/ exponent_sub [7:0] $end
$var wire 8 v/ exponent_diff [7:0] $end
$var wire 8 w/ exponent_b_add_sub [7:0] $end
$var wire 31 x/ add_sum [30:0] $end
$var wire 1 y/ Comp_enable $end
$scope module pe $end
$var wire 8 z/ Exponent_a [7:0] $end
$var wire 25 {/ significand [24:0] $end
$var wire 8 |/ Exponent_sub [7:0] $end
$var reg 25 }/ Significand [24:0] $end
$var reg 5 ~/ shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk3[6] $end
$scope module pa $end
$var wire 1 !0 Exception $end
$var wire 1 # clear $end
$var wire 32 "0 decayed_potential [31:0] $end
$var wire 32 #0 input_weight [31:0] $end
$var wire 32 $0 v_threshold [31:0] $end
$var wire 32 %0 reset_value [31:0] $end
$var wire 1 &0 greater $end
$var wire 32 '0 add_value [31:0] $end
$var reg 32 (0 added_potential [31:0] $end
$var reg 32 )0 final_potential [31:0] $end
$var reg 1 *0 spike $end
$scope module Addition_Subtraction_1 $end
$var wire 1 +0 AddBar_Sub $end
$var wire 1 !0 Exception $end
$var wire 32 ,0 a_operand [31:0] $end
$var wire 32 -0 b_operand [31:0] $end
$var wire 1 .0 operation_sub_addBar $end
$var wire 1 /0 output_sign $end
$var wire 25 00 subtraction_diff [24:0] $end
$var wire 31 10 sub_diff [30:0] $end
$var wire 24 20 significand_sub_complement [23:0] $end
$var wire 25 30 significand_sub [24:0] $end
$var wire 24 40 significand_b_add_sub [23:0] $end
$var wire 24 50 significand_b [23:0] $end
$var wire 25 60 significand_add [24:0] $end
$var wire 24 70 significand_a [23:0] $end
$var wire 32 80 result [31:0] $end
$var wire 1 90 perform $end
$var wire 32 :0 operand_b [31:0] $end
$var wire 32 ;0 operand_a [31:0] $end
$var wire 8 <0 exponent_sub [7:0] $end
$var wire 8 =0 exponent_diff [7:0] $end
$var wire 8 >0 exponent_b_add_sub [7:0] $end
$var wire 31 ?0 add_sum [30:0] $end
$var wire 1 @0 Comp_enable $end
$scope module pe $end
$var wire 8 A0 Exponent_a [7:0] $end
$var wire 25 B0 significand [24:0] $end
$var wire 8 C0 Exponent_sub [7:0] $end
$var reg 25 D0 Significand [24:0] $end
$var reg 5 E0 shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_2 $end
$var wire 1 F0 AddBar_Sub $end
$var wire 1 !0 Exception $end
$var wire 32 G0 a_operand [31:0] $end
$var wire 32 H0 b_operand [31:0] $end
$var wire 1 I0 operation_sub_addBar $end
$var wire 1 J0 output_sign $end
$var wire 25 K0 subtraction_diff [24:0] $end
$var wire 31 L0 sub_diff [30:0] $end
$var wire 24 M0 significand_sub_complement [23:0] $end
$var wire 25 N0 significand_sub [24:0] $end
$var wire 24 O0 significand_b_add_sub [23:0] $end
$var wire 24 P0 significand_b [23:0] $end
$var wire 25 Q0 significand_add [24:0] $end
$var wire 24 R0 significand_a [23:0] $end
$var wire 32 S0 result [31:0] $end
$var wire 1 T0 perform $end
$var wire 32 U0 operand_b [31:0] $end
$var wire 32 V0 operand_a [31:0] $end
$var wire 8 W0 exponent_sub [7:0] $end
$var wire 8 X0 exponent_diff [7:0] $end
$var wire 8 Y0 exponent_b_add_sub [7:0] $end
$var wire 31 Z0 add_sum [30:0] $end
$var wire 1 [0 Comp_enable $end
$scope module pe $end
$var wire 8 \0 Exponent_a [7:0] $end
$var wire 25 ]0 significand [24:0] $end
$var wire 8 ^0 Exponent_sub [7:0] $end
$var reg 25 _0 Significand [24:0] $end
$var reg 5 `0 shift [4:0] $end
$upscope $end
$upscope $end
$scope module comparator_2 $end
$var wire 32 a0 a_operand [31:0] $end
$var wire 32 b0 b_operand [31:0] $end
$var wire 32 c0 result [31:0] $end
$var wire 1 d0 Exception $end
$var reg 1 &0 greater $end
$var reg 1 e0 sign $end
$scope module Addition_Subtraction_1 $end
$var wire 1 f0 AddBar_Sub $end
$var wire 1 d0 Exception $end
$var wire 32 g0 a_operand [31:0] $end
$var wire 32 h0 b_operand [31:0] $end
$var wire 1 i0 operation_sub_addBar $end
$var wire 1 j0 output_sign $end
$var wire 25 k0 subtraction_diff [24:0] $end
$var wire 31 l0 sub_diff [30:0] $end
$var wire 24 m0 significand_sub_complement [23:0] $end
$var wire 25 n0 significand_sub [24:0] $end
$var wire 24 o0 significand_b_add_sub [23:0] $end
$var wire 24 p0 significand_b [23:0] $end
$var wire 25 q0 significand_add [24:0] $end
$var wire 24 r0 significand_a [23:0] $end
$var wire 32 s0 result [31:0] $end
$var wire 1 t0 perform $end
$var wire 32 u0 operand_b [31:0] $end
$var wire 32 v0 operand_a [31:0] $end
$var wire 8 w0 exponent_sub [7:0] $end
$var wire 8 x0 exponent_diff [7:0] $end
$var wire 8 y0 exponent_b_add_sub [7:0] $end
$var wire 31 z0 add_sum [30:0] $end
$var wire 1 {0 Comp_enable $end
$scope module pe $end
$var wire 8 |0 Exponent_a [7:0] $end
$var wire 25 }0 significand [24:0] $end
$var wire 8 ~0 Exponent_sub [7:0] $end
$var reg 25 !1 Significand [24:0] $end
$var reg 5 "1 shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk3[7] $end
$scope module pa $end
$var wire 1 #1 Exception $end
$var wire 1 # clear $end
$var wire 32 $1 decayed_potential [31:0] $end
$var wire 32 %1 input_weight [31:0] $end
$var wire 32 &1 v_threshold [31:0] $end
$var wire 32 '1 reset_value [31:0] $end
$var wire 1 (1 greater $end
$var wire 32 )1 add_value [31:0] $end
$var reg 32 *1 added_potential [31:0] $end
$var reg 32 +1 final_potential [31:0] $end
$var reg 1 ,1 spike $end
$scope module Addition_Subtraction_1 $end
$var wire 1 -1 AddBar_Sub $end
$var wire 1 #1 Exception $end
$var wire 32 .1 a_operand [31:0] $end
$var wire 32 /1 b_operand [31:0] $end
$var wire 1 01 operation_sub_addBar $end
$var wire 1 11 output_sign $end
$var wire 25 21 subtraction_diff [24:0] $end
$var wire 31 31 sub_diff [30:0] $end
$var wire 24 41 significand_sub_complement [23:0] $end
$var wire 25 51 significand_sub [24:0] $end
$var wire 24 61 significand_b_add_sub [23:0] $end
$var wire 24 71 significand_b [23:0] $end
$var wire 25 81 significand_add [24:0] $end
$var wire 24 91 significand_a [23:0] $end
$var wire 32 :1 result [31:0] $end
$var wire 1 ;1 perform $end
$var wire 32 <1 operand_b [31:0] $end
$var wire 32 =1 operand_a [31:0] $end
$var wire 8 >1 exponent_sub [7:0] $end
$var wire 8 ?1 exponent_diff [7:0] $end
$var wire 8 @1 exponent_b_add_sub [7:0] $end
$var wire 31 A1 add_sum [30:0] $end
$var wire 1 B1 Comp_enable $end
$scope module pe $end
$var wire 8 C1 Exponent_a [7:0] $end
$var wire 25 D1 significand [24:0] $end
$var wire 8 E1 Exponent_sub [7:0] $end
$var reg 25 F1 Significand [24:0] $end
$var reg 5 G1 shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_2 $end
$var wire 1 H1 AddBar_Sub $end
$var wire 1 #1 Exception $end
$var wire 32 I1 a_operand [31:0] $end
$var wire 32 J1 b_operand [31:0] $end
$var wire 1 K1 operation_sub_addBar $end
$var wire 1 L1 output_sign $end
$var wire 25 M1 subtraction_diff [24:0] $end
$var wire 31 N1 sub_diff [30:0] $end
$var wire 24 O1 significand_sub_complement [23:0] $end
$var wire 25 P1 significand_sub [24:0] $end
$var wire 24 Q1 significand_b_add_sub [23:0] $end
$var wire 24 R1 significand_b [23:0] $end
$var wire 25 S1 significand_add [24:0] $end
$var wire 24 T1 significand_a [23:0] $end
$var wire 32 U1 result [31:0] $end
$var wire 1 V1 perform $end
$var wire 32 W1 operand_b [31:0] $end
$var wire 32 X1 operand_a [31:0] $end
$var wire 8 Y1 exponent_sub [7:0] $end
$var wire 8 Z1 exponent_diff [7:0] $end
$var wire 8 [1 exponent_b_add_sub [7:0] $end
$var wire 31 \1 add_sum [30:0] $end
$var wire 1 ]1 Comp_enable $end
$scope module pe $end
$var wire 8 ^1 Exponent_a [7:0] $end
$var wire 25 _1 significand [24:0] $end
$var wire 8 `1 Exponent_sub [7:0] $end
$var reg 25 a1 Significand [24:0] $end
$var reg 5 b1 shift [4:0] $end
$upscope $end
$upscope $end
$scope module comparator_2 $end
$var wire 32 c1 a_operand [31:0] $end
$var wire 32 d1 b_operand [31:0] $end
$var wire 32 e1 result [31:0] $end
$var wire 1 f1 Exception $end
$var reg 1 (1 greater $end
$var reg 1 g1 sign $end
$scope module Addition_Subtraction_1 $end
$var wire 1 h1 AddBar_Sub $end
$var wire 1 f1 Exception $end
$var wire 32 i1 a_operand [31:0] $end
$var wire 32 j1 b_operand [31:0] $end
$var wire 1 k1 operation_sub_addBar $end
$var wire 1 l1 output_sign $end
$var wire 25 m1 subtraction_diff [24:0] $end
$var wire 31 n1 sub_diff [30:0] $end
$var wire 24 o1 significand_sub_complement [23:0] $end
$var wire 25 p1 significand_sub [24:0] $end
$var wire 24 q1 significand_b_add_sub [23:0] $end
$var wire 24 r1 significand_b [23:0] $end
$var wire 25 s1 significand_add [24:0] $end
$var wire 24 t1 significand_a [23:0] $end
$var wire 32 u1 result [31:0] $end
$var wire 1 v1 perform $end
$var wire 32 w1 operand_b [31:0] $end
$var wire 32 x1 operand_a [31:0] $end
$var wire 8 y1 exponent_sub [7:0] $end
$var wire 8 z1 exponent_diff [7:0] $end
$var wire 8 {1 exponent_b_add_sub [7:0] $end
$var wire 31 |1 add_sum [30:0] $end
$var wire 1 }1 Comp_enable $end
$scope module pe $end
$var wire 8 ~1 Exponent_a [7:0] $end
$var wire 25 !2 significand [24:0] $end
$var wire 8 "2 Exponent_sub [7:0] $end
$var reg 25 #2 Significand [24:0] $end
$var reg 5 $2 shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk3[8] $end
$scope module pa $end
$var wire 1 %2 Exception $end
$var wire 1 # clear $end
$var wire 32 &2 decayed_potential [31:0] $end
$var wire 32 '2 input_weight [31:0] $end
$var wire 32 (2 v_threshold [31:0] $end
$var wire 32 )2 reset_value [31:0] $end
$var wire 1 *2 greater $end
$var wire 32 +2 add_value [31:0] $end
$var reg 32 ,2 added_potential [31:0] $end
$var reg 32 -2 final_potential [31:0] $end
$var reg 1 .2 spike $end
$scope module Addition_Subtraction_1 $end
$var wire 1 /2 AddBar_Sub $end
$var wire 1 %2 Exception $end
$var wire 32 02 a_operand [31:0] $end
$var wire 32 12 b_operand [31:0] $end
$var wire 1 22 operation_sub_addBar $end
$var wire 1 32 output_sign $end
$var wire 25 42 subtraction_diff [24:0] $end
$var wire 31 52 sub_diff [30:0] $end
$var wire 24 62 significand_sub_complement [23:0] $end
$var wire 25 72 significand_sub [24:0] $end
$var wire 24 82 significand_b_add_sub [23:0] $end
$var wire 24 92 significand_b [23:0] $end
$var wire 25 :2 significand_add [24:0] $end
$var wire 24 ;2 significand_a [23:0] $end
$var wire 32 <2 result [31:0] $end
$var wire 1 =2 perform $end
$var wire 32 >2 operand_b [31:0] $end
$var wire 32 ?2 operand_a [31:0] $end
$var wire 8 @2 exponent_sub [7:0] $end
$var wire 8 A2 exponent_diff [7:0] $end
$var wire 8 B2 exponent_b_add_sub [7:0] $end
$var wire 31 C2 add_sum [30:0] $end
$var wire 1 D2 Comp_enable $end
$scope module pe $end
$var wire 8 E2 Exponent_a [7:0] $end
$var wire 25 F2 significand [24:0] $end
$var wire 8 G2 Exponent_sub [7:0] $end
$var reg 25 H2 Significand [24:0] $end
$var reg 5 I2 shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_2 $end
$var wire 1 J2 AddBar_Sub $end
$var wire 1 %2 Exception $end
$var wire 32 K2 a_operand [31:0] $end
$var wire 32 L2 b_operand [31:0] $end
$var wire 1 M2 operation_sub_addBar $end
$var wire 1 N2 output_sign $end
$var wire 25 O2 subtraction_diff [24:0] $end
$var wire 31 P2 sub_diff [30:0] $end
$var wire 24 Q2 significand_sub_complement [23:0] $end
$var wire 25 R2 significand_sub [24:0] $end
$var wire 24 S2 significand_b_add_sub [23:0] $end
$var wire 24 T2 significand_b [23:0] $end
$var wire 25 U2 significand_add [24:0] $end
$var wire 24 V2 significand_a [23:0] $end
$var wire 32 W2 result [31:0] $end
$var wire 1 X2 perform $end
$var wire 32 Y2 operand_b [31:0] $end
$var wire 32 Z2 operand_a [31:0] $end
$var wire 8 [2 exponent_sub [7:0] $end
$var wire 8 \2 exponent_diff [7:0] $end
$var wire 8 ]2 exponent_b_add_sub [7:0] $end
$var wire 31 ^2 add_sum [30:0] $end
$var wire 1 _2 Comp_enable $end
$scope module pe $end
$var wire 8 `2 Exponent_a [7:0] $end
$var wire 25 a2 significand [24:0] $end
$var wire 8 b2 Exponent_sub [7:0] $end
$var reg 25 c2 Significand [24:0] $end
$var reg 5 d2 shift [4:0] $end
$upscope $end
$upscope $end
$scope module comparator_2 $end
$var wire 32 e2 a_operand [31:0] $end
$var wire 32 f2 b_operand [31:0] $end
$var wire 32 g2 result [31:0] $end
$var wire 1 h2 Exception $end
$var reg 1 *2 greater $end
$var reg 1 i2 sign $end
$scope module Addition_Subtraction_1 $end
$var wire 1 j2 AddBar_Sub $end
$var wire 1 h2 Exception $end
$var wire 32 k2 a_operand [31:0] $end
$var wire 32 l2 b_operand [31:0] $end
$var wire 1 m2 operation_sub_addBar $end
$var wire 1 n2 output_sign $end
$var wire 25 o2 subtraction_diff [24:0] $end
$var wire 31 p2 sub_diff [30:0] $end
$var wire 24 q2 significand_sub_complement [23:0] $end
$var wire 25 r2 significand_sub [24:0] $end
$var wire 24 s2 significand_b_add_sub [23:0] $end
$var wire 24 t2 significand_b [23:0] $end
$var wire 25 u2 significand_add [24:0] $end
$var wire 24 v2 significand_a [23:0] $end
$var wire 32 w2 result [31:0] $end
$var wire 1 x2 perform $end
$var wire 32 y2 operand_b [31:0] $end
$var wire 32 z2 operand_a [31:0] $end
$var wire 8 {2 exponent_sub [7:0] $end
$var wire 8 |2 exponent_diff [7:0] $end
$var wire 8 }2 exponent_b_add_sub [7:0] $end
$var wire 31 ~2 add_sum [30:0] $end
$var wire 1 !3 Comp_enable $end
$scope module pe $end
$var wire 8 "3 Exponent_a [7:0] $end
$var wire 25 #3 significand [24:0] $end
$var wire 8 $3 Exponent_sub [7:0] $end
$var reg 25 %3 Significand [24:0] $end
$var reg 5 &3 shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk3[9] $end
$scope module pa $end
$var wire 1 '3 Exception $end
$var wire 1 # clear $end
$var wire 32 (3 decayed_potential [31:0] $end
$var wire 32 )3 input_weight [31:0] $end
$var wire 32 *3 v_threshold [31:0] $end
$var wire 32 +3 reset_value [31:0] $end
$var wire 1 ,3 greater $end
$var wire 32 -3 add_value [31:0] $end
$var reg 32 .3 added_potential [31:0] $end
$var reg 32 /3 final_potential [31:0] $end
$var reg 1 03 spike $end
$scope module Addition_Subtraction_1 $end
$var wire 1 13 AddBar_Sub $end
$var wire 1 '3 Exception $end
$var wire 32 23 a_operand [31:0] $end
$var wire 32 33 b_operand [31:0] $end
$var wire 1 43 operation_sub_addBar $end
$var wire 1 53 output_sign $end
$var wire 25 63 subtraction_diff [24:0] $end
$var wire 31 73 sub_diff [30:0] $end
$var wire 24 83 significand_sub_complement [23:0] $end
$var wire 25 93 significand_sub [24:0] $end
$var wire 24 :3 significand_b_add_sub [23:0] $end
$var wire 24 ;3 significand_b [23:0] $end
$var wire 25 <3 significand_add [24:0] $end
$var wire 24 =3 significand_a [23:0] $end
$var wire 32 >3 result [31:0] $end
$var wire 1 ?3 perform $end
$var wire 32 @3 operand_b [31:0] $end
$var wire 32 A3 operand_a [31:0] $end
$var wire 8 B3 exponent_sub [7:0] $end
$var wire 8 C3 exponent_diff [7:0] $end
$var wire 8 D3 exponent_b_add_sub [7:0] $end
$var wire 31 E3 add_sum [30:0] $end
$var wire 1 F3 Comp_enable $end
$scope module pe $end
$var wire 8 G3 Exponent_a [7:0] $end
$var wire 25 H3 significand [24:0] $end
$var wire 8 I3 Exponent_sub [7:0] $end
$var reg 25 J3 Significand [24:0] $end
$var reg 5 K3 shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_2 $end
$var wire 1 L3 AddBar_Sub $end
$var wire 1 '3 Exception $end
$var wire 32 M3 a_operand [31:0] $end
$var wire 32 N3 b_operand [31:0] $end
$var wire 1 O3 operation_sub_addBar $end
$var wire 1 P3 output_sign $end
$var wire 25 Q3 subtraction_diff [24:0] $end
$var wire 31 R3 sub_diff [30:0] $end
$var wire 24 S3 significand_sub_complement [23:0] $end
$var wire 25 T3 significand_sub [24:0] $end
$var wire 24 U3 significand_b_add_sub [23:0] $end
$var wire 24 V3 significand_b [23:0] $end
$var wire 25 W3 significand_add [24:0] $end
$var wire 24 X3 significand_a [23:0] $end
$var wire 32 Y3 result [31:0] $end
$var wire 1 Z3 perform $end
$var wire 32 [3 operand_b [31:0] $end
$var wire 32 \3 operand_a [31:0] $end
$var wire 8 ]3 exponent_sub [7:0] $end
$var wire 8 ^3 exponent_diff [7:0] $end
$var wire 8 _3 exponent_b_add_sub [7:0] $end
$var wire 31 `3 add_sum [30:0] $end
$var wire 1 a3 Comp_enable $end
$scope module pe $end
$var wire 8 b3 Exponent_a [7:0] $end
$var wire 25 c3 significand [24:0] $end
$var wire 8 d3 Exponent_sub [7:0] $end
$var reg 25 e3 Significand [24:0] $end
$var reg 5 f3 shift [4:0] $end
$upscope $end
$upscope $end
$scope module comparator_2 $end
$var wire 32 g3 a_operand [31:0] $end
$var wire 32 h3 b_operand [31:0] $end
$var wire 32 i3 result [31:0] $end
$var wire 1 j3 Exception $end
$var reg 1 ,3 greater $end
$var reg 1 k3 sign $end
$scope module Addition_Subtraction_1 $end
$var wire 1 l3 AddBar_Sub $end
$var wire 1 j3 Exception $end
$var wire 32 m3 a_operand [31:0] $end
$var wire 32 n3 b_operand [31:0] $end
$var wire 1 o3 operation_sub_addBar $end
$var wire 1 p3 output_sign $end
$var wire 25 q3 subtraction_diff [24:0] $end
$var wire 31 r3 sub_diff [30:0] $end
$var wire 24 s3 significand_sub_complement [23:0] $end
$var wire 25 t3 significand_sub [24:0] $end
$var wire 24 u3 significand_b_add_sub [23:0] $end
$var wire 24 v3 significand_b [23:0] $end
$var wire 25 w3 significand_add [24:0] $end
$var wire 24 x3 significand_a [23:0] $end
$var wire 32 y3 result [31:0] $end
$var wire 1 z3 perform $end
$var wire 32 {3 operand_b [31:0] $end
$var wire 32 |3 operand_a [31:0] $end
$var wire 8 }3 exponent_sub [7:0] $end
$var wire 8 ~3 exponent_diff [7:0] $end
$var wire 8 !4 exponent_b_add_sub [7:0] $end
$var wire 31 "4 add_sum [30:0] $end
$var wire 1 #4 Comp_enable $end
$scope module pe $end
$var wire 8 $4 Exponent_a [7:0] $end
$var wire 25 %4 significand [24:0] $end
$var wire 8 &4 Exponent_sub [7:0] $end
$var reg 25 '4 Significand [24:0] $end
$var reg 5 (4 shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx (4
bx '4
bx &4
bx %4
bx $4
x#4
bx "4
bx !4
bx ~3
bx }3
bx |3
bx {3
xz3
bx y3
bx x3
bx w3
bx v3
bx u3
bx t3
bx s3
bx r3
bx q3
xp3
xo3
b1000010100001111100011110101110 n3
bx m3
1l3
xk3
xj3
bx i3
b1000010100001111100011110101110 h3
bx g3
bx f3
bx e3
bx d3
bx c3
bx b3
xa3
bx `3
bx _3
bx ^3
bx ]3
bx \3
bx [3
xZ3
bx Y3
bx X3
bx W3
bx V3
bx U3
bx T3
bx S3
bx R3
bx Q3
xP3
xO3
bx N3
bx M3
0L3
bx K3
bx J3
bx I3
bx H3
bx G3
xF3
bx E3
bx D3
bx C3
bx B3
bx A3
bx @3
x?3
bx >3
bx =3
bx <3
bx ;3
bx :3
bx 93
bx 83
bx 73
bx 63
x53
x43
b1000010100001111100011110101110 33
bx 23
113
x03
bx /3
bx .3
bx -3
x,3
bx +3
b1000010100001111100011110101110 *3
bx )3
bx (3
x'3
bx &3
bx %3
bx $3
bx #3
bx "3
x!3
bx ~2
bx }2
bx |2
bx {2
bx z2
bx y2
xx2
bx w2
bx v2
bx u2
bx t2
bx s2
bx r2
bx q2
bx p2
bx o2
xn2
xm2
b1000010000101011010111000010100 l2
bx k2
1j2
xi2
xh2
bx g2
b1000010000101011010111000010100 f2
bx e2
bx d2
bx c2
bx b2
bx a2
bx `2
x_2
bx ^2
bx ]2
bx \2
bx [2
bx Z2
bx Y2
xX2
bx W2
bx V2
bx U2
bx T2
bx S2
bx R2
bx Q2
bx P2
bx O2
xN2
xM2
bx L2
bx K2
0J2
bx I2
bx H2
bx G2
bx F2
bx E2
xD2
bx C2
bx B2
bx A2
bx @2
bx ?2
bx >2
x=2
bx <2
bx ;2
bx :2
bx 92
bx 82
bx 72
bx 62
bx 52
bx 42
x32
x22
b1000010000101011010111000010100 12
bx 02
1/2
x.2
bx -2
bx ,2
bx +2
x*2
bx )2
b1000010000101011010111000010100 (2
bx '2
bx &2
x%2
bx $2
bx #2
bx "2
bx !2
bx ~1
x}1
bx |1
bx {1
bx z1
bx y1
bx x1
bx w1
xv1
bx u1
bx t1
bx s1
bx r1
bx q1
bx p1
bx o1
bx n1
bx m1
xl1
xk1
b1000001001000001100110011001101 j1
bx i1
1h1
xg1
xf1
bx e1
b1000001001000001100110011001101 d1
bx c1
bx b1
bx a1
bx `1
bx _1
bx ^1
x]1
bx \1
bx [1
bx Z1
bx Y1
bx X1
bx W1
xV1
bx U1
bx T1
bx S1
bx R1
bx Q1
bx P1
bx O1
bx N1
bx M1
xL1
xK1
bx J1
bx I1
0H1
bx G1
bx F1
bx E1
bx D1
bx C1
xB1
bx A1
bx @1
bx ?1
bx >1
bx =1
bx <1
x;1
bx :1
bx 91
bx 81
bx 71
bx 61
bx 51
bx 41
bx 31
bx 21
x11
x01
b1000001001000001100110011001101 /1
bx .1
1-1
x,1
bx +1
bx *1
bx )1
x(1
bx '1
b1000001001000001100110011001101 &1
bx %1
bx $1
x#1
bx "1
bx !1
bx ~0
bx }0
bx |0
x{0
bx z0
bx y0
bx x0
bx w0
bx v0
bx u0
xt0
bx s0
bx r0
bx q0
bx p0
bx o0
bx n0
bx m0
bx l0
bx k0
xj0
xi0
b1000010011100000000000000000000 h0
bx g0
1f0
xe0
xd0
bx c0
b1000010011100000000000000000000 b0
bx a0
bx `0
bx _0
bx ^0
bx ]0
bx \0
x[0
bx Z0
bx Y0
bx X0
bx W0
bx V0
bx U0
xT0
bx S0
bx R0
bx Q0
bx P0
bx O0
bx N0
bx M0
bx L0
bx K0
xJ0
xI0
bx H0
bx G0
0F0
bx E0
bx D0
bx C0
bx B0
bx A0
x@0
bx ?0
bx >0
bx =0
bx <0
bx ;0
bx :0
x90
bx 80
bx 70
bx 60
bx 50
bx 40
bx 30
bx 20
bx 10
bx 00
x/0
x.0
b1000010011100000000000000000000 -0
bx ,0
1+0
x*0
bx )0
bx (0
bx '0
x&0
bx %0
b1000010011100000000000000000000 $0
bx #0
bx "0
x!0
bx ~/
bx }/
bx |/
bx {/
bx z/
xy/
bx x/
bx w/
bx v/
bx u/
bx t/
bx s/
xr/
bx q/
bx p/
bx o/
bx n/
bx m/
bx l/
bx k/
bx j/
bx i/
xh/
xg/
b1000010011010110010100011110110 f/
bx e/
1d/
xc/
xb/
bx a/
b1000010011010110010100011110110 `/
bx _/
bx ^/
bx ]/
bx \/
bx [/
bx Z/
xY/
bx X/
bx W/
bx V/
bx U/
bx T/
bx S/
xR/
bx Q/
bx P/
bx O/
bx N/
bx M/
bx L/
bx K/
bx J/
bx I/
xH/
xG/
bx F/
bx E/
0D/
bx C/
bx B/
bx A/
bx @/
bx ?/
x>/
bx =/
bx </
bx ;/
bx :/
bx 9/
bx 8/
x7/
bx 6/
bx 5/
bx 4/
bx 3/
bx 2/
bx 1/
bx 0/
bx //
bx ./
x-/
x,/
b1000010011010110010100011110110 +/
bx */
1)/
x(/
bx '/
bx &/
bx %/
x$/
bx #/
b1000010011010110010100011110110 "/
bx !/
bx ~.
x}.
bx |.
bx {.
bx z.
bx y.
bx x.
xw.
bx v.
bx u.
bx t.
bx s.
bx r.
bx q.
xp.
bx o.
bx n.
bx m.
bx l.
bx k.
bx j.
bx i.
bx h.
bx g.
xf.
xe.
b1000001100111010000101000111101 d.
bx c.
1b.
xa.
x`.
bx _.
b1000001100111010000101000111101 ^.
bx ].
bx \.
bx [.
bx Z.
bx Y.
bx X.
xW.
bx V.
bx U.
bx T.
bx S.
bx R.
bx Q.
xP.
bx O.
bx N.
bx M.
bx L.
bx K.
bx J.
bx I.
bx H.
bx G.
xF.
xE.
bx D.
bx C.
0B.
bx A.
bx @.
bx ?.
bx >.
bx =.
x<.
bx ;.
bx :.
bx 9.
bx 8.
bx 7.
bx 6.
x5.
bx 4.
bx 3.
bx 2.
bx 1.
bx 0.
bx /.
bx ..
bx -.
bx ,.
x+.
x*.
b1000001100111010000101000111101 ).
bx (.
1'.
x&.
bx %.
bx $.
bx #.
x".
bx !.
b1000001100111010000101000111101 ~-
bx }-
bx |-
x{-
bx z-
bx y-
bx x-
bx w-
bx v-
xu-
bx t-
bx s-
bx r-
bx q-
bx p-
bx o-
xn-
bx m-
bx l-
bx k-
bx j-
bx i-
bx h-
bx g-
bx f-
bx e-
xd-
xc-
b1000010100100010000000000000000 b-
bx a-
1`-
x_-
x^-
bx ]-
b1000010100100010000000000000000 \-
bx [-
bx Z-
bx Y-
bx X-
bx W-
bx V-
xU-
bx T-
bx S-
bx R-
bx Q-
bx P-
bx O-
xN-
bx M-
bx L-
bx K-
bx J-
bx I-
bx H-
bx G-
bx F-
bx E-
xD-
xC-
bx B-
bx A-
0@-
bx ?-
bx >-
bx =-
bx <-
bx ;-
x:-
bx 9-
bx 8-
bx 7-
bx 6-
bx 5-
bx 4-
x3-
bx 2-
bx 1-
bx 0-
bx /-
bx .-
bx --
bx ,-
bx +-
bx *-
x)-
x(-
b1000010100100010000000000000000 '-
bx &-
1%-
x$-
bx #-
bx "-
bx !-
x~,
bx },
b1000010100100010000000000000000 |,
bx {,
bx z,
xy,
bx x,
bx w,
bx v,
bx u,
bx t,
xs,
bx r,
bx q,
bx p,
bx o,
bx n,
bx m,
xl,
bx k,
bx j,
bx i,
bx h,
bx g,
bx f,
bx e,
bx d,
bx c,
xb,
xa,
b1000000010010001111010111000011 `,
bx _,
1^,
x],
x\,
bx [,
b1000000010010001111010111000011 Z,
bx Y,
bx X,
bx W,
bx V,
bx U,
bx T,
xS,
bx R,
bx Q,
bx P,
bx O,
bx N,
bx M,
xL,
bx K,
bx J,
bx I,
bx H,
bx G,
bx F,
bx E,
bx D,
bx C,
xB,
xA,
bx @,
bx ?,
0>,
bx =,
bx <,
bx ;,
bx :,
bx 9,
x8,
bx 7,
bx 6,
bx 5,
bx 4,
bx 3,
bx 2,
x1,
bx 0,
bx /,
bx .,
bx -,
bx ,,
bx +,
bx *,
bx ),
bx (,
x',
x&,
b1000000010010001111010111000011 %,
bx $,
1#,
x",
bx !,
bx ~+
bx }+
x|+
bx {+
b1000000010010001111010111000011 z+
bx y+
bx x+
xw+
bx v+
bx u+
bx t+
bx s+
bx r+
xq+
bx p+
bx o+
bx n+
bx m+
bx l+
bx k+
xj+
bx i+
bx h+
bx g+
bx f+
bx e+
bx d+
bx c+
bx b+
bx a+
x`+
x_+
b1000010001101111000010100011111 ^+
bx ]+
1\+
x[+
xZ+
bx Y+
b1000010001101111000010100011111 X+
bx W+
bx V+
bx U+
bx T+
bx S+
bx R+
xQ+
bx P+
bx O+
bx N+
bx M+
bx L+
bx K+
xJ+
bx I+
bx H+
bx G+
bx F+
bx E+
bx D+
bx C+
bx B+
bx A+
x@+
x?+
bx >+
bx =+
0<+
bx ;+
bx :+
bx 9+
bx 8+
bx 7+
x6+
bx 5+
bx 4+
bx 3+
bx 2+
bx 1+
bx 0+
x/+
bx .+
bx -+
bx ,+
bx ++
bx *+
bx )+
bx (+
bx '+
bx &+
x%+
x$+
b1000010001101111000010100011111 #+
bx "+
1!+
x~*
bx }*
bx |*
bx {*
xz*
bx y*
b1000010001101111000010100011111 x*
bx w*
bx v*
xu*
bx t*
bx s*
bx r*
bx q*
bx p*
xo*
bx n*
bx m*
bx l*
bx k*
bx j*
bx i*
xh*
bx g*
bx f*
bx e*
bx d*
bx c*
bx b*
bx a*
bx `*
bx _*
x^*
x]*
b1000010101011001000101000111101 \*
bx [*
1Z*
xY*
xX*
bx W*
b1000010101011001000101000111101 V*
bx U*
bx T*
bx S*
bx R*
bx Q*
bx P*
xO*
bx N*
bx M*
bx L*
bx K*
bx J*
bx I*
xH*
bx G*
bx F*
bx E*
bx D*
bx C*
bx B*
bx A*
bx @*
bx ?*
x>*
x=*
bx <*
bx ;*
0:*
bx 9*
bx 8*
bx 7*
bx 6*
bx 5*
x4*
bx 3*
bx 2*
bx 1*
bx 0*
bx /*
bx .*
x-*
bx ,*
bx +*
bx **
bx )*
bx (*
bx '*
bx &*
bx %*
bx $*
x#*
x"*
b1000010101011001000101000111101 !*
bx ~)
1})
x|)
bx {)
bx z)
bx y)
xx)
bx w)
b1000010101011001000101000111101 v)
bx u)
bx t)
xs)
bx r)
bx q)
bx p)
bx o)
bx n)
xm)
bx l)
bx k)
bx j)
bx i)
bx h)
bx g)
xf)
bx e)
bx d)
bx c)
bx b)
bx a)
bx `)
bx _)
bx ^)
bx ])
x\)
x[)
bx Z)
bx Y)
0X)
bx W)
bx V)
b101 U)
bx T)
xS)
bx R)
bx Q)
xP)
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 O)
b11000000000100000000000101000000000110000000000111 N)
bx M)
b1001 L)
bx K)
bx J)
bx I)
bx H)
bx G)
xF)
bx E)
bx D)
bx C)
bx B)
bx A)
bx @)
x?)
bx >)
bx =)
bx <)
bx ;)
bx :)
bx 9)
bx 8)
bx 7)
bx 6)
x5)
x4)
bx 3)
bx 2)
01)
bx 0)
bx /)
b101 .)
bx -)
x,)
bx +)
bx *)
x))
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 ()
b11000000000100000000000101000000000110000000000111 ')
bx &)
b1000 %)
bx $)
bx #)
bx ")
bx !)
bx ~(
x}(
bx |(
bx {(
bx z(
bx y(
bx x(
bx w(
xv(
bx u(
bx t(
bx s(
bx r(
bx q(
bx p(
bx o(
bx n(
bx m(
xl(
xk(
bx j(
bx i(
0h(
bx g(
bx f(
b101 e(
bx d(
xc(
bx b(
bx a(
x`(
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 _(
b11000000000100000000000101000000000110000000000111 ^(
bx ](
b111 \(
bx [(
bx Z(
bx Y(
bx X(
bx W(
xV(
bx U(
bx T(
bx S(
bx R(
bx Q(
bx P(
xO(
bx N(
bx M(
bx L(
bx K(
bx J(
bx I(
bx H(
bx G(
bx F(
xE(
xD(
bx C(
bx B(
0A(
bx @(
bx ?(
b101 >(
bx =(
x<(
bx ;(
bx :(
x9(
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 8(
b11000000000100000000000101000000000110000000000111 7(
bx 6(
b110 5(
bx 4(
bx 3(
bx 2(
bx 1(
bx 0(
x/(
bx .(
bx -(
bx ,(
bx +(
bx *(
bx )(
x((
bx '(
bx &(
bx %(
bx $(
bx #(
bx "(
bx !(
bx ~'
bx }'
x|'
x{'
bx z'
bx y'
0x'
bx w'
bx v'
b101 u'
bx t'
xs'
bx r'
bx q'
xp'
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 o'
b11000000000100000000000101000000000110000000000111 n'
bx m'
b101 l'
bx k'
bx j'
bx i'
bx h'
bx g'
xf'
bx e'
bx d'
bx c'
bx b'
bx a'
bx `'
x_'
bx ^'
bx ]'
bx \'
bx ['
bx Z'
bx Y'
bx X'
bx W'
bx V'
xU'
xT'
bx S'
bx R'
0Q'
bx P'
bx O'
b101 N'
bx M'
xL'
bx K'
bx J'
xI'
b100001000111111010001111010111001000001000010011001100110011010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 H'
b1000000000010000000000101000000000000000000000000 G'
bx F'
b100 E'
bx D'
bx C'
bx B'
bx A'
bx @'
x?'
bx >'
bx ='
bx <'
bx ;'
bx :'
bx 9'
x8'
bx 7'
bx 6'
bx 5'
bx 4'
bx 3'
bx 2'
bx 1'
bx 0'
bx /'
x.'
x-'
bx ,'
bx +'
0*'
bx )'
bx ('
b101 ''
bx &'
x%'
bx $'
bx #'
x"'
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 !'
b11000000000100000000000101000000000110000000000111 ~&
bx }&
b11 |&
bx {&
bx z&
bx y&
bx x&
bx w&
xv&
bx u&
bx t&
bx s&
bx r&
bx q&
bx p&
xo&
bx n&
bx m&
bx l&
bx k&
bx j&
bx i&
bx h&
bx g&
bx f&
xe&
xd&
bx c&
bx b&
0a&
bx `&
bx _&
b101 ^&
bx ]&
x\&
bx [&
bx Z&
xY&
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 X&
b11000000000100000000000101000000000110000000000111 W&
bx V&
b10 U&
bx T&
bx S&
bx R&
bx Q&
bx P&
xO&
bx N&
bx M&
bx L&
bx K&
bx J&
bx I&
xH&
bx G&
bx F&
bx E&
bx D&
bx C&
bx B&
bx A&
bx @&
bx ?&
x>&
x=&
bx <&
bx ;&
0:&
bx 9&
bx 8&
b101 7&
bx 6&
x5&
bx 4&
bx 3&
x2&
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 1&
b11000000000100000000000101000000000110000000000111 0&
bx /&
b1 .&
bx -&
bx ,&
bx +&
bx *&
bx )&
x(&
bx '&
bx &&
bx %&
bx $&
bx #&
bx "&
x!&
bx ~%
bx }%
bx |%
bx {%
bx z%
bx y%
bx x%
bx w%
bx v%
xu%
xt%
bx s%
bx r%
0q%
bx p%
bx o%
b101 n%
bx m%
xl%
bx k%
bx j%
xi%
b100001010010000101100110011001101000001100101110101110000101001010000100100011100001010001111010000000000000000000000000000000001000010101011100011100001010010 h%
b11000000000100000000000101000000000110000000000111 g%
bx f%
b0 e%
bx d%
bx c%
bx b%
bx a%
bx `%
x_%
bx ^%
bx ]%
bx \%
bx [%
bx Z%
bx Y%
xX%
bx W%
bx V%
bx U%
bx T%
bx S%
bx R%
bx Q%
bx P%
bx O%
xN%
xM%
bx L%
bx K%
0J%
bx I%
bx H%
bx G%
bx F%
b1001 E%
b1000001000110100001010001111011 D%
bx C%
bx B%
bx A%
bx @%
bx ?%
x>%
bx =%
bx <%
b1001 ;%
b1000001000110100001010001111011 :%
b10 9%
bx 8%
bx 7%
bx 6%
bx 5%
bx 4%
x3%
bx 2%
bx 1%
bx 0%
bx /%
bx .%
bx -%
x,%
bx +%
bx *%
bx )%
bx (%
bx '%
bx &%
bx %%
bx $%
bx #%
x"%
x!%
bx ~$
bx }$
0|$
bx {$
bx z$
bx y$
bx x$
b1000 w$
b1000010100011100010111000010100 v$
bx u$
bx t$
bx s$
bx r$
bx q$
xp$
bx o$
bx n$
b1000 m$
b1000010100011100010111000010100 l$
b10 k$
bx j$
bx i$
bx h$
bx g$
bx f$
xe$
bx d$
bx c$
bx b$
bx a$
bx `$
bx _$
x^$
bx ]$
bx \$
bx [$
bx Z$
bx Y$
bx X$
bx W$
bx V$
bx U$
xT$
xS$
bx R$
bx Q$
0P$
bx O$
bx N$
bx M$
bx L$
b111 K$
b1000010000100100001010001111011 J$
bx I$
bx H$
bx G$
bx F$
bx E$
xD$
bx C$
bx B$
b111 A$
b1000010000100100001010001111011 @$
b10 ?$
bx >$
bx =$
bx <$
bx ;$
bx :$
x9$
bx 8$
bx 7$
bx 6$
bx 5$
bx 4$
bx 3$
x2$
bx 1$
bx 0$
bx /$
bx .$
bx -$
bx ,$
bx +$
bx *$
bx )$
x($
x'$
bx &$
bx %$
0$$
bx #$
bx "$
bx !$
bx ~#
b110 }#
b1000001011001011110101110000101 |#
bx {#
bx z#
bx y#
bx x#
bx w#
xv#
bx u#
bx t#
b110 s#
b1000001011001011110101110000101 r#
b10 q#
bx p#
bx o#
bx n#
bx m#
bx l#
xk#
bx j#
bx i#
bx h#
bx g#
bx f#
bx e#
xd#
bx c#
bx b#
bx a#
bx `#
bx _#
bx ^#
bx ]#
bx \#
bx [#
xZ#
xY#
bx X#
bx W#
0V#
bx U#
bx T#
bx S#
bx R#
b101 Q#
b1000010100111011110101110000101 P#
bx O#
bx N#
bx M#
bx L#
bx K#
xJ#
bx I#
bx H#
b101 G#
b1000010100111011110101110000101 F#
b10 E#
bx D#
bx C#
bx B#
bx A#
bx @#
x?#
bx >#
bx =#
bx <#
bx ;#
bx :#
bx 9#
x8#
bx 7#
bx 6#
bx 5#
bx 4#
bx 3#
bx 2#
bx 1#
bx 0#
bx /#
x.#
x-#
bx ,#
bx +#
0*#
bx )#
bx (#
bx '#
bx &#
b100 %#
b1000010101011101011100001010010 $#
bx ##
bx "#
bx !#
bx ~"
bx }"
x|"
bx {"
bx z"
b100 y"
b1000010101011101011100001010010 x"
b10 w"
bx v"
bx u"
bx t"
bx s"
bx r"
xq"
bx p"
bx o"
bx n"
bx m"
bx l"
bx k"
xj"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
x`"
x_"
bx ^"
bx ]"
0\"
bx ["
bx Z"
bx Y"
bx X"
b11 W"
b1000010001010001011100001010010 V"
bx U"
bx T"
bx S"
bx R"
bx Q"
xP"
bx O"
bx N"
b11 M"
b1000010001010001011100001010010 L"
b10 K"
bx J"
bx I"
bx H"
bx G"
bx F"
xE"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
x>"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
x4"
x3"
bx 2"
bx 1"
00"
bx /"
bx ."
bx -"
bx ,"
b10 +"
b1000000101101110101110000101001 *"
bx )"
bx ("
bx '"
bx &"
bx %"
x$"
bx #"
bx ""
b10 !"
b1000000101101110101110000101001 ~
b10 }
bx |
bx {
bx z
bx y
bx x
xw
bx v
bx u
bx t
bx s
bx r
bx q
xp
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
xf
xe
bx d
bx c
0b
bx a
bx `
bx _
bx ^
b1 ]
b1000010100000000110101110000101 \
bx [
bx Z
bx Y
bx X
bx W
xV
bx U
bx T
b1 S
b1000010100000000110101110000101 R
b10 Q
bx P
bx O
bx N
bx M
bx L
xK
bx J
bx I
bx H
bx G
bx F
bx E
xD
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
x:
x9
bx 8
bx 7
06
bx 5
bx 4
bx 3
bx 2
b0 1
b1000001110111101011100001010010 0
bx /
bx .
bx -
bx ,
bx +
x*
bx )
bx (
b0 '
b1000001110111101011100001010010 &
b10 %
b10 $
0#
b0 "
0!
$end
#40
b1 "
1!
#80
0!
#120
b10 "
1!
#160
0!
#200
b11 "
1!
#240
0!
#280
b1000010100100001011001100110011 %*
b10000101 0*
b10000101 7*
b0 9*
b1100100001011001100110011 $*
b1100100001011001100110011 8*
b1000010100100001011001100110011 `*
b10000101 k*
b10000101 r*
b0 t*
b1100100001011001100110011 _*
b1100100001011001100110011 s*
b1000001010111000110011001101000 '+
b10000010 2+
b10000010 9+
b10 ;+
b110111000110011001101000 &+
b110111000110011001101000 :+
b1000001010111000110011001101000 b+
b10000010 m+
b10000010 t+
b10 v+
b110111000110011001101000 a+
b110111000110011001101000 u+
b111110100011001100110011010000 ),
b1111101 4,
b1111101 ;,
b11 =,
b100011001100110011010000 (,
b100011001100110011010000 <,
b111110100011001100110011010000 d,
b1111101 o,
b1111101 v,
b11 x,
b100011001100110011010000 c,
b100011001100110011010000 w,
b1000010010011011010001111011000 +-
b10000100 6-
b10000100 =-
b1 ?-
b110011011010001111011000 *-
b110011011010001111011000 >-
b1000010010011011010001111011000 f-
b10000100 q-
b10000100 x-
b1 z-
b110011011010001111011000 e-
b110011011010001111011000 y-
b1000001110000000110011001101000 -.
b10000011 8.
b10000011 ?.
b1 A.
b110000000110011001101000 ,.
b110000000110011001101000 @.
b1000001110000000110011001101000 h.
b10000011 s.
b10000011 z.
b1 |.
b110000000110011001101000 g.
b110000000110011001101000 {.
b1000001100110100111101011100010 //
b10000011 :/
b10000011 A/
b1 C/
b100110100111101011100010 ./
b100110100111101011100010 B/
b1000001100110100111101011100010 j/
b10000011 u/
b10000011 |/
b1 ~/
b100110100111101011100010 i/
b100110100111101011100010 }/
b1000010010100110100001010010000 10
b10000100 <0
b10000100 C0
b0 E0
b1110100110100001010010000 00
b1110100110100001010010000 D0
b1000010010100110100001010010000 l0
b10000100 w0
b10000100 ~0
b0 "1
b1110100110100001010010000 k0
b1110100110100001010010000 !1
b1000001000000110101110000101010 31
b10000010 >1
b10000010 E1
b1 G1
b100000110101110000101010 21
b100000110101110000101010 F1
b1000001000000110101110000101010 n1
b10000010 y1
b10000010 "2
b1 $2
b100000110101110000101010 m1
b100000110101110000101010 #2
b111111111100000000000000000000 52
b1111111 @2
b1111111 G2
b101 I2
b111100000000000000000000 42
b111100000000000000000000 H2
b111111111100000000000000000000 p2
b1111111 {2
b1111111 $3
b101 &3
b111100000000000000000000 o2
b111100000000000000000000 %3
b1000010011111000100110011001110 73
b10000100 B3
b10000100 I3
b1 K3
b111111000100110011001110 63
b111111000100110011001110 J3
b1000010011111000100110011001110 r3
b10000100 }3
b10000100 &4
b1 (4
b111111000100110011001110 q3
b111111000100110011001110 '4
b1100100001011001100110011 '*
b1100100001011001100110011 6*
b1100100001011001100110011 b*
b1100100001011001100110011 q*
b1001101110001100110011010 )+
b1001101110001100110011010 8+
b1001101110001100110011010 d+
b1001101110001100110011010 s+
b1000100011001100110011010 +,
b1000100011001100110011010 :,
b1000100011001100110011010 f,
b1000100011001100110011010 u,
b1011001101101000111101100 --
b1011001101101000111101100 <-
b1011001101101000111101100 h-
b1011001101101000111101100 w-
b1011000000011001100110100 /.
b1011000000011001100110100 >.
b1011000000011001100110100 j.
b1011000000011001100110100 y.
b1010011010011110101110001 1/
b1010011010011110101110001 @/
b1010011010011110101110001 l/
b1010011010011110101110001 {/
b1110100110100001010010000 30
b1110100110100001010010000 B0
b1110100110100001010010000 n0
b1110100110100001010010000 }0
b1010000011010111000010101 51
b1010000011010111000010101 D1
b1010000011010111000010101 p1
b1010000011010111000010101 !2
b1000001111000000000000000 72
b1000001111000000000000000 F2
b1000001111000000000000000 r2
b1000001111000000000000000 #3
b1011111100010011001100111 93
b1011111100010011001100111 H3
b1011111100010011001100111 t3
b1011111100010011001100111 %4
b111001000010100011110110 &*
b111001000010100011110110 a*
0x)
1Y*
b11111111001010001111011 (+
b11111111001010001111011 c+
0z*
1[+
b10010001010001111010111 *,
b10010001010001111010111 e,
0|+
1],
b110101011101000111101100 ,-
b110101011101000111101100 g-
0~,
1_-
b101100010111101011100010 ..
b101100010111101011100010 i.
1".
0a.
b11000100001010001111011 0/
b11000100001010001111011 k/
0$/
1c/
b111000110100001010010000 20
b111000110100001010010000 m0
0&0
1e0
b101011111001100110011010 41
b101011111001100110011010 o1
1(1
0g1
b11100011101000111101100 62
b11100011101000111101100 q2
0*2
1i2
b111101100101111010111001 83
b111101100101111010111001 s3
0,3
1k3
b11000010100100001011001100110011 w)
b11000010100100001011001100110011 ,*
b11000010100100001011001100110011 W*
b11000010100100001011001100110011 g*
b11000001010111000110011001101000 y*
b11000001010111000110011001101000 .+
b11000001010111000110011001101000 Y+
b11000001010111000110011001101000 i+
b10111110100011001100110011010000 {+
b10111110100011001100110011010000 0,
b10111110100011001100110011010000 [,
b10111110100011001100110011010000 k,
b11000010010011011010001111011000 },
b11000010010011011010001111011000 2-
b11000010010011011010001111011000 ]-
b11000010010011011010001111011000 m-
b1000001110000000110011001101000 !.
b1000001110000000110011001101000 4.
b1000001110000000110011001101000 _.
b1000001110000000110011001101000 o.
b11000001100110100111101011100010 #/
b11000001100110100111101011100010 6/
b11000001100110100111101011100010 a/
b11000001100110100111101011100010 q/
b11000010010100110100001010010000 %0
b11000010010100110100001010010000 80
b11000010010100110100001010010000 c0
b11000010010100110100001010010000 s0
b1000001000000110101110000101010 '1
b1000001000000110101110000101010 :1
b1000001000000110101110000101010 e1
b1000001000000110101110000101010 u1
b10111111111100000000000000000000 )2
b10111111111100000000000000000000 <2
b10111111111100000000000000000000 g2
b10111111111100000000000000000000 w2
b11000010011111000100110011001110 +3
b11000010011111000100110011001110 >3
b11000010011111000100110011001110 i3
b11000010011111000100110011001110 y3
b110111101011100001010 (*
1-*
b10000101 2*
b11 1*
1#*
b110111101011100001010 c*
1h*
b10000101 m*
b11 l*
1^*
1%+
1`+
1',
1b,
b1010100010111000010100 .-
13-
b10000101 8-
b10 7-
1)-
b1010100010111000010100 i-
1n-
b10000101 s-
b10 r-
1d-
b10011101000010100011110 0.
15.
b10000100 :.
b1 9.
0+.
b10011101000010100011110 k.
1p.
b10000100 u.
b1 t.
0f.
1-/
1h/
b111001011110101110000 40
190
b10000100 >0
b11 =0
1/0
b111001011110101110000 o0
1t0
b10000100 y0
b11 x0
1j0
b10100000110011001100110 61
1;1
b10000011 @1
b1 ?1
011
b10100000110011001100110 q1
1v1
b10000011 {1
b1 z1
0l1
132
1n2
b10011010000101000111 :3
1?3
b10000101 D3
b100 C3
153
b10011010000101000111 u3
1z3
b10000101 !4
b100 ~3
1p3
14*
1o*
16+
b100000000110101110000101 *+
1/+
b10000100 4+
b0 3+
1q+
b100000000110101110000101 e+
1j+
b10000100 o+
b0 n+
18,
b101101110101110000101001 ,,
11,
b10000000 6,
b0 5,
1s,
b101101110101110000101001 g,
1l,
b10000000 q,
b0 p,
1:-
1u-
0<.
0w.
1>/
b100111011110101110000101 2/
17/
b10000100 </
b0 ;/
1y/
b100111011110101110000101 m/
1r/
b10000100 w/
b0 v/
1@0
1{0
0B1
0}1
1D2
b100011100010111000010100 82
1=2
b10000100 B2
b0 A2
1!3
b100011100010111000010100 s2
1x2
b10000100 }2
b0 |2
1F3
1#4
b110111101011100001010010 )*
b101011001000101000111101 +*
b110111101011100001010010 d*
b101011001000101000111101 f*
b100000000110101110000101 ++
b101101111000010100011111 -+
b100000000110101110000101 f+
b101101111000010100011111 h+
b101101110101110000101001 -,
b110010001111010111000011 /,
b101101110101110000101001 h,
b110010001111010111000011 j,
b101010001011100001010010 /-
b100100010000000000000000 1-
b101010001011100001010010 j-
b100100010000000000000000 l-
b100111010000101000111101 1.
b101011101011100001010010 3.
b100111010000101000111101 l.
b101011101011100001010010 n.
b100111011110101110000101 3/
b111010110010100011110110 5/
b100111011110101110000101 n/
b111010110010100011110110 p/
b111001011110101110000101 50
b111100000000000000000000 70
b111001011110101110000101 p0
b111100000000000000000000 r0
b101000001100110011001101 71
b100100100001010001111011 91
b101000001100110011001101 r1
b100100100001010001111011 t1
b100011100010111000010100 92
b100101011010111000010100 ;2
b100011100010111000010100 t2
b100101011010111000010100 v2
b100110100001010001111011 ;3
b100001111100011110101110 =3
b100110100001010001111011 v3
b100001111100011110101110 x3
0s)
0X*
0u*
0Z+
0w+
0\,
0y,
0^-
0{-
0`.
0}.
0b/
0!0
0d0
0#1
0f1
0%2
0h2
0'3
0j3
b10000101 5*
b10000101 p*
b10000100 7+
b10000100 r+
b10000000 9,
b10000000 t,
b10000101 ;-
b10000101 v-
b10000100 =.
b10000100 x.
b10000100 ?/
b10000100 z/
b10000100 A0
b10000100 |0
b10000011 C1
b10000011 ~1
b10000100 E2
b10000100 "3
b10000101 G3
b10000101 $4
b1000010100000000000000000000000 3*
b1000010100000000000000000000000 n*
b1000010000000000000000000000000 5+
b1000010000000000000000000000000 p+
b1000000000000000000000000000000 7,
b1000000000000000000000000000000 r,
b1000010100000000000000000000000 9-
b1000010100000000000000000000000 t-
b1000010000000000000000000000000 ;.
b1000010000000000000000000000000 v.
b1000010000000000000000000000000 =/
b1000010000000000000000000000000 x/
b1000010000000000000000000000000 ?0
b1000010000000000000000000000000 z0
b1000001100000000000000000000000 A1
b1000001100000000000000000000000 |1
b1000010000000000000000000000000 C2
b1000010000000000000000000000000 ~2
b1000010100000000000000000000000 E3
b1000010100000000000000000000000 "4
b0 **
b0 e*
b0 ,+
b0 g+
b0 .,
b0 i,
b0 0-
b0 k-
b0 2.
b0 m.
b0 4/
b0 o/
b0 60
b0 q0
b0 81
b0 s1
b0 :2
b0 u2
b0 <3
b0 w3
b1000001001000010100011110101110 @*
b10000010 K*
b10000010 R*
b0 T*
b1001000010100011110101110 ?*
b1001000010100011110101110 S*
b110111101011100001010010 E*
0"*
0]*
b1000010011111111001010001111011 B+
b10000100 M+
b10000100 T+
b0 V+
b1011111111001010001111011 A+
b1011111111001010001111011 U+
b100000000110101110000101 G+
0$+
0_+
b1000000010010001010001111010111 D,
b10000000 O,
b10000000 V,
b0 X,
b1010010001010001111010111 C,
b1010010001010001111010111 W,
b101101110101110000101001 I,
0&,
0a,
b1000001110101110100011110101110 F-
b10000011 Q-
b10000011 X-
b0 Z-
b1010101110100011110101110 E-
b1010101110100011110101110 Y-
b101010001011100001010010 K-
0(-
0c-
b1000010010100010100011110101110 H.
b10000100 S.
b10000100 Z.
b0 \.
b1010100010100011110101110 G.
b1010100010100011110101110 [.
b101011101011100001010010 M.
0*.
0e.
b1000010011000100001010001111011 J/
b10000100 U/
b10000100 \/
b0 ^/
b1011000100001010001111011 I/
b1011000100001010001111011 ]/
b100111011110101110000101 O/
0,/
0g/
b1000000100110100001010001111011 L0
b10000001 W0
b10000001 ^0
b0 `0
b1000110100001010001111011 K0
b1000110100001010001111011 _0
b111001011110101110000101 Q0
0.0
0i0
b1000001111011011110101110000101 N1
b10000011 Y1
b10000011 `1
b0 b1
b1011011011110101110000101 M1
b1011011011110101110000101 a1
b100100100001010001111011 S1
001
0k1
b1000010011100011101000111101100 P2
b10000100 [2
b10000100 b2
b0 d2
b1011100011101000111101100 O2
b1011100011101000111101100 c2
b100011100010111000010100 U2
022
0m2
b1000000111001011110101110000101 R3
b10000001 ]3
b10000001 d3
b0 f3
b1011001011110101110000101 Q3
b1011001011110101110000101 e3
b100110100001010001111011 W3
043
0o3
b110111101011100001010010 B*
b110111101011100001010010 Q*
b1000001010111101011100001010010 N*
b100000000110101110000101 D+
b100000000110101110000101 S+
b1000010000000000110101110000101 P+
b101101110101110000101001 F,
b101101110101110000101001 U,
b1000000001101110101110000101001 R,
b101010001011100001010010 H-
b101010001011100001010010 W-
b1000001101010001011100001010010 T-
b101011101011100001010010 J.
b101011101011100001010010 Y.
b1000010001011101011100001010010 V.
b100111011110101110000101 L/
b100111011110101110000101 [/
b1000010000111011110101110000101 X/
b111001011110101110000101 N0
b111001011110101110000101 ]0
b1000000111001011110101110000101 Z0
b100100100001010001111011 P1
b100100100001010001111011 _1
b1000001100100100001010001111011 \1
b100011100010111000010100 R2
b100011100010111000010100 a2
b1000010000011100010111000010100 ^2
b100110100001010001111011 T3
b100110100001010001111011 c3
b1000000100110100001010001111011 `3
b0 C*
1H*
b10000010 M*
b10000010 L*
b0 D*
b110111101011100001010010 F*
b1000001010111101011100001010010 .*
b1000010101011001000101000111101 /*
b1000001010111101011100001010010 i*
b1000010101011001000101000111101 j*
b0 E+
1J+
b10000100 O+
b10000100 N+
b0 F+
b100000000110101110000101 H+
b1000010000000000110101110000101 0+
b1000010001101111000010100011111 1+
b1000010000000000110101110000101 k+
b1000010001101111000010100011111 l+
b0 G,
1L,
b10000000 Q,
b10000000 P,
b0 H,
b101101110101110000101001 J,
b1000000001101110101110000101001 2,
b1000000010010001111010111000011 3,
b1000000001101110101110000101001 m,
b1000000010010001111010111000011 n,
b0 I-
1N-
b10000011 S-
b10000011 R-
b0 J-
b101010001011100001010010 L-
b1000001101010001011100001010010 4-
b1000010100100010000000000000000 5-
b1000001101010001011100001010010 o-
b1000010100100010000000000000000 p-
b0 K.
1P.
b10000100 U.
b10000100 T.
b0 L.
b101011101011100001010010 N.
b1000001100111010000101000111101 6.
b1000010001011101011100001010010 7.
b1000001100111010000101000111101 q.
b1000010001011101011100001010010 r.
b0 M/
1R/
b10000100 W/
b10000100 V/
b0 N/
b100111011110101110000101 P/
b1000010000111011110101110000101 8/
b1000010011010110010100011110110 9/
b1000010000111011110101110000101 s/
b1000010011010110010100011110110 t/
b0 O0
1T0
b10000001 Y0
b10000001 X0
b0 P0
b111001011110101110000101 R0
b1000000111001011110101110000101 :0
b1000010011100000000000000000000 ;0
b1000000111001011110101110000101 u0
b1000010011100000000000000000000 v0
b0 Q1
1V1
b10000011 [1
b10000011 Z1
b0 R1
b100100100001010001111011 T1
b1000001001000001100110011001101 <1
b1000001100100100001010001111011 =1
b1000001001000001100110011001101 w1
b1000001100100100001010001111011 x1
b0 S2
1X2
b10000100 ]2
b10000100 \2
b0 T2
b100011100010111000010100 V2
b1000010000011100010111000010100 >2
b1000010000101011010111000010100 ?2
b1000010000011100010111000010100 y2
b1000010000101011010111000010100 z2
b0 U3
1Z3
b10000001 _3
b10000001 ^3
b0 V3
b100110100001010001111011 X3
b1000000100110100001010001111011 @3
b1000010100001111100011110101110 A3
b1000000100110100001010001111011 {3
b1000010100001111100011110101110 |3
1O*
b0 A*
1Q+
b0 C+
1S,
b0 E,
1U-
b0 G-
1W.
b0 I.
1Y/
b0 K/
1[0
b0 M0
1]1
b0 O1
1_2
b0 Q2
1a3
b0 S3
b1000001010111101011100001010010 )
b1000001010111101011100001010010 {)
0|)
b1000001010111101011100001010010 z)
b1000001010111101011100001010010 ~)
b1000001010111101011100001010010 U*
b1000001010111101011100001010010 [*
b1000010000000000110101110000101 U
b1000010000000000110101110000101 }*
0~*
b1000010000000000110101110000101 |*
b1000010000000000110101110000101 "+
b1000010000000000110101110000101 W+
b1000010000000000110101110000101 ]+
b1000000001101110101110000101001 #"
b1000000001101110101110000101001 !,
0",
b1000000001101110101110000101001 ~+
b1000000001101110101110000101001 $,
b1000000001101110101110000101001 Y,
b1000000001101110101110000101001 _,
b1000001101010001011100001010010 O"
b1000001101010001011100001010010 #-
0$-
b1000001101010001011100001010010 "-
b1000001101010001011100001010010 &-
b1000001101010001011100001010010 [-
b1000001101010001011100001010010 a-
b1000001110000000110011001101000 {"
b1000001110000000110011001101000 %.
1&.
b1000010001011101011100001010010 $.
b1000010001011101011100001010010 (.
b1000010001011101011100001010010 ].
b1000010001011101011100001010010 c.
b1000010000111011110101110000101 I#
b1000010000111011110101110000101 '/
0(/
b1000010000111011110101110000101 &/
b1000010000111011110101110000101 */
b1000010000111011110101110000101 _/
b1000010000111011110101110000101 e/
b1000000111001011110101110000101 u#
b1000000111001011110101110000101 )0
0*0
b1000000111001011110101110000101 (0
b1000000111001011110101110000101 ,0
b1000000111001011110101110000101 a0
b1000000111001011110101110000101 g0
b1000001000000110101110000101010 C$
b1000001000000110101110000101010 +1
1,1
b1000001100100100001010001111011 *1
b1000001100100100001010001111011 .1
b1000001100100100001010001111011 c1
b1000001100100100001010001111011 i1
b1000010000011100010111000010100 o$
b1000010000011100010111000010100 -2
0.2
b1000010000011100010111000010100 ,2
b1000010000011100010111000010100 02
b1000010000011100010111000010100 e2
b1000010000011100010111000010100 k2
b1000000100110100001010001111011 =%
b1000000100110100001010001111011 /3
003
b1000000100110100001010001111011 .3
b1000000100110100001010001111011 23
b1000000100110100001010001111011 g3
b1000000100110100001010001111011 m3
b1000001010111101011100001010010 y)
b1000001010111101011100001010010 G*
1=*
b10000010 P*
b1000010000000000110101110000101 {*
b1000010000000000110101110000101 I+
1?+
b10000100 R+
b1000000001101110101110000101001 }+
b1000000001101110101110000101001 K,
1A,
b10000000 T,
b1000001101010001011100001010010 !-
b1000001101010001011100001010010 M-
1C-
b10000011 V-
b1000010001011101011100001010010 #.
b1000010001011101011100001010010 O.
1E.
b10000100 X.
b1000010000111011110101110000101 %/
b1000010000111011110101110000101 Q/
1G/
b10000100 Z/
b1000000111001011110101110000101 '0
b1000000111001011110101110000101 S0
1I0
b10000001 \0
b1000001100100100001010001111011 )1
b1000001100100100001010001111011 U1
1K1
b10000011 ^1
b1000010000011100010111000010100 +2
b1000010000011100010111000010100 W2
1M2
b10000100 `2
b1000000100110100001010001111011 -3
b1000000100110100001010001111011 Y3
1O3
b10000001 b3
0>*
0@+
0B,
0D-
0F.
0H/
0J0
0L1
0N2
0P3
b0 w%
b0 $&
b0 +&
b0 -&
b0 v%
b0 ,&
b0 I*
b1000001010111101011100001010010 J*
b0 @&
b0 K&
b0 R&
b0 T&
b0 ?&
b0 S&
b0 K+
b1000010000000000110101110000101 L+
b0 g&
b0 r&
b0 y&
b0 {&
b0 f&
b0 z&
b0 M,
b1000000001101110101110000101001 N,
b0 0'
b0 ;'
b0 B'
b0 D'
b0 /'
b0 C'
b0 O-
b1000001101010001011100001010010 P-
b0 W'
b0 b'
b0 i'
b0 k'
b0 V'
b0 j'
b0 Q.
b1000010001011101011100001010010 R.
b0 ~'
b0 +(
b0 2(
b0 4(
b0 }'
b0 3(
b0 S/
b1000010000111011110101110000101 T/
b0 G(
b0 R(
b0 Y(
b0 [(
b0 F(
b0 Z(
b0 U0
b1000000111001011110101110000101 V0
b0 n(
b0 y(
b0 ")
b0 $)
b0 m(
b0 #)
b0 W1
b1000001100100100001010001111011 X1
b0 7)
b0 B)
b0 I)
b0 K)
b0 6)
b0 J)
b0 Y2
b1000010000011100010111000010100 Z2
b0 ^)
b0 i)
b0 p)
b0 r)
b0 ])
b0 q)
b0 [3
b1000000100110100001010001111011 \3
b0 y%
b0 *&
b0 B&
b0 Q&
b0 i&
b0 x&
b0 2'
b0 A'
b0 Y'
b0 h'
b0 "(
b0 1(
b0 I(
b0 X(
b0 p(
b0 !)
b0 9)
b0 H)
b0 `)
b0 o)
b0 x%
b0 p%
b0 u)
b0 ;*
b0 A&
b0 9&
b0 w*
b0 =+
b0 h&
b0 `&
b0 y+
b0 ?,
b0 1'
b0 )'
b0 {,
b0 A-
b0 X'
b0 P'
b0 }-
b0 C.
b0 !(
b0 w'
b0 !/
b0 E/
b0 H(
b0 @(
b0 #0
b0 G0
b0 o(
b0 g(
b0 %1
b0 I1
b0 8)
b0 0)
b0 '2
b0 K2
b0 _)
b0 W)
b0 )3
b0 M3
b0 |%
b0 j%
b0 ~%
1t%
b0 E&
b0 3&
b0 G&
1=&
b0 l&
b0 Z&
b0 n&
1d&
b0 5'
b0 #'
b0 7'
1-'
b0 \'
b0 J'
b0 ^'
1T'
b0 %(
b0 q'
b0 '(
1{'
b0 L(
b0 :(
b0 N(
1D(
b0 s(
b0 a(
b0 u(
1k(
b0 <)
b0 *)
b0 >)
14)
b0 c)
b0 Q)
b0 e)
1[)
b0 z%
b0 {%
0i%
b0 }%
b0 '&
b0 C&
b0 D&
02&
b0 F&
b0 N&
b0 j&
b0 k&
0Y&
b0 m&
b0 u&
b0 3'
b0 4'
0"'
b0 6'
b0 >'
b0 Z'
b0 ['
0I'
b0 ]'
b0 e'
b0 #(
b0 $(
0p'
b0 &(
b0 .(
b0 J(
b0 K(
09(
b0 M(
b0 U(
b0 q(
b0 r(
0`(
b0 t(
b0 |(
b0 :)
b0 ;)
0))
b0 =)
b0 E)
b0 a)
b0 b)
0P)
b0 d)
b0 l)
0(&
1!&
b0 &&
b0 %&
0u%
b0 )&
0O&
1H&
b0 M&
b0 L&
0>&
b0 P&
0v&
1o&
b0 t&
b0 s&
0e&
b0 w&
0?'
18'
b0 ='
b0 <'
0.'
b0 @'
0f'
1_'
b0 d'
b0 c'
0U'
b0 g'
0/(
1((
b0 -(
b0 ,(
0|'
b0 0(
0V(
1O(
b0 T(
b0 S(
0E(
b0 W(
0}(
1v(
b0 {(
b0 z(
0l(
b0 ~(
0F)
1?)
b0 D)
b0 C)
05)
b0 G)
0m)
1f)
b0 k)
b0 j)
0\)
b0 n)
b0 "&
b0 #&
b0 I&
b0 J&
b0 p&
b0 q&
b0 9'
b0 :'
b0 `'
b0 a'
b0 )(
b0 *(
b0 P(
b0 Q(
b0 w(
b0 x(
b0 @)
b0 A)
b0 g)
b0 h)
b1000001010111101011100001010010 0
b1000001010111101011100001010010 4
b1000001010111101011100001010010 t)
b1000001010111101011100001010010 <*
b10000010 +
b10111101011100001010010 /
b10000011 ,
b0 5
b1000010000000000110101110000101 \
b1000010000000000110101110000101 `
b1000010000000000110101110000101 v*
b1000010000000000110101110000101 >+
b10000100 W
b110101110000101 [
b10000101 X
b0 a
b1000000001101110101110000101001 *"
b1000000001101110101110000101001 ."
b1000000001101110101110000101001 x+
b1000000001101110101110000101001 @,
b10000000 %"
b1101110101110000101001 )"
b10000001 &"
b0 /"
b1000001101010001011100001010010 V"
b1000001101010001011100001010010 Z"
b1000001101010001011100001010010 z,
b1000001101010001011100001010010 B-
b10000011 Q"
b1010001011100001010010 U"
b10000100 R"
b0 ["
b1000001110000000110011001101000 $#
b1000010001011101011100001010010 (#
b1000010001011101011100001010010 |-
b1000010001011101011100001010010 D.
b10000100 }"
b1011101011100001010010 ##
b10000101 ~"
b0 )#
b1000010000111011110101110000101 P#
b1000010000111011110101110000101 T#
b1000010000111011110101110000101 ~.
b1000010000111011110101110000101 F/
b10000100 K#
b111011110101110000101 O#
b10000101 L#
b0 U#
b1000000111001011110101110000101 |#
b1000000111001011110101110000101 "$
b1000000111001011110101110000101 "0
b1000000111001011110101110000101 H0
b10000001 w#
b11001011110101110000101 {#
b10000010 x#
b0 #$
b1000001000000110101110000101010 J$
b1000001100100100001010001111011 N$
b1000001100100100001010001111011 $1
b1000001100100100001010001111011 J1
b10000011 E$
b100100001010001111011 I$
b10000100 F$
b0 O$
b1000010000011100010111000010100 v$
b1000010000011100010111000010100 z$
b1000010000011100010111000010100 &2
b1000010000011100010111000010100 L2
b10000100 q$
b11100010111000010100 u$
b10000101 r$
b0 {$
b1000000100110100001010001111011 D%
b1000000100110100001010001111011 H%
b1000000100110100001010001111011 (3
b1000000100110100001010001111011 N3
b10000001 ?%
b110100001010001111011 C%
b10000010 @%
b0 I%
b0 m%
b0 s%
b0 k%
b0 r%
b101 n%
b0 6&
b0 <&
b0 4&
b0 ;&
b101 7&
b0 ]&
b0 c&
b0 [&
b0 b&
b101 ^&
b0 &'
b0 ,'
b0 $'
b0 +'
b101 ''
b0 M'
b0 S'
b0 K'
b0 R'
b101 N'
b0 t'
b0 z'
b0 r'
b0 y'
b101 u'
b0 =(
b0 C(
b0 ;(
b0 B(
b101 >(
b0 d(
b0 j(
b0 b(
b0 i(
b101 e(
b0 -)
b0 3)
b0 +)
b0 2)
b101 .)
b0 T)
b0 Z)
b0 R)
b0 Y)
b101 U)
1#
b0 "
1!
#320
0!
#360
0#
b1 "
1!
#400
b0 O'
b101 N'
0L'
b0 ?(
b101 >(
0<(
0!
b1 F'
b11 6(
#440
b10 "
1!
#480
0!
#520
b11 "
1!
#560
0!
#600
b11000010100111101001111010111000 w)
b11000010100111101001111010111000 ,*
b11000010100111101001111010111000 W*
b11000010100111101001111010111000 g*
b11000010011101111101000111101100 },
b11000010011101111101000111101100 2-
b11000010011101111101000111101100 ]-
b11000010011101111101000111101100 m-
b11000010011000011010000101001000 %0
b11000010011000011010000101001000 80
b11000010011000011010000101001000 c0
b11000010011000011010000101001000 s0
b11000001111011101001111010111010 y*
b11000001111011101001111010111010 .+
b11000001111011101001111010111010 Y+
b11000001111011101001111010111010 i+
b10111111110110101000111101011110 {+
b10111111110110101000111101011110 0,
b10111111110110101000111101011110 [,
b10111111110110101000111101011110 k,
b11000010000111000011001100110100 #/
b11000010000111000011001100110100 6/
b11000010000111000011001100110100 a/
b11000010000111000011001100110100 q/
b11000001100111010010111000010100 )2
b11000001100111010010111000010100 <2
b11000001100111010010111000010100 g2
b11000001100111010010111000010100 w2
b11000010100000101111011100001011 +3
b11000010100000101111011100001011 >3
b11000010100000101111011100001011 i3
b11000010100000101111011100001011 y3
b1000010100111101001111010111000 %*
b1000010100111101001111010111000 `*
b1000010011101111101000111101100 +-
b1000010011101111101000111101100 f-
b1000010011000011010000101001000 10
b1000010011000011010000101001000 l0
b1100111101001111010111000 $*
b1100111101001111010111000 8*
b1100111101001111010111000 _*
b1100111101001111010111000 s*
b1000001111011101001111010111010 '+
b10000011 2+
b10000011 9+
b1 ;+
b111011101001111010111010 &+
b111011101001111010111010 :+
b1000001111011101001111010111010 b+
b10000011 m+
b10000011 t+
b1 v+
b111011101001111010111010 a+
b111011101001111010111010 u+
b111111110110101000111101011110 ),
b1111111 4,
b1111111 ;,
b1 =,
b110110101000111101011110 (,
b110110101000111101011110 <,
b111111110110101000111101011110 d,
b1111111 o,
b1111111 v,
b1 x,
b110110101000111101011110 c,
b110110101000111101011110 w,
b111101111101000111101100 *-
b111101111101000111101100 >-
b111101111101000111101100 e-
b111101111101000111101100 y-
0&.
0".
1a.
b1000010000111000011001100110100 //
b10000100 :/
b10000100 A/
b0 C/
b1100111000011001100110100 ./
b1100111000011001100110100 B/
b1000010000111000011001100110100 j/
b10000100 u/
b10000100 |/
b0 ~/
b1100111000011001100110100 i/
b1100111000011001100110100 }/
b1111000011010000101001000 00
b1111000011010000101001000 D0
b1111000011010000101001000 k0
b1111000011010000101001000 !1
0,1
0(1
1g1
b1000001100111010010111000010100 52
b10000011 @2
b10000011 G2
b1 I2
b100111010010111000010100 42
b100111010010111000010100 H2
b1000001100111010010111000010100 p2
b10000011 {2
b10000011 $3
b1 &3
b100111010010111000010100 o2
b100111010010111000010100 %3
b1000010100000101111011100001011 73
b10000101 B3
b10000101 I3
b0 K3
b1100000101111011100001011 63
b1100000101111011100001011 J3
b1000010100000101111011100001011 r3
b10000101 }3
b10000101 &4
b0 (4
b1100000101111011100001011 q3
b1100000101111011100001011 '4
b1100111101001111010111000 '*
b1100111101001111010111000 6*
b1100111101001111010111000 b*
b1100111101001111010111000 q*
b1011101110100111101011101 )+
b1011101110100111101011101 8+
b1011101110100111101011101 d+
b1011101110100111101011101 s+
b1011011010100011110101111 +,
b1011011010100011110101111 :,
b1011011010100011110101111 f,
b1011011010100011110101111 u,
b1011110111110100011110110 --
b1011110111110100011110110 <-
b1011110111110100011110110 h-
b1011110111110100011110110 w-
b10 A.
b111100110101110000100100 ,.
b111100110101110000100100 @.
b1000001010000000110011001101000 {"
b1000001010000000110011001101000 %.
b10 |.
b111100110101110000100100 g.
b111100110101110000100100 {.
b1100111000011001100110100 1/
b1100111000011001100110100 @/
b1100111000011001100110100 l/
b1100111000011001100110100 {/
b1111000011010000101001000 30
b1111000011010000101001000 B0
b1111000011010000101001000 n0
b1111000011010000101001000 }0
b1 G1
b101111100011110101110000 21
b101111100011110101110000 F1
b1000000100000110101110000101010 C$
b1000000100000110101110000101010 +1
b1 $2
b101111100011110101110000 m1
b101111100011110101110000 #2
b1010011101001011100001010 72
b1010011101001011100001010 F2
b1010011101001011100001010 r2
b1010011101001011100001010 #3
b1100000101111011100001011 93
b1100000101111011100001011 H3
b1100000101111011100001011 t3
b1100000101111011100001011 %4
b111100100001010001111011 &*
b111100100001010001111011 a*
b101111111100101000111110 (+
b101111111100101000111110 c+
b101001000101000111101100 *,
b101001000101000111101100 e,
b111010101110100011110110 ,-
b111010101110100011110110 g-
b110000000110011001101000 1.
b100111010000101000111101 3.
b1001111001101011100001001 /.
b1001111001101011100001001 >.
b100111111100110011001100 ..
b11000000111100110101110000100100 !.
b11000000111100110101110000100100 4.
b110000000110011001101000 l.
b100111010000101000111101 n.
b1001111001101011100001001 j.
b1001111001101011100001001 y.
b100111111100110011001100 i.
b11000000111100110101110000100100 _.
b11000000111100110101110000100100 o.
b101100010000101000111110 0/
b101100010000101000111110 k/
b111100011010000101001000 20
b111100011010000101001000 m0
b100000110101110000101010 71
b101000001100110011001101 91
b1010111110001111010111000 51
b1010111110001111010111000 D1
b101111100101000111101011 41
b11000000101111100011110101110000 '1
b11000000101111100011110101110000 :1
b100000110101110000101010 r1
b101000001100110011001101 t1
b1010111110001111010111000 p1
b1010111110001111010111000 !2
b101111100101000111101011 o1
b11000000101111100011110101110000 e1
b11000000101111100011110101110000 u1
b101110001110100011110110 62
b101110001110100011110110 q2
b111110110010111101011101 83
b111110110010111101011101 s3
1+.
b1000001100000000000000000000000 ;.
1f.
b1000001100000000000000000000000 v.
111
b1000001000000000000000000000000 A1
1l1
b1000001000000000000000000000000 |1
b11011110101110000101 (*
b100 1*
1-*
b10000101 2*
b11011110101110000101 c*
b100 l*
1h*
b10000101 m*
b10000000011010111000010 *+
b1 3+
1/+
b10000100 4+
b10000000011010111000010 e+
b1 n+
1j+
b10000100 o+
b10110111010111000010100 ,,
b1 5,
11,
b10000000 6,
b10110111010111000010100 g,
b1 p,
1l,
b10000000 q,
b101010001011100001010 .-
b11 7-
13-
b10000101 8-
b101010001011100001010 i-
b11 r-
1n-
b10000101 s-
b1000001010000000110011001101000 6.
1<.
b11000000011001100110100 0.
b10000011 :.
b1 9.
15.
b1000000111100110101110000100100 -.
b10000001 8.
b10000001 ?.
b10000011 =.
b1000001010000000110011001101000 q.
1w.
b11000000011001100110100 k.
b10000011 u.
b1 t.
1p.
b1000000111100110101110000100100 h.
b10000001 s.
b10000001 z.
b10000011 x.
b10011101111010111000010 2/
b1 ;/
17/
b10000100 </
b10011101111010111000010 m/
b1 v/
1r/
b10000100 w/
b11100101111010111000 40
b100 =0
190
b10000100 >0
b11100101111010111000 o0
b100 x0
1t0
b10000100 y0
b1000000100000110101110000101010 <1
1B1
b10000011010111000010101 61
b10000010 @1
b1 ?1
1;1
b1000000101111100011110101110000 31
b10000001 >1
b10000001 E1
b10000010 C1
b1000000100000110101110000101010 w1
1}1
b10000011010111000010101 q1
b10000010 {1
b1 z1
1v1
b1000000101111100011110101110000 n1
b10000001 y1
b10000001 "2
b10000010 ~1
b10001110001011100001010 82
b1 A2
1=2
b10000100 B2
b10001110001011100001010 s2
b1 |2
1x2
b10000100 }2
b1001101000010100011 :3
b101 C3
1?3
b10000101 D3
b1001101000010100011 u3
b101 ~3
1z3
b10000101 !4
b1000000110111101011100001010010 .*
b1000000110111101011100001010010 i*
b1000001100000000110101110000101 0+
b1000001100000000110101110000101 k+
b111111101101110101110000101001 2,
b111111101101110101110000101001 m,
b1000001001010001011100001010010 4-
b1000001001010001011100001010010 o-
b1000001100111010000101000111101 7.
b1000001100111010000101000111101 r.
b1000001100111011110101110000101 8/
b1000001100111011110101110000101 s/
b1000000011001011110101110000101 :0
b1000000011001011110101110000101 u0
b1000001001000001100110011001101 =1
b1000001001000001100110011001101 x1
b1000001100011100010111000010100 >2
b1000001100011100010111000010100 y2
b1000000000110100001010001111011 @3
b1000000000110100001010001111011 {3
b1000000110111101011100001010010 )
b1000000110111101011100001010010 {)
b1000000110111101011100001010010 z)
b1000000110111101011100001010010 ~)
b1000000110111101011100001010010 U*
b1000000110111101011100001010010 [*
b1000001100000000110101110000101 U
b1000001100000000110101110000101 }*
b1000001100000000110101110000101 |*
b1000001100000000110101110000101 "+
b1000001100000000110101110000101 W+
b1000001100000000110101110000101 ]+
b111111101101110101110000101001 #"
b111111101101110101110000101001 !,
b111111101101110101110000101001 ~+
b111111101101110101110000101001 $,
b111111101101110101110000101001 Y,
b111111101101110101110000101001 _,
b1000001001010001011100001010010 O"
b1000001001010001011100001010010 #-
b1000001001010001011100001010010 "-
b1000001001010001011100001010010 &-
b1000001001010001011100001010010 [-
b1000001001010001011100001010010 a-
b1000001010000000110011001101000 $.
b1000001010000000110011001101000 (.
b1000001010000000110011001101000 ].
b1000001010000000110011001101000 c.
b1000001100111011110101110000101 I#
b1000001100111011110101110000101 '/
b1000001100111011110101110000101 &/
b1000001100111011110101110000101 */
b1000001100111011110101110000101 _/
b1000001100111011110101110000101 e/
b1000000011001011110101110000101 u#
b1000000011001011110101110000101 )0
b1000000011001011110101110000101 (0
b1000000011001011110101110000101 ,0
b1000000011001011110101110000101 a0
b1000000011001011110101110000101 g0
b1000000100000110101110000101010 *1
b1000000100000110101110000101010 .1
b1000000100000110101110000101010 c1
b1000000100000110101110000101010 i1
b1000001100011100010111000010100 o$
b1000001100011100010111000010100 -2
b1000001100011100010111000010100 ,2
b1000001100011100010111000010100 02
b1000001100011100010111000010100 e2
b1000001100011100010111000010100 k2
b1000000000110100001010001111011 =%
b1000000000110100001010001111011 /3
b1000000000110100001010001111011 .3
b1000000000110100001010001111011 23
b1000000000110100001010001111011 g3
b1000000000110100001010001111011 m3
b1000000110111101011100001010010 y)
b1000000110111101011100001010010 G*
b1000001100000000110101110000101 {*
b1000001100000000110101110000101 I+
b111111101101110101110000101001 }+
b111111101101110101110000101001 K,
b1000001001010001011100001010010 !-
b1000001001010001011100001010010 M-
b1001111111001100110011000 G.
b1001111111001100110011000 [.
b1000001010000000110011001101000 #.
b1000001010000000110011001101000 O.
b1000001100111011110101110000101 %/
b1000001100111011110101110000101 Q/
b1000000011001011110101110000101 '0
b1000000011001011110101110000101 S0
b1011111001010001111010110 M1
b1011111001010001111010110 a1
b1000000100000110101110000101010 )1
b1000000100000110101110000101010 U1
b1000001100011100010111000010100 +2
b1000001100011100010111000010100 W2
b1000000000110100001010001111011 -3
b1000000000110100001010001111011 Y3
b110000000110011001101000 M.
b110000000110011001101000 J.
b110000000110011001101000 Y.
b100000110101110000101010 S1
b100000110101110000101010 P1
b100000110101110000101010 _1
b1000000110111101011100001010010 N*
b1000001100000000110101110000101 P+
b111111101101110101110000101001 R,
b1000001001010001011100001010010 T-
b110000000110011001101000 N.
b1000001010000000110011001101000 V.
b1000001100111011110101110000101 X/
b1000000011001011110101110000101 Z0
b100000110101110000101010 T1
b1000000100000110101110000101010 \1
b1000001100011100010111000010100 ^2
b1000000000110100001010001111011 `3
b10000001 M*
b10000001 L*
1H*
b1000000101000010100011110101110 @*
b10000001 K*
b10000001 R*
b10000001 P*
b10000011 O+
b10000011 N+
1J+
b1000001111111111001010001111011 B+
b10000011 M+
b10000011 T+
b10000011 R+
b1111111 Q,
b1111111 P,
1L,
b111111110010001010001111010111 D,
b1111111 O,
b1111111 V,
b1111111 T,
b10000010 S-
b10000010 R-
1N-
b1000001010101110100011110101110 F-
b10000010 Q-
b10000010 X-
b10000010 V-
b10000010 U.
b10000010 T.
1P.
b1000001001111111001100110011000 H.
b10000010 S.
b10000010 Z.
b10000010 X.
b10000011 W/
b10000011 V/
1R/
b1000001111000100001010001111011 J/
b10000011 U/
b10000011 \/
b10000011 Z/
b10000000 Y0
b10000000 X0
1T0
b1000000000110100001010001111011 L0
b10000000 W0
b10000000 ^0
b10000000 \0
b10000001 [1
b10000001 Z1
1V1
b1000000111111001010001111010110 N1
b10000001 Y1
b10000001 `1
b10000001 ^1
b10000011 ]2
b10000011 \2
1X2
b1000001111100011101000111101100 P2
b10000011 [2
b10000011 b2
b10000011 `2
b10000000 _3
b10000000 ^3
1Z3
b1000000011001011110101110000101 R3
b10000000 ]3
b10000000 d3
b10000000 b3
b1000000110111101011100001010010 J*
b1000001100000000110101110000101 L+
b111111101101110101110000101001 N,
b1000001001010001011100001010010 P-
b1000001010000000110011001101000 R.
b1000001100111011110101110000101 T/
b1000000011001011110101110000101 V0
b1000000100000110101110000101010 X1
b1000001100011100010111000010100 Z2
b1000000000110100001010001111011 \3
b1000000110111101011100001010010 0
b1000000110111101011100001010010 4
b1000000110111101011100001010010 t)
b1000000110111101011100001010010 <*
b10000001 +
b10000010 ,
b1000001100000000110101110000101 \
b1000001100000000110101110000101 `
b1000001100000000110101110000101 v*
b1000001100000000110101110000101 >+
b10000011 W
b10000100 X
b111111101101110101110000101001 *"
b111111101101110101110000101001 ."
b111111101101110101110000101001 x+
b111111101101110101110000101001 @,
b1111111 %"
b10000000 &"
b1000001001010001011100001010010 V"
b1000001001010001011100001010010 Z"
b1000001001010001011100001010010 z,
b1000001001010001011100001010010 B-
b10000010 Q"
b10000011 R"
b1000001010000000110011001101000 $#
b1000001010000000110011001101000 (#
b1000001010000000110011001101000 |-
b1000001010000000110011001101000 D.
b10000010 }"
b10000000110011001101000 ##
b10000011 ~"
b1000001100111011110101110000101 P#
b1000001100111011110101110000101 T#
b1000001100111011110101110000101 ~.
b1000001100111011110101110000101 F/
b10000011 K#
b10000100 L#
b1000000011001011110101110000101 |#
b1000000011001011110101110000101 "$
b1000000011001011110101110000101 "0
b1000000011001011110101110000101 H0
b10000000 w#
b10000001 x#
b1000000100000110101110000101010 J$
b1000000100000110101110000101010 N$
b1000000100000110101110000101010 $1
b1000000100000110101110000101010 J1
b10000001 E$
b110101110000101010 I$
b10000010 F$
b1000001100011100010111000010100 v$
b1000001100011100010111000010100 z$
b1000001100011100010111000010100 &2
b1000001100011100010111000010100 L2
b10000011 q$
b10000100 r$
b1000000000110100001010001111011 D%
b1000000000110100001010001111011 H%
b1000000000110100001010001111011 (3
b1000000000110100001010001111011 N3
b10000000 ?%
b10000001 @%
b101 n%
b101 7&
b101 ^&
b101 ''
b0 N'
b101 u'
b0 >(
b101 e(
b101 .)
b101 U)
1#
b0 "
1!
#610
1&.
1".
0a.
b11 E0
1*0
b11 "1
1&0
0e0
b0 A.
b1101000001101110000101010 ,.
b1101000001101110000101010 @.
b1000010001000001101110000101010 !.
b1000010001000001101110000101010 4.
b0 |.
b1101000001101110000101010 g.
b1101000001101110000101010 {.
b1000010001000001101110000101010 _.
b1000010001000001101110000101010 o.
b111111110001010001111000 00
b111111110001010001111000 D0
b1000001011111110001010001111000 %0
b1000001011111110001010001111000 80
b111111110001010001111000 k0
b111111110001010001111000 !1
b1000001011111110001010001111000 c0
b1000001011111110001010001111000 s0
b100111010000101000111101 1.
b111011110110000101001000 3.
b1101000001101110000101010 /.
b1101000001101110000101010 >.
b1000010000000000000000000000000 ;.
b101100010111101011100010 ..
b100111010000101000111101 l.
b111011110110000101001000 n.
b1101000001101110000101010 j.
b1101000001101110000101010 y.
b1000010000000000000000000000000 v.
b101100010111101011100010 i.
b111100000000000000000000 50
b100101111110001010001111 70
b1000111111110001010001111 30
b1000111111110001010001111 B0
b1000010100000000000000000000000 ?0
b100010000000000000000000 20
b111100000000000000000000 p0
b100101111110001010001111 r0
b1000111111110001010001111 n0
b1000111111110001010001111 }0
b1000010100000000000000000000000 z0
b100010000000000000000000 m0
b1000010001000001101110000101010 -.
b10000100 8.
b10000100 ?.
b10000100 =.
0+.
b1000010001000001101110000101010 h.
b10000100 s.
b10000100 z.
b10000100 x.
0f.
b1000001011111110001010001111000 10
b10000010 <0
b10000010 C0
b10000101 A0
0/0
b1000001011111110001010001111000 l0
b10000010 w0
b10000010 ~0
b10000101 |0
0j0
b1000010011011110110000101001000 7.
0<.
b10011101000010100011110 0.
b1 9.
15.
b10000100 :.
b1000010011011110110000101001000 r.
0w.
b10011101000010100011110 k.
b1 t.
1p.
b10000100 u.
b1000010100101111110001010001111 ;0
0@0
b11110000000000000000000 40
b1 =0
190
b10000101 >0
b1000010100101111110001010001111 v0
0{0
b11110000000000000000000 o0
b1 x0
1t0
b10000101 y0
b1000001100111010000101000111101 6.
b1000001100111010000101000111101 q.
b1000010011100000000000000000000 :0
b1000010011100000000000000000000 u0
b1000010001000001101110000101010 $#
b1000001011111110001010001111000 |#
b1000010001000001101110000101010 {"
b1000010001000001101110000101010 %.
b1000010011011110110000101001000 $.
b1000010011011110110000101001000 (.
b1000010011011110110000101001000 ].
b1000010011011110110000101001000 c.
b1000001011111110001010001111000 u#
b1000001011111110001010001111000 )0
b1000010100101111110001010001111 (0
b1000010100101111110001010001111 ,0
b1000010100101111110001010001111 a0
b1000010100101111110001010001111 g0
b1010000001011100001010010 G.
b1010000001011100001010010 [.
b1000010011011110110000101001000 #.
b1000010011011110110000101001000 O.
b1011011110100110011001101 K0
b1011011110100110011001101 _0
b1000010100101111110001010001111 '0
b1000010100101111110001010001111 S0
b101111110100011110101110 J.
b101111110100011110101110 Y.
b100100001011001100110011 N0
b100100001011001100110011 ]0
b101111110100011110101110 N.
b111011110110000101001000 M.
b1000010011011110110000101001000 V.
b100100001011001100110011 R0
b100101111110001010001111 Q0
b1000010100101111110001010001111 Z0
b1100000001100110011010 K.
b1000010010000001011100001010010 H.
b10000100 S.
b10000100 Z.
b10000100 X.
b110000000110011001101000 L.
b1110010111101011100 O0
b1000010111011110100110011001101 L0
b10000101 W0
b10000101 ^0
b10000101 \0
b111001011110101110000101 P0
b1000010001111110100011110101110 R.
0W.
b10 T.
1P.
b10000100 U.
b1000010100100001011001100110011 V0
0[0
b101 X0
1T0
b10000101 Y0
b1000001010000000110011001101000 Q.
b1000000011001011110101110000101 U0
b1000010001111110100011110101110 P'
b1000010001111110100011110101110 }-
b1000010001111110100011110101110 C.
b1000010100100001011001100110011 @(
b1000010100100001011001100110011 #0
b1000010100100001011001100110011 G0
b1010000001011100001010010 V'
b1010000001011100001010010 j'
b1000010001111110100011110101110 J'
b1000010001111110100011110101110 ^'
b1011011110100110011001101 F(
b1011011110100110011001101 Z(
b1000010100100001011001100110011 :(
b1000010100100001011001100110011 N(
b101111110100011110101110 \'
b101111110100011110101110 Y'
b101111110100011110101110 h'
b100100001011001100110011 L(
b100100001011001100110011 I(
b100100001011001100110011 X(
b101111110100011110101110 ]'
b1000010001111110100011110101110 e'
b100100001011001100110011 M(
b1000010100100001011001100110011 U(
b0 Z'
b1000010010000001011100001010010 W'
b10000100 b'
b10000100 i'
b10000100 g'
b0 ['
b0 J(
b1000010111011110100110011001101 G(
b10000101 R(
b10000101 Y(
b10000101 W(
b0 K(
b1000010001111110100011110101110 a'
1f'
b10000100 c'
1_'
b10000100 d'
b1000010100100001011001100110011 Q(
1V(
b10000101 S(
1O(
b10000101 T(
b0 `'
b0 P(
b1000010001111110100011110101110 M'
b1000010001111110100011110101110 S'
b1000010100100001011001100110011 =(
b1000010100100001011001100110011 C(
b101 N'
b101 >(
#640
0!
#680
0#
b1 "
1!
#720
0!
#760
b10 "
1!
#800
0!
#840
b11 "
1!
#880
0!
#920
1&.
1".
0a.
0*0
0&0
1e0
b100111010000101000111101 1.
b100111010000101000111101 l.
b111111110001010001111000 50
b111000000001110101110001 20
b111111110001010001111000 p0
b111000000001110101110001 m0
0+.
0f.
1/0
b1000010000000000000000000000000 ?0
1j0
b1000010000000000000000000000000 z0
b1000000111111110001010001111000 u#
b1000000111111110001010001111000 )0
b1000001100111010000101000111101 6.
0<.
b1000001100111010000101000111101 q.
0w.
b1000000111111110001010001111000 :0
1@0
b111111110001010001111 40
b10000100 >0
b11 =0
190
b10000100 A0
b1000000111111110001010001111000 u0
1{0
b111111110001010001111 o0
b10000100 y0
b11 x0
1t0
b10000100 |0
b11000010101001011001010001111011 w)
b11000010101001011001010001111011 ,*
b11000010101001011001010001111011 W*
b11000010101001011001010001111011 g*
b11000010010000111010111000010101 #/
b11000010010000111010111000010101 6/
b11000010010000111010111000010101 a/
b11000010010000111010111000010101 q/
b11000010010100000001110101110001 %0
b11000010010100000001110101110001 80
b11000010010100000001110101110001 c0
b11000010010100000001110101110001 s0
b11000000111111111110101110000110 '1
b11000000111111111110101110000110 :1
b11000000111111111110101110000110 e1
b11000000111111111110101110000110 u1
b11000001111001000100010100011110 )2
b11000001111001000100010100011110 <2
b11000001111001000100010100011110 g2
b11000001111001000100010100011110 w2
b11000010100001010101111101011101 +3
b11000010100001010101111101011101 >3
b11000010100001010101111101011101 i3
b11000010100001010101111101011101 y3
b11000010000101110110101000111110 y*
b11000010000101110110101000111110 .+
b11000010000101110110101000111110 Y+
b11000010000101110110101000111110 i+
b11000000000110110001111010111001 {+
b11000000000110110001111010111001 0,
b11000000000110110001111010111001 [,
b11000000000110110001111010111001 k,
b11000010100001100111010001111011 },
b11000010100001100111010001111011 2-
b11000010100001100111010001111011 ]-
b11000010100001100111010001111011 m-
b1000010101001011001010001111011 %*
b1000010101001011001010001111011 `*
b110 A.
b111101000111101101000000 ,.
b111101000111101101000000 @.
b110 |.
b111101000111101101000000 g.
b111101000111101101000000 {.
b1000010010000111010111000010101 //
b1000010010000111010111000010101 j/
b1000010010100000001110101110001 10
b10000100 <0
b10000100 C0
b0 E0
b1110100000001110101110001 00
b1110100000001110101110001 D0
b1000010010100000001110101110001 l0
b10000100 w0
b10000100 ~0
b0 "1
b1110100000001110101110001 k0
b1110100000001110101110001 !1
b1000000111111111110101110000110 31
b1000000111111111110101110000110 n1
b1000001111001000100010100011110 52
b1000001111001000100010100011110 p2
b1000010100001010101111101011101 73
b1000010100001010101111101011101 r3
b111110111101000111101101000000 {"
b111110111101000111101101000000 %.
b1101001011001010001111011 $*
b1101001011001010001111011 8*
b1101001011001010001111011 _*
b1101001011001010001111011 s*
b1000010000101110110101000111110 '+
b10000100 2+
b10000100 9+
b0 ;+
b1100101110110101000111110 &+
b1100101110110101000111110 :+
b1000010000101110110101000111110 b+
b10000100 m+
b10000100 t+
b0 v+
b1100101110110101000111110 a+
b1100101110110101000111110 u+
b1000000000110110001111010111001 ),
b10000000 4,
b10000000 ;,
b0 =,
b1100110110001111010111001 (,
b1100110110001111010111001 <,
b1000000000110110001111010111001 d,
b10000000 o,
b10000000 v,
b0 x,
b1100110110001111010111001 c,
b1100110110001111010111001 w,
b1000010100001100111010001111011 +-
b10000101 6-
b10000101 =-
b0 ?-
b1100001100111010001111011 *-
b1100001100111010001111011 >-
b1000010100001100111010001111011 f-
b10000101 q-
b10000101 x-
b0 z-
b1100001100111010001111011 e-
b1100001100111010001111011 y-
b1000000111101000111101101 /.
b1000000111101000111101101 >.
b11000101111010111000011 ..
b111110111101000111101101000000 !.
b111110111101000111101101000000 4.
b1000000111101000111101101 j.
b1000000111101000111101101 y.
b11000101111010111000011 i.
b111110111101000111101101000000 _.
b111110111101000111101101000000 o.
b1110000111010111000010101 ./
b1110000111010111000010101 B/
b1110000111010111000010101 i/
b1110000111010111000010101 }/
b1110100000001110101110001 30
b1110100000001110101110001 B0
b1110100000001110101110001 n0
b1110100000001110101110001 }0
b111111111110101110000110 21
b111111111110101110000110 F1
b111111111110101110000110 m1
b111111111110101110000110 #2
b111001000100010100011110 42
b111001000100010100011110 H2
b111001000100010100011110 o2
b111001000100010100011110 %3
b1100001010101111101011101 63
b1100001010101111101011101 J3
b1100001010101111101011101 q3
b1100001010101111101011101 '4
b1010111110010001111010110 G.
b1010111110010001111010110 [.
b1000000001110101110001000 K0
b1000000001110101110001000 _0
b1101001011001010001111011 '*
b1101001011001010001111011 6*
b1101001011001010001111011 b*
b1101001011001010001111011 q*
b1100101110110101000111110 )+
b1100101110110101000111110 8+
b1100101110110101000111110 d+
b1100101110110101000111110 s+
b1100110110001111010111001 +,
b1100110110001111010111001 :,
b1100110110001111010111001 f,
b1100110110001111010111001 u,
b1100001100111010001111011 --
b1100001100111010001111011 <-
b1100001100111010001111011 h-
b1100001100111010001111011 w-
b101000001101110000101010 3.
b1000001100000000000000000000000 ;.
b101000001101110000101010 n.
b1000001100000000000000000000000 v.
b1110000111010111000010101 1/
b1110000111010111000010101 @/
b1110000111010111000010101 l/
b1110000111010111000010101 {/
b111100000000000000000000 70
b111100000000000000000000 r0
b1011111111111010111000011 51
b1011111111111010111000011 D1
b1011111111111010111000011 p1
b1011111111111010111000011 !2
b1011100100010001010001111 72
b1011100100010001010001111 F2
b1011100100010001010001111 r2
b1011100100010001010001111 #3
b1100001010101111101011101 93
b1100001010101111101011101 H3
b1100001010101111101011101 t3
b1100001010101111101011101 %4
b101000001101110000101010 J.
b101000001101110000101010 Y.
b111111110001010001111000 N0
b111111110001010001111000 ]0
b111110010000101000111110 &*
b111110010000101000111110 a*
b110111111110010100011111 (+
b110111111110010100011111 c+
b110100100010100011110110 *,
b110100100010100011110110 e,
b111101010111010001111011 ,-
b111101010111010001111011 g-
b100111010000101000111101 0.
b10000011 :.
b0 9.
15.
b111110111101000111101101000000 -.
b1111101 8.
b1111101 ?.
b10000011 =.
b100111010000101000111101 k.
b10000011 u.
b0 t.
1p.
b111110111101000111101101000000 h.
b1111101 s.
b1111101 z.
b10000011 x.
b110110001000010100011111 0/
b110110001000010100011111 k/
b110111110010100011110110 41
b110111110010100011110110 o1
b110111000111010001111011 62
b110111000111010001111011 q2
b111111011001011110101111 83
b111111011001011110101111 s3
b101000001101110000101010 N.
b111111110001010001111000 R0
b1000001101000001101110000101010 7.
b1000001101000001101110000101010 r.
b1000010011100000000000000000000 ;0
b1000010011100000000000000000000 v0
1W.
b1000001110111110010001111010110 H.
b10000011 S.
b10000011 Z.
b10000011 X.
1[0
b1000000100000001110101110001000 L0
b10000001 W0
b10000001 ^0
b10000001 \0
b1101111010111000010 (*
b101 1*
1-*
b10000101 2*
b1101111010111000010 c*
b101 l*
1h*
b10000101 m*
b1000000001101011100001 *+
b10 3+
1/+
b10000100 4+
b1000000001101011100001 e+
b10 n+
1j+
b10000100 o+
b1011011101011100001010 ,,
b10 5,
11,
b10000000 6,
b1011011101011100001010 g,
b10 p,
1l,
b10000000 q,
b10101000101110000101 .-
b100 7-
13-
b10000101 8-
b10101000101110000101 i-
b100 r-
1n-
b10000101 s-
b1001110111101011100001 2/
b10 ;/
17/
b10000100 </
b1001110111101011100001 m/
b10 v/
1r/
b10000100 w/
b1000001101011100001010 61
b10 ?1
1;1
b10000010 @1
b1000001101011100001010 q1
b10 z1
1v1
b10000010 {1
b1000111000101110000101 82
b10 A2
1=2
b10000100 B2
b1000111000101110000101 s2
b10 |2
1x2
b10000100 }2
b100110100001010001 :3
b110 C3
1?3
b10000101 D3
b100110100001010001 u3
b110 ~3
1z3
b10000101 !4
b1000001101000001101110000101010 R.
b1000000111111110001010001111000 V0
b1000000010111101011100001010010 .*
b1000000010111101011100001010010 i*
b1000001000000000110101110000101 0+
b1000001000000000110101110000101 k+
b111111001101110101110000101001 2,
b111111001101110101110000101001 m,
b1000000101010001011100001010010 4-
b1000000101010001011100001010010 o-
b1000001101000001101110000101010 $.
b1000001101000001101110000101010 (.
b1000001101000001101110000101010 ].
b1000001101000001101110000101010 c.
b1000001000111011110101110000101 8/
b1000001000111011110101110000101 s/
b1000000111111110001010001111000 (0
b1000000111111110001010001111000 ,0
b1000000111111110001010001111000 a0
b1000000111111110001010001111000 g0
b1000000000000110101110000101010 <1
b1000000000000110101110000101010 w1
b1000001000011100010111000010100 >2
b1000001000011100010111000010100 y2
b111111100110100001010001111011 @3
b111111100110100001010001111011 {3
b1000001101000001101110000101010 #.
b1000001101000001101110000101010 O.
b1000000111111110001010001111000 '0
b1000000111111110001010001111000 S0
b0 P'
b0 }-
b0 C.
b0 @(
b0 #0
b0 G0
b1000000010111101011100001010010 )
b1000000010111101011100001010010 {)
b1000000010111101011100001010010 z)
b1000000010111101011100001010010 ~)
b1000000010111101011100001010010 U*
b1000000010111101011100001010010 [*
b1000001000000000110101110000101 U
b1000001000000000110101110000101 }*
b1000001000000000110101110000101 |*
b1000001000000000110101110000101 "+
b1000001000000000110101110000101 W+
b1000001000000000110101110000101 ]+
b111111001101110101110000101001 #"
b111111001101110101110000101001 !,
b111111001101110101110000101001 ~+
b111111001101110101110000101001 $,
b111111001101110101110000101001 Y,
b111111001101110101110000101001 _,
b1000000101010001011100001010010 O"
b1000000101010001011100001010010 #-
b1000000101010001011100001010010 "-
b1000000101010001011100001010010 &-
b1000000101010001011100001010010 [-
b1000000101010001011100001010010 a-
b1000001000111011110101110000101 I#
b1000001000111011110101110000101 '/
b1000001000111011110101110000101 &/
b1000001000111011110101110000101 */
b1000001000111011110101110000101 _/
b1000001000111011110101110000101 e/
b1000000000000110101110000101010 C$
b1000000000000110101110000101010 +1
b1000000000000110101110000101010 *1
b1000000000000110101110000101010 .1
b1000000000000110101110000101010 c1
b1000000000000110101110000101010 i1
b1000001000011100010111000010100 o$
b1000001000011100010111000010100 -2
b1000001000011100010111000010100 ,2
b1000001000011100010111000010100 02
b1000001000011100010111000010100 e2
b1000001000011100010111000010100 k2
b111111100110100001010001111011 =%
b111111100110100001010001111011 /3
b111111100110100001010001111011 .3
b111111100110100001010001111011 23
b111111100110100001010001111011 g3
b111111100110100001010001111011 m3
b0 V'
b0 j'
b0 J'
b0 ^'
b0 F(
b0 Z(
b0 :(
b0 N(
b1000000010111101011100001010010 y)
b1000000010111101011100001010010 G*
b1000001000000000110101110000101 {*
b1000001000000000110101110000101 I+
b111111001101110101110000101001 }+
b111111001101110101110000101001 K,
b1000000101010001011100001010010 !-
b1000000101010001011100001010010 M-
b1000001101000001101110000101010 V.
b1000001000111011110101110000101 %/
b1000001000111011110101110000101 Q/
b1000000111111110001010001111000 Z0
b1000000000000110101110000101010 )1
b1000000000000110101110000101010 U1
b1000001000011100010111000010100 +2
b1000001000011100010111000010100 W2
b111111100110100001010001111011 -3
b111111100110100001010001111011 Y3
b0 \'
b0 Y'
b0 h'
b0 L(
b0 I(
b0 X(
b0 ]'
b0 e'
b0 M(
b0 U(
b1000000010111101011100001010010 N*
b1000001000000000110101110000101 P+
b111111001101110101110000101001 R,
b1000000101010001011100001010010 T-
b0 L.
b101000001101110000101010 M.
b1000001000111011110101110000101 X/
b0 P0
b111111110001010001111000 Q0
b1000000000000110101110000101010 \1
b1000001000011100010111000010100 ^2
b111111100110100001010001111011 `3
0f'
b0 d'
b0 c'
1_'
b0 W'
b0 b'
b0 i'
b0 g'
0V(
b0 T(
b0 S(
1O(
b0 G(
b0 R(
b0 Y(
b0 W(
b10000000 M*
b10000000 L*
1H*
b1000000001000010100011110101110 @*
b10000000 K*
b10000000 R*
b10000000 P*
b10000010 O+
b10000010 N+
1J+
b1000001011111111001010001111011 B+
b10000010 M+
b10000010 T+
b10000010 R+
b1111110 Q,
b1111110 P,
1L,
b111111010010001010001111010111 D,
b1111110 O,
b1111110 V,
b1111110 T,
b10000001 S-
b10000001 R-
1N-
b1000000110101110100011110101110 F-
b10000001 Q-
b10000001 X-
b10000001 V-
b0 K.
b10000011 T.
1P.
b10000011 U.
b10000010 W/
b10000010 V/
1R/
b1000001011000100001010001111011 J/
b10000010 U/
b10000010 \/
b10000010 Z/
b0 O0
b10000001 X0
1T0
b10000001 Y0
b10000000 [1
b10000000 Z1
1V1
b1000000011111001010001111010110 N1
b10000000 Y1
b10000000 `1
b10000000 ^1
b10000010 ]2
b10000010 \2
1X2
b1000001011100011101000111101100 P2
b10000010 [2
b10000010 b2
b10000010 `2
b1111111 _3
b1111111 ^3
1Z3
b111111111001011110101110000101 R3
b1111111 ]3
b1111111 d3
b1111111 b3
b0 a'
b0 Q(
b1000000010111101011100001010010 J*
b1000001000000000110101110000101 L+
b111111001101110101110000101001 N,
b1000000101010001011100001010010 P-
b0 Q.
b1000001000111011110101110000101 T/
b0 U0
b1000000000000110101110000101010 X1
b1000001000011100010111000010100 Z2
b111111100110100001010001111011 \3
b0 M'
b0 S'
b101 N'
b0 =(
b0 C(
b101 >(
b1000000010111101011100001010010 0
b1000000010111101011100001010010 4
b1000000010111101011100001010010 t)
b1000000010111101011100001010010 <*
b10000000 +
b10000001 ,
b1000001000000000110101110000101 \
b1000001000000000110101110000101 `
b1000001000000000110101110000101 v*
b1000001000000000110101110000101 >+
b10000010 W
b10000011 X
b111111001101110101110000101001 *"
b111111001101110101110000101001 ."
b111111001101110101110000101001 x+
b111111001101110101110000101001 @,
b1111110 %"
b1111111 &"
b1000000101010001011100001010010 V"
b1000000101010001011100001010010 Z"
b1000000101010001011100001010010 z,
b1000000101010001011100001010010 B-
b10000001 Q"
b10000010 R"
b111110111101000111101101000000 $#
b1000001101000001101110000101010 (#
b1000001101000001101110000101010 |-
b1000001101000001101110000101010 D.
b10000011 }"
b1000001101110000101010 ##
b10000100 ~"
b1000001000111011110101110000101 P#
b1000001000111011110101110000101 T#
b1000001000111011110101110000101 ~.
b1000001000111011110101110000101 F/
b10000010 K#
b10000011 L#
b1000000111111110001010001111000 |#
b1000000111111110001010001111000 "$
b1000000111111110001010001111000 "0
b1000000111111110001010001111000 H0
b10000001 w#
b11111110001010001111000 {#
b10000010 x#
b1000000000000110101110000101010 J$
b1000000000000110101110000101010 N$
b1000000000000110101110000101010 $1
b1000000000000110101110000101010 J1
b10000000 E$
b10000001 F$
b1000001000011100010111000010100 v$
b1000001000011100010111000010100 z$
b1000001000011100010111000010100 &2
b1000001000011100010111000010100 L2
b10000010 q$
b10000011 r$
b111111100110100001010001111011 D%
b111111100110100001010001111011 H%
b111111100110100001010001111011 (3
b111111100110100001010001111011 N3
b1111111 ?%
b10000000 @%
b101 n%
b101 7&
b101 ^&
b101 ''
b101 u'
b101 e(
b101 .)
b101 U)
1#
b0 "
1!
#960
0!
#1000
0#
b1 "
1!
#1040
0!
#1080
b10 "
1!
#1120
0!
#1160
b11 "
1!
#1200
0!
#1240
b11000010101010010000111101011100 w)
b11000010101010010000111101011100 ,*
b11000010101010010000111101011100 W*
b11000010101010010000111101011100 g*
b11000010001001110111011110101111 y*
b11000010001001110111011110101111 .+
b11000010001001110111011110101111 Y+
b11000010001001110111011110101111 i+
b11000000001100100000101000111110 {+
b11000000001100100000101000111110 0,
b11000000001100100000101000111110 [,
b11000000001100100000101000111110 k,
b11000010100010111011101000111110 },
b11000010100010111011101000111110 2-
b11000010100010111011101000111110 ]-
b11000010100010111011101000111110 m-
b11000010010101110110101110000110 #/
b11000010010101110110101110000110 6/
b11000010010101110110101110000110 a/
b11000010010101110110101110000110 q/
b11000010011000000000111010111001 %0
b11000010011000000000111010111001 80
b11000010011000000000111010111001 c0
b11000010011000000000111010111001 s0
b11000010100001101001001110000110 +3
b11000010100001101001001110000110 >3
b11000010100001101001001110000110 i3
b11000010100001101001001110000110 y3
b11000001000100000110000101001000 '1
b11000001000100000110000101001000 :1
b11000001000100000110000101001000 e1
b11000001000100000110000101001000 u1
b11000010000000111110100001010010 )2
b11000010000000111110100001010010 <2
b11000010000000111110100001010010 g2
b11000010000000111110100001010010 w2
b1000010101010010000111101011100 %*
b1000010101010010000111101011100 `*
b1000010001001110111011110101111 '+
b1000010001001110111011110101111 b+
b1000000001100100000101000111110 ),
b1000000001100100000101000111110 d,
b1000010100010111011101000111110 +-
b1000010100010111011101000111110 f-
b1000010010101110110101110000110 //
b1000010010101110110101110000110 j/
b1000010011000000000111010111001 10
b1000010011000000000111010111001 l0
b1000010100001101001001110000110 73
b1000010100001101001001110000110 r3
b1101010010000111101011100 $*
b1101010010000111101011100 8*
b1101010010000111101011100 _*
b1101010010000111101011100 s*
b1101001110111011110101111 &+
b1101001110111011110101111 :+
b1101001110111011110101111 a+
b1101001110111011110101111 u+
b1101100100000101000111110 (,
b1101100100000101000111110 <,
b1101100100000101000111110 c,
b1101100100000101000111110 w,
b1100010111011101000111110 *-
b1100010111011101000111110 >-
b1100010111011101000111110 e-
b1100010111011101000111110 y-
0&.
0".
1a.
b1110101110110101110000110 ./
b1110101110110101110000110 B/
b1110101110110101110000110 i/
b1110101110110101110000110 }/
b1111000000000111010111001 00
b1111000000000111010111001 D0
b1111000000000111010111001 k0
b1111000000000111010111001 !1
b1000001000100000110000101001000 31
b10000010 >1
b10000010 E1
b0 G1
b1100100000110000101001000 21
b1100100000110000101001000 F1
b1000001000100000110000101001000 n1
b10000010 y1
b10000010 "2
b0 $2
b1100100000110000101001000 m1
b1100100000110000101001000 #2
b1000010000000111110100001010010 52
b10000100 @2
b10000100 G2
b0 I2
b1100000111110100001010010 42
b1100000111110100001010010 H2
b1000010000000111110100001010010 p2
b10000100 {2
b10000100 $3
b0 &3
b1100000111110100001010010 o2
b1100000111110100001010010 %3
b1100001101001001110000110 63
b1100001101001001110000110 J3
b1100001101001001110000110 q3
b1100001101001001110000110 '4
b1101010010000111101011100 '*
b1101010010000111101011100 6*
b1101010010000111101011100 b*
b1101010010000111101011100 q*
b1101001110111011110101111 )+
b1101001110111011110101111 8+
b1101001110111011110101111 d+
b1101001110111011110101111 s+
b1101100100000101000111110 +,
b1101100100000101000111110 :,
b1101100100000101000111110 f,
b1101100100000101000111110 u,
b1100010111011101000111110 --
b1100010111011101000111110 <-
b1100010111011101000111110 h-
b1100010111011101000111110 w-
b0 A.
b1100110110010000101000111 ,.
b1100110110010000101000111 @.
b111110011101000111101101000000 {"
b111110011101000111101101000000 %.
b0 |.
b1100110110010000101000111 g.
b1100110110010000101000111 {.
b1110101110110101110000110 1/
b1110101110110101110000110 @/
b1110101110110101110000110 l/
b1110101110110101110000110 {/
b1111000000000111010111001 30
b1111000000000111010111001 B0
b1111000000000111010111001 n0
b1111000000000111010111001 }0
b1100100000110000101001000 51
b1100100000110000101001000 D1
b1100100000110000101001000 p1
b1100100000110000101001000 !2
b1100000111110100001010010 72
b1100000111110100001010010 F2
b1100000111110100001010010 r2
b1100000111110100001010010 #3
b1100001101001001110000110 93
b1100001101001001110000110 H3
b1100001101001001110000110 t3
b1100001101001001110000110 %4
b111111001000010100011111 &*
b111111001000010100011111 a*
b111011111111001010010000 (+
b111011111111001010010000 c+
b111010010001010001111011 *,
b111010010001010001111011 e,
b111110101011101000111110 ,-
b111110101011101000111110 g-
b111101000111101101000000 1.
b100111010000101000111101 3.
b1100110110010000101000111 /.
b1100110110010000101000111 >.
b111111100001011100001010 ..
b11000001100110110010000101000111 !.
b11000001100110110010000101000111 4.
b111101000111101101000000 l.
b100111010000101000111101 n.
b1100110110010000101000111 j.
b1100110110010000101000111 y.
b111111100001011100001010 i.
b11000001100110110010000101000111 _.
b11000001100110110010000101000111 o.
b111011000100001010010000 0/
b111011000100001010010000 k/
b111100000000111010111001 20
b111100000000111010111001 m0
b111011111001010001111011 41
b111011111001010001111011 o1
b111011100011101000111110 62
b111011100011101000111110 q2
b111111101100101111011000 83
b111111101100101111011000 s3
1+.
b1000001100000000000000000000000 ;.
1f.
b1000001100000000000000000000000 v.
b110111101011100001 (*
b110 1*
1-*
b10000101 2*
b110111101011100001 c*
b110 l*
1h*
b10000101 m*
b100000000110101110000 *+
b11 3+
1/+
b10000100 4+
b100000000110101110000 e+
b11 n+
1j+
b10000100 o+
b101101110101110000101 ,,
b11 5,
11,
b10000000 6,
b101101110101110000101 g,
b11 p,
1l,
b10000000 q,
b1010100010111000010 .-
b101 7-
13-
b10000101 8-
b1010100010111000010 i-
b101 r-
1n-
b10000101 s-
b111110011101000111101101000000 6.
1<.
b11110100011110110 0.
b10000011 :.
b111 9.
15.
b1000001100110110010000101000111 -.
b10000011 8.
b10000011 ?.
b10000011 =.
b111110011101000111101101000000 q.
1w.
b11110100011110110 k.
b10000011 u.
b111 t.
1p.
b1000001100110110010000101000111 h.
b10000011 s.
b10000011 z.
b10000011 x.
b100111011110101110000 2/
b11 ;/
17/
b10000100 </
b100111011110101110000 m/
b11 v/
1r/
b10000100 w/
b11111111000101000111 40
b100 =0
190
b10000100 >0
b11111111000101000111 o0
b100 x0
1t0
b10000100 y0
b100000110101110000101 61
b11 ?1
1;1
b10000010 @1
b100000110101110000101 q1
b11 z1
1v1
b10000010 {1
b100011100010111000010 82
b11 A2
1=2
b10000100 B2
b100011100010111000010 s2
b11 |2
1x2
b10000100 }2
b10011010000101000 :3
b111 C3
1?3
b10000101 D3
b10011010000101000 u3
b111 ~3
1z3
b10000101 !4
b111111110111101011100001010010 .*
b111111110111101011100001010010 i*
b1000000100000000110101110000101 0+
b1000000100000000110101110000101 k+
b111110101101110101110000101001 2,
b111110101101110101110000101001 m,
b1000000001010001011100001010010 4-
b1000000001010001011100001010010 o-
b1000001100111010000101000111101 7.
b1000001100111010000101000111101 r.
b1000000100111011110101110000101 8/
b1000000100111011110101110000101 s/
b1000000011111110001010001111000 :0
b1000000011111110001010001111000 u0
b111111100000110101110000101010 <1
b111111100000110101110000101010 w1
b1000000100011100010111000010100 >2
b1000000100011100010111000010100 y2
b111111000110100001010001111011 @3
b111111000110100001010001111011 {3
b111111110111101011100001010010 )
b111111110111101011100001010010 {)
b111111110111101011100001010010 z)
b111111110111101011100001010010 ~)
b111111110111101011100001010010 U*
b111111110111101011100001010010 [*
b1000000100000000110101110000101 U
b1000000100000000110101110000101 }*
b1000000100000000110101110000101 |*
b1000000100000000110101110000101 "+
b1000000100000000110101110000101 W+
b1000000100000000110101110000101 ]+
b111110101101110101110000101001 #"
b111110101101110101110000101001 !,
b111110101101110101110000101001 ~+
b111110101101110101110000101001 $,
b111110101101110101110000101001 Y,
b111110101101110101110000101001 _,
b1000000001010001011100001010010 O"
b1000000001010001011100001010010 #-
b1000000001010001011100001010010 "-
b1000000001010001011100001010010 &-
b1000000001010001011100001010010 [-
b1000000001010001011100001010010 a-
b111110011101000111101101000000 $.
b111110011101000111101101000000 (.
b111110011101000111101101000000 ].
b111110011101000111101101000000 c.
b1000000100111011110101110000101 I#
b1000000100111011110101110000101 '/
b1000000100111011110101110000101 &/
b1000000100111011110101110000101 */
b1000000100111011110101110000101 _/
b1000000100111011110101110000101 e/
b1000000011111110001010001111000 u#
b1000000011111110001010001111000 )0
b1000000011111110001010001111000 (0
b1000000011111110001010001111000 ,0
b1000000011111110001010001111000 a0
b1000000011111110001010001111000 g0
b111111100000110101110000101010 C$
b111111100000110101110000101010 +1
b111111100000110101110000101010 *1
b111111100000110101110000101010 .1
b111111100000110101110000101010 c1
b111111100000110101110000101010 i1
b1000000100011100010111000010100 o$
b1000000100011100010111000010100 -2
b1000000100011100010111000010100 ,2
b1000000100011100010111000010100 02
b1000000100011100010111000010100 e2
b1000000100011100010111000010100 k2
b111111000110100001010001111011 =%
b111111000110100001010001111011 /3
b111111000110100001010001111011 .3
b111111000110100001010001111011 23
b111111000110100001010001111011 g3
b111111000110100001010001111011 m3
b111111110111101011100001010010 y)
b111111110111101011100001010010 G*
b1000000100000000110101110000101 {*
b1000000100000000110101110000101 I+
b111110101101110101110000101001 }+
b111110101101110101110000101001 K,
b1000000001010001011100001010010 !-
b1000000001010001011100001010010 M-
b1000010111000010011000000 G.
b1000010111000010011000000 [.
b111110011101000111101101000000 #.
b111110011101000111101101000000 O.
b1000000100111011110101110000101 %/
b1000000100111011110101110000101 Q/
b1000000011111110001010001111000 '0
b1000000011111110001010001111000 S0
b111111100000110101110000101010 )1
b111111100000110101110000101010 U1
b1000000100011100010111000010100 +2
b1000000100011100010111000010100 W2
b111111000110100001010001111011 -3
b111111000110100001010001111011 Y3
b111101000111101101000000 M.
b111101000111101101000000 J.
b111101000111101101000000 Y.
b111111110111101011100001010010 N*
b1000000100000000110101110000101 P+
b111110101101110101110000101001 R,
b1000000001010001011100001010010 T-
b111101000111101101000000 N.
b111110011101000111101101000000 V.
b1000000100111011110101110000101 X/
b1000000011111110001010001111000 Z0
b111111100000110101110000101010 \1
b1000000100011100010111000010100 ^2
b111111000110100001010001111011 `3
b1111111 M*
b1111111 L*
1H*
b111111101000010100011110101110 @*
b1111111 K*
b1111111 R*
b1111111 P*
b10000001 O+
b10000001 N+
1J+
b1000000111111111001010001111011 B+
b10000001 M+
b10000001 T+
b10000001 R+
b1111101 Q,
b1111101 P,
1L,
b111110110010001010001111010111 D,
b1111101 O,
b1111101 V,
b1111101 T,
b10000000 S-
b10000000 R-
1N-
b1000000010101110100011110101110 F-
b10000000 Q-
b10000000 X-
b10000000 V-
b1111100 U.
b1111100 T.
1P.
b111110000010111000010011000000 H.
b1111100 S.
b1111100 Z.
b1111100 X.
b10000001 W/
b10000001 V/
1R/
b1000000111000100001010001111011 J/
b10000001 U/
b10000001 \/
b10000001 Z/
b10000000 Y0
b10000000 X0
1T0
b1000000000000001110101110001000 L0
b10000000 W0
b10000000 ^0
b10000000 \0
b1111111 [1
b1111111 Z1
1V1
b111111111111001010001111010110 N1
b1111111 Y1
b1111111 `1
b1111111 ^1
b10000001 ]2
b10000001 \2
1X2
b1000000111100011101000111101100 P2
b10000001 [2
b10000001 b2
b10000001 `2
b1111110 _3
b1111110 ^3
1Z3
b111111011001011110101110000101 R3
b1111110 ]3
b1111110 d3
b1111110 b3
b111111110111101011100001010010 J*
b1000000100000000110101110000101 L+
b111110101101110101110000101001 N,
b1000000001010001011100001010010 P-
b111110011101000111101101000000 R.
b1000000100111011110101110000101 T/
b1000000011111110001010001111000 V0
b111111100000110101110000101010 X1
b1000000100011100010111000010100 Z2
b111111000110100001010001111011 \3
b101 N'
b101 >(
b111111110111101011100001010010 0
b111111110111101011100001010010 4
b111111110111101011100001010010 t)
b111111110111101011100001010010 <*
b1111111 +
b10000000 ,
b1000000100000000110101110000101 \
b1000000100000000110101110000101 `
b1000000100000000110101110000101 v*
b1000000100000000110101110000101 >+
b10000001 W
b10000010 X
b111110101101110101110000101001 *"
b111110101101110101110000101001 ."
b111110101101110101110000101001 x+
b111110101101110101110000101001 @,
b1111101 %"
b1111110 &"
b1000000001010001011100001010010 V"
b1000000001010001011100001010010 Z"
b1000000001010001011100001010010 z,
b1000000001010001011100001010010 B-
b10000000 Q"
b10000001 R"
b111110011101000111101101000000 $#
b111110011101000111101101000000 (#
b111110011101000111101101000000 |-
b111110011101000111101101000000 D.
b1111100 }"
b11101000111101101000000 ##
b1111101 ~"
b1000000100111011110101110000101 P#
b1000000100111011110101110000101 T#
b1000000100111011110101110000101 ~.
b1000000100111011110101110000101 F/
b10000001 K#
b10000010 L#
b1000000011111110001010001111000 |#
b1000000011111110001010001111000 "$
b1000000011111110001010001111000 "0
b1000000011111110001010001111000 H0
b10000000 w#
b10000001 x#
b111111100000110101110000101010 J$
b111111100000110101110000101010 N$
b111111100000110101110000101010 $1
b111111100000110101110000101010 J1
b1111111 E$
b10000000 F$
b1000000100011100010111000010100 v$
b1000000100011100010111000010100 z$
b1000000100011100010111000010100 &2
b1000000100011100010111000010100 L2
b10000001 q$
b10000010 r$
b111111000110100001010001111011 D%
b111111000110100001010001111011 H%
b111111000110100001010001111011 (3
b111111000110100001010001111011 N3
b1111110 ?%
b1111111 @%
b101 n%
b101 7&
b101 ^&
b101 ''
b101 u'
b101 e(
b101 .)
b101 U)
1#
b0 "
1!
#1280
0!
#1320
0#
b1 "
1!
#1360
0!
#1400
b10 "
1!
